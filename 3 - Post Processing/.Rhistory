j=j+12
}
k=k+1
}
#View(Tot_Shortage_Annual)
#rename columns
i=1
for(TTTNum in 1:TraceNumber){
for(TTNum in 1:TraceNumber1){
for(TNum in 1:TraceNumber2){
TraceDirectory <- paste0(",Trace",TNum)
TraceNum1<- paste0(",Trace",TTNum)
TraceDirectory <- paste0(TraceNum1,TraceDirectory)
TraceNum2 <- paste0("Trace",TTTNum)
TraceDirectory <- paste0(TraceNum2,TraceDirectory)
colnames(Tot_Shortage_Annual)[i] <-  TraceDirectory
i=i+1
}
}
}
#View(Tot_Shortage_Annual)
####-----------------------------------ANNUAL INFLOWS -----------------------------------------------
## Average Annual INFLOWS ### By Water Year November to October
Tot_Inflow_Annual <-1:30
Tot_Inflow_Annual <- data.frame(Tot_Inflow_Annual)
k=1
while (k<=Tot_TraceNum) {
i=1
j=12
while (i<=30) {
Tot_Inflow_Annual[i,k] <- sum(na.omit(Tot_Inflow[(j-11):j,k]))
i=i+1
j=j+12
}
k=k+1
}
#View(Tot_Inflow_Annual)
#rename columns
i=1
for(TTTNum in 1:TraceNumber){
for(TTNum in 1:TraceNumber1){
for(TNum in 1:TraceNumber2){
TraceDirectory <- paste0(",Trace",TNum)
TraceNum1<- paste0(",Trace",TTNum)
TraceDirectory <- paste0(TraceNum1,TraceDirectory)
TraceNum2 <- paste0("Trace",TTTNum)
TraceDirectory <- paste0(TraceNum2,TraceDirectory)
colnames(Tot_Inflow_Annual)[i] <-  TraceDirectory
i=i+1
}
}
}
#########-----------------------Annual Demands----------------------------------------------------------
setwd("~/GitHub/WeberBasinVulnerability/WeberBasinVulnerability/3 - Post Processing")
library(readr)
SumMIandAG <- read_csv("SumMIandAG.csv")
#View(SumMIandAG)
SumMIandAG <- data.frame(SumMIandAG$SummedMIandAG)
Tot_Demand_Annual <- c(rep(SumMIandAG$SumMIandAG.SummedMIandAG,6))
Tot_Demand_Annual <- data.frame(Tot_Demand_Annual)
#View(Tot_Demand_Annual)
Tot_Demand_Annual_Step1 <- data.frame(rep(Tot_Demand_Annual,30))
#Transpose
Stacked_Demand_Annualstep1 <- data.frame(t(Tot_Demand_Annual_Step1))
Stacked_Demand_Annual<- stack(Stacked_Demand_Annualstep1)
#View(Stacked_Demand_Annual)
#Rename columns
names(Stacked_Demand_Annual)[2] <- paste("Year")
names(Stacked_Demand_Annual)[1] <- paste("Demand")
# Change Date column
Stacked_Demand_Annual$Year <- rep(c(1:30))
#Create ID number Column
Stacked_Demand_Annual$ID <- c(1:1080)
###########################################################################################################
############################Compile all data into one data.frame###########################################
###########################################################################################################
#Storage Data in one Column
Stacked_Stor_Annual <- stack(Tot_Stor_Annual)
Stacked_Inflow_Annual <- stack(Tot_Inflow_Annual)
Stacked_Shortage_Annual <- stack(Tot_Shortage_Annual)
#Rename Columns
names(Stacked_Stor_Annual)[2] <- paste("Traces")
names(Stacked_Stor_Annual)[1] <- paste("Storage")
names(Stacked_Inflow_Annual)[2] <- paste("Traces")
names(Stacked_Inflow_Annual)[1] <- paste("Inflows")
names(Stacked_Shortage_Annual)[2] <- paste("Traces")
names(Stacked_Shortage_Annual)[1] <- paste("Shortages")
#Create ID number Column
Stacked_Inflow_Annual$ID <-c(1:1080)
Stacked_Stor_Annual$ID <-c(1:1080)
Stacked_Shortage_Annual$ID<-c(1:1080)
#Merge Data frames
#merge factors
tempfile <- merge(Stacked_Demand_Annual,Stacked_Inflow_Annual,by ="ID")
tempfile <- merge(tempfile,Stacked_Shortage_Annual,by = "ID")
#View(tempfile)
AllDataDF <- merge(tempfile,Stacked_Stor_Annual,by ="ID")
#Get rid of nonessential columns
Data <- data.frame(AllDataDF$Demand,AllDataDF$Inflows,AllDataDF$Storage,AllDataDF$Shortages,AllDataDF$Year)
#View(Data)
names(Data)[1] <- paste("Demand")
names(Data)[2] <- paste("Inflows")
names(Data)[3] <- paste("Storage")
names(Data)[4] <- paste("Shortages")
#View(AllDataDF)
##################################################################################################
##PLOTS
##################################################################################################
library(plotly)
### Plot AllData Dataframe ##########
p <- plot_ly(Data,x =Data$Demand,y=Data$Inflows,color = Data$Storage)
for(trace in colnames(Data)){
p <- p %>% plotly::add_trace(y = as.formula(paste0("~`",trace,"`")),name = trace)
}
p
p <- plot_ly(Data,x =Data$Inflows,y=Data$Demand,color = Data$Storage)
for(trace in colnames(Data)){
p <- p %>% plotly::add_trace(y = as.formula(paste0("~`",trace,"`")),name = trace)
}
p
p <- plot_ly(Data,x =Data$Inflows,color = Data$Storage) %>%
layout(title = "Title",
xaxis = list(title ="Inflows"),
yaxis = list(title = "Demand (Acre-Feet)          Storage (Acre-Feet)"))
p
#for(trace in colnames(Data)){
# p <- p %>% plotly::add_trace(y = as.formula(paste0("~`",trace,"`")),name = trace)
#}
#p
p <- plot_ly(Data,x =Data$Demand,color = Data$Storage)
for(trace in colnames(Data)){
p <- p %>% plotly::add_trace(y = as.formula(paste0("~`",trace,"`")),name = trace)
}
p
### Individual plots
#X = Demand, Y= Inflows
p <- plot_ly(Data,x =Data$Demand,y=Data$Inflows ,color = Data$Storage)%>%
layout(title = "TITLE",
xaxis = list(title ="Demand"),
yaxis = list(title = "Inflows"))
p
#X = Demand, Y= Inflows Z = Shortages
p <- plot_ly(Data,x =Data$Demand,y=Data$Inflows ,color = Data$Shortages)%>%   #How to ignore 0 values
layout(title = "Demand Factor to Inflow Factor",
xaxis = list(title ="Demand"),
yaxis = list(title = "Inflows"))
p
#X = Shortage, Y= Storage Z= Demands
p <- plot_ly(Data,x =Data$Shortage,y=Data$Storage ,color = Data$Demand) %>%
layout(title = "Title",
xaxis = list(title ="Shortage (Acre-Feet)"),
yaxis = list(title = "Storage (Acre-Feet)"))                        # look at removing 0 values of Shortages in plots
p
#X = Shortage, Y= Storage Z= Inflows
p <- plot_ly(Data,x =Data$Shortage,y=Data$Storage ,color = Data$Inflows)%>%
layout(title = "Title",
xaxis = list(title ="Shortage (Acre-Feet)"),
yaxis = list(title = "Storage (Acre-Feet)"))
p
#add_trace(y = c(rep(380000)), x = c(2:80,379000:380000), type = 'scatter',mode= 'lines',marker = list(line = list(color = 'rgba(251, 248, 24, 1)',width=2))) %>%
# add_trace(y = c(rep(340000)), x = c(2:80,339000:340000), type = 'scatter',mode= 'lines',marker = list(line = list(color = 'rgba(251, 248, 24, 1)',width=2))) %>%
#add_trace(y = c(rep(280000)), x = c(2:80,279000:280000), type = 'scatter',mode= 'lines',marker = list(line = list(color = 'rgba(251, 248, 24, 1)',width=2))) %>%   # look at removing 0 values of Shortages in plots
#######plot storage data##---------------------------------------------------------------------------------
#Line plots
#Loop                   #Get rid of Alpha line??
#different Colors
library(plotly)
p<- plot_ly(Tot_Stor, x = Tot_Stor$Date, name = 'Base', type = 'scatter', mode = 'lines',
line = list(color = colors(distinct = F), width = 2)) %>%
layout(title = "Monthly Storage",
xaxis = list(title ="Time"),
yaxis = list(title = "Storage (Acre-Feet)"))
for(trace in colnames(Tot_Stor)){
p <- p %>% plotly::add_trace(y = as.formula(paste0("~`",trace,"`")),name = trace)
}
p
## Average Annual Storage ### By Water Year November to October
Tot_Stor_Avg_Annual <-1:30
Tot_Stor_Avg_Annual <- data.frame(Tot_Stor_Avg_Annual)
k=1
while (k<=36) {
i=1
j=12
while (i<=30) {
Tot_Stor_Avg_Annual[i,k] <- mean(na.omit(Tot_Stor[(j-11):j,k]))
i=i+1
j=j+12
}
k=k+1
}
#View(Tot_Stor_Avg_Annual)
#rename columns
i=1
TTNum <- 1
TNum <- 1
while (i<=Tot_TraceNum) {
TraceNum1 <- paste0("Trace",TNum)
TraceNum2<- paste0(",Trace",TTNum)
TraceDirectory <- paste0(TraceNum1,TraceNum2)
colnames(Tot_Stor_Avg_Annual)[i] <-  TraceDirectory
i=i+1
if(TTNum > (TraceNumber-1)){
TNum = TNum +1
} else {
TNum = TNum
}
if(TTNum > (TraceNumber1-1)){
TTNum = 1
} else {
TTNum = TTNum + 1
}
}
#add Date column
Tot_Stor_Avg_Annual$Year <- seq.Date(as.Date("0000/11/30"),by ="year",length=30)
#Multiline plot Average Annual Storage
#Line plot
#Loop                   #Get rid of Base line??
#different Colors
library(plotly)
p<- plot_ly(Tot_Stor_Avg_Annual, x = Tot_Stor_Avg_Annual$Year, name = 'Base', type = 'scatter', mode = 'lines',
line = list(color = colors(distinct = F), width = 2)) %>%
layout(title = "Average Annual Storage",
xaxis = list(title ="Time"),
yaxis = list(title = "Storage (Acre-Feet)"))
for(trace in colnames(Tot_Stor_Avg_Annual)){
p <- p %>% plotly::add_trace(y = as.formula(paste0("~`",trace,"`")),name = trace)
}
p
#Parallel plots
df <- Tot_Stor
Pp <-df %>%
plot_ly(type = 'parcoords', x=
dimensions = list(
list(range =c(1000,5000)),
label = 'Storage', values = Storage_Combined
)
)
#################### Reliability  Metric for Storage ########################
#  -- Metrics based on WBWCD - Drought Contigency Plan Drought Levels --  #
# See Table 3-2 : Hot/Dry Projected Drought for Drought Levels
# Moderate Total Basin Storage Drought Level 340K to 380K -- Yellow  ("Less than 380K")
# Severe Total Basin Storage Drought Level 280K to 340K -- Orange    ("Less than 340K")
# Extreme Total Basin Storage Drought Level less than 280K -- Red    ("Less than 280K")
ModerateLevel<- 380000
SevereLevel <- 340000
ExtremeLevel<-280000
Storage_Metrics <- data.frame(Tot_Stor)
Storage_Rel_Metrics_Moderate <- data.frame(Tot_Stor)
Storage_Rel_Metrics_Severe <- data.frame(Tot_Stor)
Storage_Rel_Metrics_Extreme <- data.frame(Tot_Stor)
#View(Stor_Metrics)
#Moderate
i=1
j=1
while (j<=108) {
while (i<=359) {
Storage_Rel_Metrics_Moderate[i,j] <- ifelse(Tot_Stor[i,j]>ModerateLevel,1,0)
i=i+1
}
i=1
j=j+1 # implement data after calculated to only looking at no change in sedimentation only Trace1 0% change in reservoir storage
}
#Severe
i=1
j=1
while (j<=108) {
while (i<=359) {
Storage_Rel_Metrics_Severe[i,j] <- ifelse(Tot_Stor[i,j]>SevereLevel,1,0)
i=i+1
}
i=1
j=j+1 # implement data after calculated to only looking at no change in sedimentation only Trace1 0% change in reservoir storage
}
#Extreme
i=1
j=1
while (j<=108) {
while (i<=359) {
Storage_Rel_Metrics_Extreme[i,j] <- ifelse(Tot_Stor[i,j]>ExtremeLevel,1,0)
i=i+1
}
i=1
j=j+1 # implement data after calculated to only looking at no change in sedimentation only Trace1 0% change in reservoir storage
}
#View(Storage_Rel_Metrics_Moderate)
#View(Storage_Rel_Metrics_Severe)
#View(Storage_Rel_Metrics_Extreme)
## Calculate Reliability
Stor_Rel_Moderate <- data.frame(Storage_Rel_Metrics_Moderate[1,])
Stor_Rel_Severe <- data.frame(Storage_Rel_Metrics_Severe[1,])
Stor_Rel_Extreme <- data.frame(Storage_Rel_Metrics_Extreme[1,])
i=1
while (i<=108) {
Stor_Rel_Moderate[,i] <- round(sum((Storage_Rel_Metrics_Moderate[,i]/359)*100),1)
i=i+1
}
SRM<- Stor_Rel_Moderate
x<-data.frame(colnames(Stor_Rel_Moderate))
i=1
while (i<=108) {
Stor_Rel_Severe[,i] <- round(sum((Storage_Rel_Metrics_Severe[,i]/359)*100),1)
i=i+1
}
SRS<- Stor_Rel_Severe
i=1
while (i<=108) {
Stor_Rel_Extreme[,i] <- round(sum((Storage_Rel_Metrics_Extreme[,i]/359)*100),1)
i=i+1
}
SRE<- Stor_Rel_Extreme
#transpose data
Stor_Rel_Moderate <- data.frame(t(Stor_Rel_Moderate))
Stor_Rel_Severe <- data.frame(t(Stor_Rel_Severe))
Stor_Rel_Extreme <- data.frame(t(Stor_Rel_Extreme))
#Plot Reliability -- Storage
p <- plot_ly( data = Stor_Rel_Moderate,
x = x[1:108],
y = Stor_Rel_Moderate[1:108,],
type = 'scatter', mode = 'lines' #)%>%
#layout(title = "Storage Reliablity"
)
p
#No Sedimentation
library("data.table", lib.loc="~/R/win-library/3.5")
xx <- data.table(rep(0,36))
i=1
j=1
while (i<=36) {
xx[i,] <- x[j,]
i=i+1
j=j+3
}
#Moderate
Stor_Rel_Moderate_NoSediment <- data.table(rep(0,36))
i=1
j=1
while (i<=36) {
Stor_Rel_Moderate_NoSediment[i,1] <- SRM[1,j]
i=i+1
j=j+3
}
#View(Stor_Rel_Moderate_NoSediment)
p <- plot_ly( data = Stor_Rel_Moderate_NoSediment,
x = xx,
y = Stor_Rel_Moderate_NoSediment$V1,
type = 'scatter', mode = 'lines' #)%>%
#layout(title = "Storage Reliablity"
)
p
#Severe
Stor_Rel_Severe_NoSediment <- data.table(rep(0,36))
i=1
j=1
while (i<=36) {
Stor_Rel_Severe_NoSediment[i,1] <- SRS[1,j]
i=i+1
j=j+3
}
#View(Stor_Rel_Severe_NoSediment)
p <- plot_ly( data = Stor_Rel_Severe_NoSediment,
x = xx,
y = Stor_Rel_Severe_NoSediment$V1,
type = 'scatter', mode = 'lines' #)%>%
#layout(title = "Storage Reliablity"
)
p
#Extreme
Stor_Rel_Extreme_NoSediment <- data.table(rep(0,36))
i=1
j=1
while (i<=36) {
Stor_Rel_Extreme_NoSediment[i,1] <- SRE[1,j]
i=i+1
j=j+3
}
#View(Stor_Rel_Extreme_NoSediment)
p <- plot_ly( data = Stor_Rel_Extreme_NoSediment,
x = xx,
y = Stor_Rel_Extreme_NoSediment$V1,
type = 'scatter', mode = 'lines' #)%>%
#layout(title = "Storage Reliablity"
)
p
## Plot All together
p <- plot_ly( data = Stor_Rel_Moderate_NoSediment,
x = xx,
y = Stor_Rel_Moderate_NoSediment$V1, name = 'Moderate Drought Level',
type = 'scatter', mode = 'lines',line = list(color = "yellow"))%>%
layout(title = "Storage Reliablity Levels Percentage"
) %>%
add_trace(y=Stor_Rel_Severe_NoSediment$V1,name = 'Severe Drought Level' ,mode='lines',line =list(color="orange")) %>%
add_trace(y=Stor_Rel_Extreme_NoSediment$V1,name = 'Extreme Drought Level',mode='lines',line=list(color = "red"))
p
xx
x
i=1
for(TTTNum in 1:TraceNumber){
for(TTNum in 1:TraceNumber1){
for(TTNum in 1:TraceNumber2){
TraceDirectory <- paste0(",Trace",TNum)
TraceNum1<- paste0(",Trace",TTNum)
TraceDirectory <- paste0(TraceNum1,TraceDirectory)
TraceNum2 <- paste0("Trace",TTTNum)
TraceDirectory <- paste0(TraceNum2,TraceDirectory)
colnames(Tot_Stor)[i] <-  TraceDirectory
i=i+1
}
}
}
#No Sedimentation
library("data.table", lib.loc="~/R/win-library/3.5")
#Moderate
Stor_Rel_Moderate_NoSediment <- data.table(rep(0,36))
i=1
j=1
while (i<=36) {
Stor_Rel_Moderate_NoSediment[i,1] <- SRM[1,j]
i=i+1
j=j+3
}
#View(Stor_Rel_Moderate_NoSediment)
#Rename Row Names
i=1
for(TTTNum in 1:TraceNumber){
for(TTNum in 1:TraceNumber1){
TraceDirectory <- paste0(",Trace",TNum)
TraceNum1<- paste0(",Trace",TTNum)
TraceDirectory <- paste0(TraceNum1,TraceDirectory)
TraceNum2 <- paste0("Trace",TTTNum)
TraceDirectory <- paste0(TraceNum2,TraceDirectory)
rownames(Stor_Rel_Moderate_NoSediment)[i] <-  TraceDirectory
i=i+1
}
}
#View(Stor_Rel_Moderate_NoSediment)
#Rename Row Names
i=1
for(TTTNum in 1:TraceNumber){
for(TTNum in 1:TraceNumber1){
TraceDirectory <- paste0(",Trace",TNum)
TraceNum1<- paste0(",Trace",TTNum)
TraceDirectory <- paste0(TraceNum1,TraceDirectory)
rownames(Stor_Rel_Moderate_NoSediment)[i] <-  TraceDirectory
i=i+1
}
}
#View(Stor_Rel_Moderate_NoSediment)
#Rename Row Names
i=1
for(TTTNum in 1:TraceNumber){
for(TTNum in 1:TraceNumber1){
TraceDirectory <- paste0(",Trace",TTNum)
TraceNum1<- paste0(",Trace",TTTNum)
TraceDirectory <- paste0(TraceNum1,TraceDirectory)
rownames(Stor_Rel_Moderate_NoSediment)[i] <-  TraceDirectory
i=i+1
}
}
p <- plot_ly( data = Stor_Rel_Moderate_NoSediment,
x = rownames(Stor_Rel_Moderate_NoSediment),
y = Stor_Rel_Moderate_NoSediment$V1,
type = 'scatter', mode = 'lines' #)%>%
#layout(title = "Storage Reliablity"
)
p
#View(Stor_Rel_Moderate_NoSediment)
#Rename Row Names
i=1
for(TTTNum in 1:TraceNumber){
for(TTNum in 1:TraceNumber1){
TraceDirectory <- paste0("Trace",TTNum)
TraceNum1<- paste0(",Trace",TTTNum)
TraceDirectory <- paste0(TraceNum1,TraceDirectory)
rownames(Stor_Rel_Moderate_NoSediment)[i] <-  TraceDirectory
i=i+1
}
}
p <- plot_ly( data = Stor_Rel_Moderate_NoSediment,
x = rownames(Stor_Rel_Moderate_NoSediment),
y = Stor_Rel_Moderate_NoSediment$V1,
type = 'scatter', mode = 'lines' #)%>%
#layout(title = "Storage Reliablity"
)
p
#View(Stor_Rel_Moderate_NoSediment)
#Rename Row Names
i=1
for(TTTNum in 1:TraceNumber){
for(TTNum in 1:TraceNumber1){
TraceDirectory <- paste0(",Trace",TTNum)
TraceNum1<- paste0("Trace",TTTNum)
TraceDirectory <- paste0(TraceNum1,TraceDirectory)
rownames(Stor_Rel_Moderate_NoSediment)[i] <-  TraceDirectory
i=i+1
}
}
p <- plot_ly( data = Stor_Rel_Moderate_NoSediment,
x = rownames(Stor_Rel_Moderate_NoSediment),
y = Stor_Rel_Moderate_NoSediment$V1,
type = 'scatter', mode = 'lines' #)%>%
#layout(title = "Storage Reliablity"
)
p
p <- plot_ly( data = Stor_Rel_Moderate_NoSediment,
x = rownames(Stor_Rel_Moderate_NoSediment),
y = Stor_Rel_Moderate_NoSediment$V1, name = 'Moderate Drought Level',
type = 'scatter', mode = 'lines',line = list(color = "yellow"))%>%
layout(title = "Storage Reliablity Levels Percentage"
) %>%
add_trace(y=Stor_Rel_Severe_NoSediment$V1,name = 'Severe Drought Level' ,mode='lines',line =list(color="orange")) %>%
add_trace(y=Stor_Rel_Extreme_NoSediment$V1,name = 'Extreme Drought Level',mode='lines',line=list(color = "red"))
p
