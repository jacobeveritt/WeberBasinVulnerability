###########################################################################
## Set the Paths
###########################################################################
### Path for Data and Output
data_path <- "../../data"
output_path <- "../../output"
global_path <- "../global_func"
function_path <- "./functions"
### Set output location
output_name <- "clim_changeEveritt"
weber_output_path <- file.path(output_path,"paleo_weber")
write_output_base_path <- file.path(weber_output_path, output_name)
dir.create(write_output_base_path)
###########################################################################
###  Load functions
###########################################################################
### Load these functions for all code
require(colorspace)## JEveritt Replaced colorout with colorspace
require(assertthat)
### Load these functions for this unique project
require(ggplot2)
require(staggefuncs)
###########################################################################
## Set Initial Values
###########################################################################
### Set site data
site_id_list <- c("10128500")
site_name_list <- c("Weber River")
n <- 1
site_id <- site_id_list[n]
site_name <- site_name_list[n]
### Colors to use for climate change scenarios
cc_colors <- c("#D55E00" ,"#56B4E9", "#E69F00" , "#0072B2", "#CC79A7")
### Conversion from m3/s to acft/month
m3s_to_acftmonth <- 2131.97
### Read in climate change
read_location <- file.path(write_output_base_path, paste0(site_id,"_drought_details.csv"))
drought_event_summary <- read.csv(file = read_location)
###########################################################################
###   Distribution of duration
###########################################################################
#data!="base" &
plot_df <- subset(drought_event_summary,  data!="CTN5")
plot_df$data <- factor(plot_df$data, levels=c("paleo", "observed", "base", "WWN5","HWN5","WDN5", "HDN5"), labels= c("Reconst", "Observed",  "Base", "WW", "HW", "WD", "HD"))
p <- ggplot(plot_df, aes(x=dura_months/12, y = ..density.., fill=data))
J1Data <- merge(tempfile,Stacked_Shortage_June1,by ="Traces")
#Rename Columns
names(Stacked_Inflow_June1)[2] <- paste("Traces")
### Clear any existing data or functions.
rm(list=ls())
library("dplyr", lib.loc="~/R/win-library/3.5")
setwd("~/GitHub/WeberBasinVulnerability/WeberBasinVulnerability/2 - RiverWare Modeling/Scenario")
library(readr)
#Plots
####-----------------------------Trace Notation--------------------------------------------------
TraceNumber <- 6
TraceNumber1 <-6
TraceNumber2 <-3
Tot_TraceNum <- TraceNumber*TraceNumber1*TraceNumber2
Trace_Notation <-c(1:Tot_TraceNum)
i=1
for(TTTNum in 1:TraceNumber){
for(TTNum in 1:TraceNumber1){
for(TNum in 1:TraceNumber2){
TraceDirectory <- paste0(",Trace",TNum)
TraceNum1<- paste0(",Trace",TTNum)
TraceDirectory <- paste0(TraceNum1,TraceDirectory)
TraceNum2 <- paste0("Trace",TTTNum)
TraceDirectory <- paste0(TraceNum2,TraceDirectory)
Trace_Notation[i] <-  TraceDirectory
i=i+1
}
}
}
##################################Input data########################################################
Tot_Stor <- read.csv("Trace1,Trace1,Trace1/Total Storage_NO EVAP.csv")
Tot_Inflow <-read.csv("Trace1,Trace1,Trace1/Total Inflows.csv")
Tot_Short <-read.csv("Trace1,Trace1,Trace1/Total Shortages.csv")
##### Total Storage #####
i=1
for(TTTNum in 1:TraceNumber){
for(TTNum in 1:TraceNumber1){
for(TNum in 1:TraceNumber2){
TraceDirectory <- paste0(",Trace",TNum)
TraceDirectory <-paste0 (TraceDirectory,"/Total Storage_NO EVAP.csv")
TraceNum1<- paste0(",Trace",TTNum)
TraceDirectory <- paste0(TraceNum1,TraceDirectory)
TraceNum2 <- paste0("Trace",TTTNum)
TraceDirectory <- paste0(TraceNum2,TraceDirectory)
Location <- TraceDirectory
Temp_Storage <- read_csv(Location)
Tot_Stor[,i] <- Temp_Storage[,5]
colnames(Tot_Stor)[i] <-  TraceDirectory
i=i+1
}
}
}
Tot_Stor <- data.frame(Tot_Stor)
#add Date column
Date <- seq.Date(as.Date("0000/11/30"),by ="month",length=359)
#Tot_Stor$Date <- Date
Months <- rep(c(1:12),31)
Months<- Months[(11:369)]
#Create Years
Years <- c(0:372)
i=1
j=1
while (j<=31) {
Years[(i:(i+11))] <- rep((j-1),12)
i=i+12
j=j+1
}
Years<- Years[(11:369)]
#transpose
Tot_Stor <- t(Tot_Stor)
Tot_Stor <- data.frame(Tot_Stor)
colnames(Tot_Stor) <-  Date
### Total Inflows
i=1
for(TTTNum in 1:TraceNumber){
for(TTNum in 1:TraceNumber1){
for(TNum in 1:TraceNumber2){
TraceDirectory <- paste0(",Trace",TNum)
TraceDirectory <-paste0 (TraceDirectory,"/Total Inflows.csv")
TraceNum1<- paste0(",Trace",TTNum)
TraceDirectory <- paste0(TraceNum1,TraceDirectory)
TraceNum2 <- paste0("Trace",TTTNum)
TraceDirectory <- paste0(TraceNum2,TraceDirectory)
Location <- TraceDirectory
Temp_Storage <- read_csv(Location)
Tot_Inflow[,i] <- Temp_Storage[,5]
colnames(Tot_Inflow)[i] <-  TraceDirectory
i=i+1
}
}
}
Tot_Inflow <- data.frame(Tot_Inflow)
#transpose
Tot_Inflow <- t(Tot_Inflow)
Tot_Inflow <- data.frame(Tot_Inflow)
# column names
colnames(Tot_Inflow) <-Date
##### Total Shortages #####
i=1
for(TTTNum in 1:TraceNumber){
for(TTNum in 1:TraceNumber1){
for(TNum in 1:TraceNumber2){
TraceDirectory <- paste0(",Trace",TNum)
TraceDirectory <-paste0 (TraceDirectory,"/Total Shortages.csv")
TraceNum1<- paste0(",Trace",TTNum)
TraceDirectory <- paste0(TraceNum1,TraceDirectory)
TraceNum2 <- paste0("Trace",TTTNum)
TraceDirectory <- paste0(TraceNum2,TraceDirectory)
Location <- TraceDirectory
Temp_Storage <- read_csv(Location)
Tot_Short[,i] <- Temp_Storage[,5]
colnames(Tot_Short)[i] <-  TraceDirectory
i=i+1
}
}
}
Tot_Short <- data.frame(Tot_Short)
#add Date column
#Tot_Short$Date <- Date
#Tot_Short$Month <- data.frame(Months)
#Tot_Short$Year <- data.frame(Years)
#transpose
Tot_Short <- t(Tot_Short)
Tot_Short <- data.frame(Tot_Short)
# column names
colnames(Tot_Short) <- Date
##Total Sedimentation Changes on Reservoir
setwd("~/GitHub/WeberBasinVulnerability/WeberBasinVulnerability/3 - Post Processing")
Tot_Sed <- read_csv("Sedimentation.csv")
Tot_Sed <-data.frame(Tot_Sed)
colnames(Tot_Sed) <- Date
rownames(Tot_Sed) <- Trace_Notation
Tot_Demand <- read_csv("SumMIandAG.csv")
Tot_Demand <- data.frame(Tot_Demand)
colnames(Tot_Demand) <- Date
rownames(Tot_Demand) <- Trace_Notation
AllDataDF <- rbind(Tot_Inflow,Tot_Demand,Tot_Stor,Tot_Short,Tot_Sed)
AllDataDF <- data.frame(AllDataDF)
colnames(AllDataDF) <- Date
AllDataDF[541,] <- Years
rownames(AllDataDF)[541] <- "Year"
AllDataDF[542,] <- Months
rownames(AllDataDF)[542] <- "Month"
AllDataJ1DF <- AllDataDF[,8]
AllDataJ1DF <- data.frame(AllDataJ1DF)
Date_J1 <- c(1:30)
i=1
j=8
while (j<=359) {
AllDataJ1DF[,i] <- AllDataDF[,j]
Date_J1[i] <- Date[j]
i=i+1
j=j+12
}
AllDataJ1DF <- data.frame(AllDataJ1DF)
Date_J1 <- data.frame(Date_J1)
Stacked_Inflow_June1 <- stack(AllDataJ1DF[1:108,1:30])
Stacked_Demand_June1 <- stack(AllDataJ1DF[109:216,1:30])
Stacked_Stor_June1 <- stack(AllDataJ1DF[217:324,1:30])
Stacked_Shortage_June1 <- stack(AllDataJ1DF[325:432,1:30])
Stacked_Sed_June1 <- stack(AllDataJ1DF[433:540,1:30])
Stacked_Traces_June1 <- rep(Trace_Notation,30)
Stacked_Inflow_June1[2] <- Stacked_Traces_June1
Stacked_Demand_June1[2] <- Stacked_Traces_June1
Stacked_Stor_June1[2] <- Stacked_Traces_June1
Stacked_Shortage_June1[2] <- Stacked_Traces_June1
Stacked_Sed_June1[2] <- Stacked_Traces_June1
#Rename Columns
names(Stacked_Inflow_June1)[2] <- paste("Traces")
names(Stacked_Inflow_June1)[1] <- paste("Inflows")
names(Stacked_Demand_June1)[2] <- paste("Traces")
names(Stacked_Demand_June1)[1] <- paste("Storage")
names(Stacked_Stor_June1)[2] <- paste("Traces")
names(Stacked_Stor_June1)[1] <- paste("Storage")
names(Stacked_Shortage_June1)[2] <- paste("Traces")
names(Stacked_Shortage_June1)[1] <- paste("Shortages")
names(Stacked_Sed_June1)[2] <- paste("Traces")
names(Stacked_Sed_June1)[1] <- paste("Sedimentation")
#Merge Data frames
tempfile <- merge(Stacked_Inflow_June1,Stacked_Demand_June1,by ="Traces")
tempfile <- merge(tempfile,Stacked_Stor_June1,by = "Traces")
J1Data <- merge(tempfile,Stacked_Shortage_June1,by ="Traces")
J1Data$Sedimentation <-Stacked_Sed_June1$Sedimentation
#Merge Data frames
tempfile <- merge(Stacked_Inflow_June1,Stacked_Demand_June1,by ="Traces")
J1Data <- merge(tempfile,Stacked_Stor_June1,by = "Traces")
#Merge Data frames
J1Data <- merge(Stacked_Inflow_June1,Stacked_Demand_June1,by ="Traces")
#Merge Data frames
J1Data <- merge(Stacked_Inflow_June1,Stacked_Demand_June1,by ="Traces")
J1Data$Storage <- Stacked_Stor_June1$Storage
J1Data$Shortage <- Stacked_Shortage_June1$Shortages
J1Data$Sedimentation <-Stacked_Sed_June1$Sedimentation
View(J1Data)
#Merge Data frames
J1Data <- merge(Stacked_Inflow_June1,Stacked_Demand_June1,by ="Traces")
names(Stacked_Demand_June1)[2] <- paste("Traces")
names(Stacked_Demand_June1)[1] <- paste("Demand")
#Merge Data frames
J1Data <- merge(Stacked_Inflow_June1,Stacked_Demand_June1,by ="Traces")
J1Data$Storage <- Stacked_Stor_June1$Storage
J1Data$Shortage <- Stacked_Shortage_June1$Shortages
J1Data$Sedimentation <-Stacked_Sed_June1$Sedimentation
View(J1Data)
##################################################################################################
###PLOTS###
##################################################################################################
library(plotly)
if (!require("processx")) install.packages("processx")
setwd("~/GitHub/WeberBasinVulnerability/WeberBasinVulnerability/3 - Post Processing/Output")
#Shortage
p <- plot_ly(
x = J1Data$Demand,
y = J1Data$Inflows,
z = J1Data$Shortages, type = "contour")%>%
layout(title = "Shortages by Color",
xaxis = list(title ="Demand"),
yaxis = list(title = "Inflows"))
p
#Storage
p <- plot_ly(
x = J1Data$Demand,
y = J1Data$Inflows,
z = J1Data$Storage, nrow = 9720, ncol = 9720, type = "contour")%>%
layout(title = "Storage by Color",
xaxis = list(title ="Demand"),
yaxis = list(title = "Inflows"))
p
############ Storage Contours based on Moderate Severe and Extreme Storage Drought Levels  #############################
#Storage
p <- plot_ly(
x = J1Data$Demand,
y = J1Data$Inflows,
z = J1Data$Storage, type = "contour",
colors = c("red","orange","yellow","white"),
#contours = list(coloring = 'heatmap'),
autocontour = F,contours = list(
start = 280000,
end = 380000,
size = 50000
))%>%
layout(title = "Storage by Color",
xaxis = list(title ="Demand"),
yaxis = list(title = "Inflows"))
p
library("dplyr", lib.loc="~/R/win-library/3.5")
#################### Reliability  Metric for Storage ########################
#  -- Metrics based on WBWCD - Drought Contigency Plan Drought Levels --  #
# See Table 3-2 : Hot/Dry Projected Drought for Drought Levels
# Moderate Total Basin Storage Drought Level 340K to 380K -- Yellow  ("Less than 380K")
# Severe Total Basin Storage Drought Level 280K to 340K -- Orange    ("Less than 340K")
# Extreme Total Basin Storage Drought Level less than 280K -- Red    ("Less than 280K")
ModerateLevel<- 380000
SevereLevel <- 340000
ExtremeLevel<-280000
Storage_Metrics <- data.frame(J1Data[,3])
Storage_Rel_Metrics_Moderate <- data.frame(J1Data[,3])
Storage_Rel_Metrics_Severe <- data.frame(J1Data[,3])
Storage_Rel_Metrics_Extreme <- data.frame(J1Data[,3])
#Moderate
i=1
while (i<=9720) {
Storage_Rel_Metrics_Moderate[i,] <- ifelse(J1Data[i,3]>ModerateLevel,1,0)
i=i+1
}
#Severe
i=1
while (i<=9720) {
Storage_Rel_Metrics_Severe[i,] <- ifelse(J1Data[i,3]>SevereLevel,1,0)
i=i+1
}
#Extreme
i=1
while (i<=9720) {
Storage_Rel_Metrics_Extreme[i,] <- ifelse(J1Data[i,3]>ExtremeLevel,1,0)
i=i+1
}
library("dplyr", lib.loc="~/R/win-library/3.5")
#################### Reliability  Metric for Storage ########################
#  -- Metrics based on WBWCD - Drought Contigency Plan Drought Levels --  #
# See Table 3-2 : Hot/Dry Projected Drought for Drought Levels
# Moderate Total Basin Storage Drought Level 340K to 380K -- Yellow  ("Less than 380K")
# Severe Total Basin Storage Drought Level 280K to 340K -- Orange    ("Less than 340K")
# Extreme Total Basin Storage Drought Level less than 280K -- Red    ("Less than 280K")
ModerateLevel<- 380000
SevereLevel <- 340000
ExtremeLevel<-280000
Storage_Metrics <- data.frame(J1Data[,4])
Storage_Rel_Metrics_Moderate <- data.frame(J1Data[,4])
Storage_Rel_Metrics_Severe <- data.frame(J1Data[,4])
Storage_Rel_Metrics_Extreme <- data.frame(J1Data[,4])
#Moderate
i=1
while (i<=9720) {
Storage_Rel_Metrics_Moderate[i,] <- ifelse(J1Data[i,4]>ModerateLevel,1,0)
i=i+1
}
#Severe
i=1
while (i<=9720) {
Storage_Rel_Metrics_Severe[i,] <- ifelse(J1Data[i,4]>SevereLevel,1,0)
i=i+1
}
#Extreme
i=1
while (i<=9720) {
Storage_Rel_Metrics_Extreme[i,] <- ifelse(J1Data[i,4]>ExtremeLevel,1,0)
i=i+1
}
## Calculate Reliability
Stor_Rel_Moderate <- data.frame(J1Data[,4])
Stor_Rel_Severe <- data.frame(J1Data[,4])
Stor_Rel_Extreme <- data.frame(J1Data[,4])
i=1
while (i<=9720) {
Stor_Rel_Moderate[(i:(i+29)),] <- rep(round(sum((Storage_Rel_Metrics_Moderate[(i:(i+29)),]/30)*100),1),30)
i=i+30
}
i=1
while (i<=9720) {
Stor_Rel_Severe[(i:(i+29)),] <- rep(round(sum((Storage_Rel_Metrics_Severe[(i:(i+29)),]/30)*100),1),30)
i=i+30
}
i=1
while (i<=9720) {
Stor_Rel_Extreme[(i:(i+29)),] <- rep(round(sum((Storage_Rel_Metrics_Extreme[(i:(i+29)),]/30)*100),1),30)
i=i+30
}
# Moderate Demand Level
p <- plot_ly(
x = J1Data$Demand,
y = J1Data$Inflows,
z = Stor_Rel_Moderate$J1Data...3., type = "contour")%>%
layout(title = "Moderate Storage Level by Color",
xaxis = list(title ="Demand"),
yaxis = list(title = "Inflows"))
p
#Severe Demand Level
p <- plot_ly(
x = J1Data$Demand,
y = J1Data$Inflows,
z = Stor_Rel_Severe$J1Data...3., type = "contour")%>%
layout(title = "Severe Storage by Level Color",
xaxis = list(title ="Demand"),
yaxis = list(title = "Inflows"))
p
#Extreme Demand Level
p <- plot_ly(
x = J1Data$Demand,
y = J1Data$Inflows,
z = Stor_Rel_Extreme$J1Data...3., type = "contour")%>%
layout(title = "Extreme Storage by Color",
xaxis = list(title ="Demand"),
yaxis = list(title = "Inflows"))
p
