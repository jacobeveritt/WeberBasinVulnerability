Location <- TraceDirectory
Temp_Storage <- read_csv(Location)
Tot_Inflow[,i] <- Temp_Storage[,5]
colnames(Tot_Inflow)[i] <-  TraceDirectory
i=i+1
}
}
}
Tot_Inflow <- data.frame(Tot_Inflow)
#transpose
Tot_Inflow <- t(Tot_Inflow)
Tot_Inflow <- data.frame(Tot_Inflow)
# column names
colnames(Tot_Inflow) <-Date
##### Total Shortages #####
i=1
for(TTTNum in 1:TraceNumber){
for(TTNum in 1:TraceNumber1){
for(TNum in 1:TraceNumber2){
TraceDirectory <- paste0(",Trace",TNum)
TraceDirectory <-paste0 (TraceDirectory,"/Total Shortages.csv")
TraceNum1<- paste0(",Trace",TTNum)
TraceDirectory <- paste0(TraceNum1,TraceDirectory)
TraceNum2 <- paste0("Trace",TTTNum)
TraceDirectory <- paste0(TraceNum2,TraceDirectory)
Location <- TraceDirectory
Temp_Storage <- read_csv(Location)
Tot_Short[,i] <- Temp_Storage[,5]
colnames(Tot_Short)[i] <-  TraceDirectory
i=i+1
}
}
}
Tot_Short <- data.frame(Tot_Short)
#add Date column
#Tot_Short$Date <- Date
#Tot_Short$Month <- data.frame(Months)
#Tot_Short$Year <- data.frame(Years)
#transpose
Tot_Short <- t(Tot_Short)
Tot_Short <- data.frame(Tot_Short)
# column names
colnames(Tot_Short) <- Date
##Total Sedimentation Changes on Reservoir
setwd("~/GitHub/WeberBasinVulnerability/WeberBasinVulnerability/3 - Post Processing")
Tot_Sed <- read_csv("Sedimentation.csv")
Tot_Sed <-data.frame(Tot_Sed)
colnames(Tot_Sed) <- Date
rownames(Tot_Sed) <- Trace_Notation
Tot_Demand <- read_csv("SumMIandAG.csv")
Tot_Demand <- data.frame(Tot_Demand)
colnames(Tot_Demand) <- Date
rownames(Tot_Demand) <- Trace_Notation
AllDataDF <- rbind(Tot_Inflow,Tot_Demand,Tot_Stor,Tot_Short,Tot_Sed)
AllDataDF <- data.frame(AllDataDF)
colnames(AllDataDF) <- Date
AllDataJ1DF <- AllDataDF[,1]
AllDataJ1DF <- data.frame(AllDataJ1DF)
Date_J1 <- c(1:30)
i=1
j=8
while (j<=359) {
AllDataJ1DF[,i] <- AllDataDF[,j]
Date_J1[i] <- Date[j]
i=i+1
j=j+12
}
AllDataJ1DF <- data.frame(AllDataJ1DF)
Date_J1 <- data.frame(Date_J1)
Stacked_Inflow_June1 <- stack(AllDataJ1DF[1:108,1:30])
Stacked_Demand_June1 <- stack(AllDataJ1DF[109:216,1:30])
Stacked_Stor_June1 <- stack(AllDataJ1DF[217:324,1:30])
Stacked_Shortage_June1 <- stack(AllDataJ1DF[325:432,1:30])
Stacked_Sed_June1 <- stack(AllDataJ1DF[433:540,1:30])
Stacked_Traces_June1 <- rep(Trace_Notation,30)
Stacked_Inflow_June1[2] <- Stacked_Traces_June1
Stacked_Demand_June1[2] <- Stacked_Traces_June1
Stacked_Stor_June1[2] <- Stacked_Traces_June1
Stacked_Shortage_June1[2] <- Stacked_Traces_June1
Stacked_Sed_June1[2] <- Stacked_Traces_June1
#Rename Columns
names(Stacked_Inflow_June1)[2] <- paste("Traces")
names(Stacked_Inflow_June1)[1] <- paste("Inflows")
names(Stacked_Demand_June1)[2] <- paste("Traces")
names(Stacked_Demand_June1)[1] <- paste("Demand")
names(Stacked_Stor_June1)[2] <- paste("Traces")
names(Stacked_Stor_June1)[1] <- paste("Storage")
names(Stacked_Shortage_June1)[2] <- paste("Traces")
names(Stacked_Shortage_June1)[1] <- paste("Shortages")
names(Stacked_Sed_June1)[2] <- paste("Traces")
names(Stacked_Sed_June1)[1] <- paste("Sedimentation")
#Merge Data frames
J1Data <- Stacked_Inflow_June1
J1Data$Demand <- Stacked_Demand_June1$Demand
J1Data$Storage <- Stacked_Stor_June1$Storage
J1Data$Shortage <- Stacked_Shortage_June1$Shortages
J1Data$Sedimentation <-Stacked_Sed_June1$Sedimentation
#Rename Inflow Column
colnames(Tot_Short)[1] <- "Inflow"
## Filter Sedimentation
J1Data_NoZero <- filter(J1Data,Shortage>1)
J1Data_NoSed <- filter(J1Data,Sedimentation==0)
J1Data_10Perc <- filter(J1Data,Sedimentation==10)
J1Data_30Perc <- filter(J1Data,Sedimentation==30)
J1Data_NoSed_NoZero <- filter(J1Data_NoSed,Shortage>1)
J1Data_10Perc_NoZero <- filter(J1Data_10Perc,Shortage>1)
J1Data_30Perc_NoZero <- filter(J1Data_30Perc,Shortage>1)
##################################################################################################
###PLOTS###
##################################################################################################
library(plotly)
if (!require("processx")) install.packages("processx")
setwd("~/GitHub/WeberBasinVulnerability/WeberBasinVulnerability/3 - Post Processing/Output")
#Shortage
p <- plot_ly(
x = J1Data$Demand,
y = J1Data$Inflows,
z = J1Data$Shortage, type = "contour")%>%
colorbar(title = "Shortage Level")%>%
layout(title = "June 1st Shortages by Color",
xaxis = list(title ="Demand"),
yaxis = list(title = "Inflows"))
p
#No Zero
p <- plot_ly(
x = J1Data_NoZero$Demand,
y = J1Data_NoZero$Inflows,
z = J1Data_NoZero$Shortage, type = "contour",contours = list(start = 0,
end = 11000,
size = 100))%>%
colorbar(title = "Shortage Level")%>%
layout(title = "June 1st Shortages by Color",
xaxis = list(title ="Demand"),
yaxis = list(title = "Inflows"))
p
# 0% Sedimentation
p <- plot_ly(
x = J1Data_NoSed$Demand,
y = J1Data_NoSed$Inflows,
z = J1Data_NoSed$Shortage, type = "contour")%>%
colorbar(title="Shortage Level") %>%
layout(title = "No Sedimentation Shortages by Color",
xaxis = list(title ="Demand"),
yaxis = list(title = "Inflows"))
p
p <- plot_ly(
x = J1Data_NoSed_NoZero$Demand,
y = J1Data_NoSed_NoZero$Inflows,
z = J1Data_NoSed_NoZero$Shortage, type = "contour")%>%
colorbar(title="Shortage Level") %>%
layout(title = "No Sedimentation Shortages by Color",
xaxis = list(title ="Demand"),
yaxis = list(title = "Inflows"))
p
# 10% Sedimentation
p <- plot_ly(
x = J1Data_10Perc$Demand,
y = J1Data_10Perc$Inflows,
z = J1Data_10Perc$Shortage, type = "contour")%>%
colorbar(title="Shortage Level") %>%
layout(title = "10% Sedimentation Shortages by Color",
xaxis = list(title ="Demand"),
yaxis = list(title = "Inflows"))
p
p <- plot_ly(
x = J1Data_10Perc_NoZero$Demand,
y = J1Data_10Perc_NoZero$Inflows,
z = J1Data_10Perc_NoZero$Shortage, type = "contour")%>%
colorbar(title="Shortage Level") %>%
layout(title = "No Sedimentation Shortages by Color",
xaxis = list(title ="Demand"),
yaxis = list(title = "Inflows"))
p
# 30% Sedimentation
p <- plot_ly(
x = J1Data_30Perc$Demand,
y = J1Data_30Perc$Inflows,
z = J1Data_30Perc$Shortage, type = "contour")%>%
colorbar(title="Shortage Level") %>%
layout(title = "30% Sedimentation Shortages by Color",
xaxis = list(title ="Demand"),
yaxis = list(title = "Inflows"))
p
p <- plot_ly(
x = J1Data_30Perc_NoZero$Demand,
y = J1Data_30Perc_NoZero$Inflows,
z = J1Data_30Perc_NoZero$Shortage, type = "contour")%>%
colorbar(title="Shortage Level") %>%
layout(title = "No Sedimentation Shortages by Color",
xaxis = list(title ="Demand"),
yaxis = list(title = "Inflows"))
p
#Storage
p <- plot_ly(
x = J1Data$Demand,
y = J1Data$Inflows,
z = J1Data$Storage, type = "contour")%>%
colorbar(title="Storage Level")%>%
layout(title = "All Data Storage by Color",
xaxis = list(title ="Demand"),
yaxis = list(title = "Inflows"))
p
#0% Reservior Change to Sed
p <- plot_ly(
x = J1Data_NoSed$Demand,
y = J1Data_NoSed$Inflows,
z = J1Data_NoSed$Storage, type = "contour")%>%
layout(title = "No Sedimentation Storage by Color",
xaxis = list(title ="Demand"),
yaxis = list(title = "Inflows"))
p
#10% Reservior Change to Sed
p <- plot_ly(
x = J1Data_10Perc$Demand,
y = J1Data_10Perc$Inflows,
z = J1Data_10Perc$Storage, type = "contour")%>%
layout(title = "10% Sedimentation Storage by Color",
xaxis = list(title ="Demand"),
yaxis = list(title = "Inflows"))
p
#30% Reservior Change to Sed
p <- plot_ly(
x = J1Data_30Perc$Demand,
y = J1Data_30Perc$Inflows,
z = J1Data_30Perc$Storage, type = "contour")%>%
layout(title = "30% Sedimentation Storage by Color",
xaxis = list(title ="Demand"),
yaxis = list(title = "Inflows"))
library("dplyr", lib.loc="~/R/win-library/3.5")
#################### Reliability  Metric for Storage ########################
#  -- Metrics based on WBWCD - Drought Contigency Plan Drought Levels --  #
# See Table 3-2 : Hot/Dry Projected Drought for Drought Levels
# Moderate Total Basin Storage Drought Level 340K to 380K -- Yellow  ("Less than 380K")
# Severe Total Basin Storage Drought Level 280K to 340K -- Orange    ("Less than 340K")
# Extreme Total Basin Storage Drought Level less than 280K -- Red    ("Less than 280K")
ModerateLevel<- 380000
SevereLevel <- 340000
ExtremeLevel<-280000
Storage_Metrics <- data.frame(J1Data[,4])
Storage_Rel_Metrics_Moderate <- data.frame(J1Data[,4])
Storage_Rel_Metrics_Severe <- data.frame(J1Data[,4])
Storage_Rel_Metrics_Extreme <- data.frame(J1Data[,4])
#Moderate
i=1
while (i<=3240) {
Storage_Rel_Metrics_Moderate[i,] <- ifelse(J1Data[i,4]>ModerateLevel,1,0)
i=i+1
}
#Severe
i=1
while (i<=3240) {
Storage_Rel_Metrics_Severe[i,] <- ifelse(J1Data[i,4]>SevereLevel,1,0)
i=i+1
}
#Extreme
i=1
while (i<=3240) {
Storage_Rel_Metrics_Extreme[i,] <- ifelse(J1Data[i,4]>ExtremeLevel,1,0)
i=i+1
}
## Calculate Reliability
Stor_Rel_Moderate <- data.frame(J1Data[,4])
Stor_Rel_Severe <- data.frame(J1Data[,4])
Stor_Rel_Extreme <- data.frame(J1Data[,4])
i=1
while (i<=3240) {
Stor_Rel_Moderate[(i:(i+29)),] <- rep(round(sum((Storage_Rel_Metrics_Moderate[(i:(i+29)),]/30)*100),1),30)
i=i+30
}
i=1
while (i<=3240) {
Stor_Rel_Severe[(i:(i+29)),] <- rep(round(sum((Storage_Rel_Metrics_Severe[(i:(i+29)),]/30)*100),1),30)
i=i+30
}
i=1
while (i<=3240) {
Stor_Rel_Extreme[(i:(i+29)),] <- rep(round(sum((Storage_Rel_Metrics_Extreme[(i:(i+29)),]/30)*100),1),30)
i=i+30
}
# Moderate Demand Level
p <- plot_ly(
x = J1Data$Demand,
y = J1Data$Inflows,
z = Stor_Rel_Moderate$J1Data...4. , type = "contour")%>%
layout(title = "Moderate Storage Level by Color",
xaxis = list(title ="Demand"),
yaxis = list(title = "Inflows"))
p
#Severe Demand Level
p <- plot_ly(
x = J1Data$Demand,
y = J1Data$Inflows,
z = Stor_Rel_Severe$J1Data...4., type = "contour")%>%
layout(title = "Severe Storage by Level Color",
xaxis = list(title ="Demand"),
yaxis = list(title = "Inflows"))
p
View(J1)
View(J1Date)
View(J1Data)
i=1
while (i<=(3240/3)) {
Shortage_Rel_Metrics[i,] <- ifelse(J1Data[i,5]>0,1,0)
i=i+1
}
## Calculate Reliability
Shortage_Rel <- data.frame(J1Data[,5])
i=1
while (i<=(3240/3)) {
Shortage_Rel[(i:(i+89)),] <- rep(round(sum((Shortage_Rel_Metrics[(i:(i+89)),]/30)*100),1),30)
i=i+30
}
p <- plot_ly(
x = J1Data$Demand,
y = J1Data$Inflows,
z = Shortage_Rel$J1Data...5., type = "contour",
#colors = c("red","orange","yellow","white"),
#contours = list(coloring = 'heatmap',colors = c("red","orange","yellow","white")),
autocontour = F,contours = list(
start = 0,
end = 12000,
size = 2000 ) )%>%
layout(title = "Annual Average Shortage Reliability Metric",
xaxis = list(title ="Demand"),
yaxis = list(title = "Inflows"))
p
##########################################################################################
#Without Sedimentation
##########################################################################################
Shortage_Rel_Metrics_NoSed <- data.frame(J1Data_NoSed$Shortage)
i=1
while (i<=1080) {
Shortage_Rel_Metrics_NoSed[i,] <- ifelse(J1Data_NoSed[i,5]>0,1,0)
i=i+1
}
## Calculate Reliability
Shortage_Rel_NoSed <- data.frame(c(1:1080))
i=1
while (i<=1080) {
Shortage_Rel_NoSed[(i:(i+29)),] <- rep(round(sum((Shortage_Rel_Metrics_NoSed[(i:(i+29)),]/30)*100),1),30)
i=i+30
}
# 0 Percent Reservoir Volume
p <- plot_ly(
x = J1Data_NoSed$Demand,
y = J1Data_NoSed$Inflows,
z = Shortage_Rel_NoSed$c.1.1080., type = "contour",
#colors = c("red","orange","yellow","white"),
#contours = list(coloring = 'heatmap',colors = c("red","orange","yellow","white")),
autocontour = F,contours = list(start = 0,end = 15,size = 1 ) )%>%
layout(title = "Shortage Reliability Metric",
xaxis = list(title ="Demand"),
yaxis = list(title = "Inflows"))
p
#10 Percent Reservoir Volume Lost
p <- plot_ly(
x = J1Data_NoSed$Demand,
y = J1Data_NoSed$Inflows,
z = Shortage_Rel_NoSed$c.1.1080., type = "contour",
#colors = c("red","orange","yellow","white"),
#contours = list(coloring = 'heatmap',colors = c("red","orange","yellow","white")),
autocontour = F,contours = list(
start = 0,
end = 10250,
size = 250 ) )%>%
layout(title = "Shortage Reliability Metric",
xaxis = list(title ="Demand"),
yaxis = list(title = "Inflows"))
p
#30% Reservoir Volume Lost
p <- plot_ly(
x = J1Data_NoSed$Demand,
y = J1Data_NoSed$Inflows,
z = Shortage_Rel_NoSed$c.1.1080., type = "contour",
#colors = c("red","orange","yellow","white"),
#contours = list(coloring = 'heatmap',colors = c("red","orange","yellow","white")),
autocontour = F,contours = list(
start = 0,
end = 100,
size = 25 ) )%>%
layout(title = "Shortage Reliability Metric",
xaxis = list(title ="Demand"),
yaxis = list(title = "Inflows"))
p
library("dplyr", lib.loc="~/R/win-library/3.5")
#################### Reliability  Metric for Storage ########################
#  -- Metrics based on WBWCD - Drought Contigency Plan Drought Levels --  #
# See Table 3-2 : Hot/Dry Projected Drought for Drought Levels
# Moderate Total Basin Storage Drought Level 340K to 380K -- Yellow  ("Less than 380K")
# Severe Total Basin Storage Drought Level 280K to 340K -- Orange    ("Less than 340K")
# Extreme Total Basin Storage Drought Level less than 280K -- Red    ("Less than 280K")
ModerateLevel<- 380000
SevereLevel <- 340000
ExtremeLevel<-280000
Storage_Metrics <- data.frame(J1Data[,4])
Storage_Rel_Metrics_Moderate <- data.frame(J1Data[,4])
Storage_Rel_Metrics_Severe <- data.frame(J1Data[,4])
Storage_Rel_Metrics_Extreme <- data.frame(J1Data[,4])
#Moderate
i=1
while (i<=3240) {
Storage_Rel_Metrics_Moderate[i,] <- ifelse(J1Data[i,4]>ModerateLevel,1,0)
i=i+1
}
#Severe
i=1
while (i<=3240) {
Storage_Rel_Metrics_Severe[i,] <- ifelse(J1Data[i,4]>SevereLevel,1,0)
i=i+1
}
#Extreme
i=1
while (i<=3240) {
Storage_Rel_Metrics_Extreme[i,] <- ifelse(J1Data[i,4]>ExtremeLevel,1,0)
i=i+1
}
## Calculate Reliability
Stor_Rel_Moderate <- data.frame(J1Data[,4])
Stor_Rel_Severe <- data.frame(J1Data[,4])
Stor_Rel_Extreme <- data.frame(J1Data[,4])
i=1
while (i<=3240) {
Stor_Rel_Moderate[(i:(i+29)),] <- rep(round(sum((Storage_Rel_Metrics_Moderate[(i:(i+29)),]/30)*100),1),30)
i=i+30
}
i=1
while (i<=3240) {
Stor_Rel_Severe[(i:(i+29)),] <- rep(round(sum((Storage_Rel_Metrics_Severe[(i:(i+29)),]/30)*100),1),30)
i=i+30
}
i=1
while (i<=3240) {
Stor_Rel_Extreme[(i:(i+29)),] <- rep(round(sum((Storage_Rel_Metrics_Extreme[(i:(i+29)),]/30)*100),1),30)
i=i+30
}
# Moderate Demand Level
p <- plot_ly(
x = J1Data$Demand,
y = J1Data$Inflows,
z = Stor_Rel_Moderate$J1Data...4. , type = "contour")%>%
layout(title = "Moderate Storage Level by Color",
xaxis = list(title ="Demand"),
yaxis = list(title = "Inflows"))
p
#Severe Demand Level
p <- plot_ly(
x = J1Data$Demand,
y = J1Data$Inflows,
z = Stor_Rel_Severe$J1Data...4., type = "contour")%>%
layout(title = "Severe Storage by Level Color",
xaxis = list(title ="Demand"),
yaxis = list(title = "Inflows"))
p
#Extreme Demand Level
p <- plot_ly(
x = J1Data$Demand,
y = J1Data$Inflows,
z = Stor_Rel_Extreme$J1Data...4., type = "contour")%>%
layout(title = "Extreme Storage by Color",
xaxis = list(title ="Demand"),
yaxis = list(title = "Inflows"))
p
## Calculate Reliability
Stor_Rel_Moderate <- data.frame(c(1:1080))
Stor_Rel_Severe <- data.frame(c(1:1080))
Stor_Rel_Extreme <- data.frame(c(1:1080))
i=1
while (i<=3240) {
Stor_Rel_Moderate[(i:(i+29)),] <- rep(round(sum((Storage_Rel_Metrics_Moderate[(i:(i+29)),]/30)*100),1),30)
i=i+30
}
i=1
while (i<=3240) {
Stor_Rel_Severe[(i:(i+29)),] <- rep(round(sum((Storage_Rel_Metrics_Severe[(i:(i+29)),]/30)*100),1),30)
i=i+30
}
i=1
while (i<=3240) {
Stor_Rel_Extreme[(i:(i+29)),] <- rep(round(sum((Storage_Rel_Metrics_Extreme[(i:(i+29)),]/30)*100),1),30)
i=i+30
}
# Moderate Demand Level
p <- plot_ly(
x = J1Data_NoSed$Demand,
y = J1Data_NoSed$Inflows,
z = Stor_Rel_Moderate$c.1.1080., type = "contour")%>%
layout(title = "Moderate Storage Level by Color",
xaxis = list(title ="Demand"),
yaxis = list(title = "Inflows"))
p
#Severe Demand Level
p <- plot_ly(
x = J1Data_NoSed$Demand,
y = J1Data_NoSed$Inflows,
z = Stor_Rel_Severe$c.1.1080., type = "contour")%>%
layout(title = "Severe Storage by Level Color",
xaxis = list(title ="Demand"),
yaxis = list(title = "Inflows"))
p
#Extreme Demand Level
p <- plot_ly(
x = J1Data_NoSed$Demand,
y = J1Data_NoSed$Inflows,
z = Stor_Rel_Extreme$c.1.1080., type = "contour")%>%
layout(title = "Extreme Storage by Color",
xaxis = list(title ="Demand"),
yaxis = list(title = "Inflows"))
p
Storage_Metrics <- data.frame(c(1:1080))
Storage_Rel_Metrics_Moderate <- data.frame(c(1:1080))
Storage_Rel_Metrics_Severe <- data.frame(c(1:1080))
Storage_Rel_Metrics_Extreme <- data.frame(c(1:1080))
