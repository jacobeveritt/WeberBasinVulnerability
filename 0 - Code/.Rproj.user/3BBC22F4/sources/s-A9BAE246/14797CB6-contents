# *------------------------------------------------------------------
# | PROGRAM NAME: Output Data Compilation
# | FILE NAME: Output Data Compilation_J1_Metrics
# | DATE: 01/05/20
# | CREATED BY:  Jacob Everitt
# *----------------------------------------------------------------
# | PURPOSE:  Compile Data into 1 data.frame and analyze
# |
# |
# *------------------------------------------------------------------
# | STEPS:
# |  0:
# |  1:
# |  2:
# |  3:
# |  4:
# |  5:
# |  6:
# |  7:
# |  8:
# |  9:
# |  10:
# |
# |*------------------------------------------------------------------.
# | DATA USED:  Inputs and Outputs
# |   1 - RiverWare Inputs:
# |     A. - Demand
# |     B. - Inflow
# |     C. - Sedimentation
# | 

# |   2 - RiverWare Outputs
# |     A. - Storage
# |     B. - Shortage
# |
# |*------------------------------------------------------------------
# | CONTENTS: Compilation of data 
# |
# | 0 - Create a Trace notation that matches the output from RiverSmart
# |    a. First Trace is Demand
# |    b. 2nd Trace Notation is Inflow
# |    c. Last Trace Notation is Sedimentation
# | 1 - Create individual dataframes for each Input
# |    A. Demand  -- Tot_Demand
# |    B. Inflow  -- Tot_Inflow
# |    C. Sedimentation  -- Tot_Sed
# |
# | 2 - Create individual dataframes for each output
# |    A. Storage -- Tot_Stor
# |    B. Shortage -- Tot_Short
# |    C. 
# *-----------------------------------------------------------------
# | UPDATES:
# |
# |
# *------------------------------------------------------------------

### Clear any existing data or functions.
rm(list=ls())
library("dplyr", lib.loc="~/R/win-library/3.5")

#Record the current directory (0 - Code) for later recall
startWD <- getwd()

###Total Storage Compilation#--------------------------------------------------------------------------------#

#Store the current code directory so we can later return to it (0 - Code)
#fCodeDir <- getwd()
### Load the package or install if not present
if (!require("RColorBrewer")) {
  install.packages("RColorBrewer")
  library(RColorBrewer)
}
library(readr)
#install.packages("reshape")
library(reshape) #For Melt
library(lubridate) #For month
library(plotly) # For Plots
library(data.table)
library(dplyr)

####-----------------------------Trace Notation--------------------------------------------------
# Build names of folders output by RiverSmart
TraceNumber <- 6
TraceNumber1 <-6
TraceNumber2 <-3
Tot_TraceNum <- TraceNumber*TraceNumber1*TraceNumber2

Trace_Notation <-c(1:Tot_TraceNum)
i=1
for(TTTNum in 1:TraceNumber){
  for(TTNum in 1:TraceNumber1){
    for(TNum in 1:TraceNumber2){
      TraceDirectory <- paste0(",Trace",TNum)
      TraceNum1<- paste0(",Trace",TTNum)
      TraceDirectory <- paste0(TraceNum1,TraceDirectory)
      TraceNum2 <- paste0("Trace",TTTNum)
      TraceDirectory <- paste0(TraceNum2,TraceDirectory)

      Trace_Notation[i] <-  TraceDirectory
      i=i+1
    }
  }
}

Trace_Notation_AllData<- rep(Trace_Notation,30)

#View(Trace_Notation_AllData)

##################################  - 1 - Input data ########################################################

                    ######## - A -   Compiling Annual Demands  ########
#setwd("C:/Users/Jacob/Desktop/WeberBasinVulnerability-DER-Edits/WeberBasinVulnerability-DER-Edits/1 - Scenario Processing/Annual Service Area Demand Scenarios/Output")
setwd("../1 - Scenario Processing/Annual Service Area Demand Scenarios/Output")

Tot_Annual_Demand <- read.csv("SumMIandAG.csv")

Tot_Demand <- data.frame(c(1:108))

i=1
j=1
while (i<=6) {
Tot_Demand[j:(j+17),] <- rep(Tot_Annual_Demand[i,2],(18))  
    i=i+1
    j=j+18
}

#View(Tot_Demand)
colnames(Tot_Demand) <- "Tot Demand"
rownames(Tot_Demand) <- Trace_Notation

Tot_Demand <- data.frame(Tot_Demand)

Tot_Demand_AllData<-rep(Tot_Demand$Tot.Demand,30)
Tot_Demand_AllData<-data.frame(Tot_Demand_AllData)
colnames(Tot_Demand_AllData)<-"Demand"
#View(Tot_Demand)              


######## - B -  Monthly Inflows to June1 Data  ########
#Move into the local input directory
setwd(startWD)
setwd("../2 - RiverWare Modeling/Scenario")
# Switch into local directory
#setwd("~/GitHub/WeberBasinVulnerability/WeberBasinVulnerability/2 - RiverWare Modeling/Scenario")

#Input Monthly data from RiverSmart Analysis
Tot_Mnthly_Inflow <-read.csv("Trace1,Trace1,Trace1/Total Inflows.csv")

i=1
for(TTTNum in 1:TraceNumber){
  for(TTNum in 1:TraceNumber1){
    for(TNum in 1:TraceNumber2){
      TraceDirectory <- paste0(",Trace",TNum)
      TraceDirectory <-paste0 (TraceDirectory,"/Total Inflows.csv")
      TraceNum1<- paste0(",Trace",TTNum)
      TraceDirectory <- paste0(TraceNum1,TraceDirectory)
      TraceNum2 <- paste0("Trace",TTTNum)
      TraceDirectory <- paste0(TraceNum2,TraceDirectory)
      
      Location <- TraceDirectory
      Temp_Storage <- read.csv(Location)
      Tot_Mnthly_Inflow[,i] <- Temp_Storage[,5]
      
      colnames(Tot_Mnthly_Inflow)[i] <-  TraceDirectory
      i=i+1
    }
  }
}

Tot_Mnthly_Inflow <- data.frame(Tot_Mnthly_Inflow)
#View(Tot_Mnthly_Inflow)

#add Date column
  #Date <- seq.Date(as.Date("0000/11/30"),by ="month",length=359)

  Months <- rep(c(1:12),31)
  Months<- Months[(11:369)]
  Tot_Mnthly_Inflow$Months <- Months

#Create Years
Years <- c(0:372)
i=1
j=1
while (j<=31) {
  Years[(i:(i+11))] <- rep((j-1),12)
  i=i+12
  j=j+1
}
Years<- Years[(11:369)]


#Add months and Years column
 #Tot_Mnthly_Inflow$Months <-Months
Tot_Mnthly_Inflow$Years <- Years

#Add a Water year - The water year is designated by the calendar year in which it ends, so the 2010 water year (USGS) started on October 1, 2009 and ended on September 30, 2010
Tot_Mnthly_Inflow$WaterYear <- ifelse(Tot_Mnthly_Inflow$Months>= 10,Tot_Mnthly_Inflow$Years + 1, Tot_Mnthly_Inflow$Years)


# From Monthly Streamflows to  Annual Streamflows

Annual_Inflows <-Tot_Mnthly_Inflow %>% 
  group_by(WaterYear) %>% 
  summarise_all(funs(sum))

#Sort data into Yearly Rows and Stack into one column
 #Transpose Data
  Annual_Inflows_Transposed <- t(Annual_Inflows)
  Annual_Inflows_Transposed <- data.frame(Annual_Inflows_Transposed)
#Stack Columns
  Tot_Annual_Inflow <- stack(Annual_Inflows_Transposed[2:109,1:30])
  
  ###Select June 1st values ###
  #J1Tot_Inflow<- filter(Tot_Mnthly_Inflow,Months==6)
#Transpose Data
  #J1Tot_Inflow <- t(J1Tot_Inflow)
  #J1Tot_Inflow<-data.frame(J1Tot_Inflow)
#Stack columns
  #Tot_Inflow_AllData <-stack(J1Tot_Inflow[1:108,1:30])

colnames(Tot_Annual_Inflow)[1] <- "Inflow"
colnames(Tot_Annual_Inflow)[2] <- "Year"

#rownames(J1Tot_Inflow) <- Trace_Notation

                          ######## - C -   Compiling Total Sedimentation  ########

##Total Sedimentation Changes on Reservoir
#setwd("~/GitHub/WeberBasinVulnerability/WeberBasinVulnerability/3 - Post Processing")
#Move back to code directory
setwd(startWD)
#Move into the local input directory
setwd("../3 - Post Processing")

Tot_Sed <- read.csv("Sedimentation.csv")


            #________Delete this portion later______
                  Tot_Sed <- Tot_Sed[,2]


Tot_Sed <-data.frame(Tot_Sed)


colnames(Tot_Sed) <- "Tot Sed"
rownames(Tot_Sed) <- Trace_Notation

Tot_Sediment_AllData<- rep(Tot_Sed$`Tot Sed`,30)
Tot_Sediment_AllData<- data.frame(Tot_Sediment_AllData)
colnames(Tot_Sediment_AllData) <- "Sedimentation"

#View(Tot_Sed)

##################   Compile input data    ##################################
#Create Data frame
Inputs<- data.frame(Tot_Demand_AllData)
Inputs$Inflow <- Tot_Annual_Inflow
Inputs$Sedimentation <- Tot_Sediment_AllData

Inputs$Trace_Notation <- Trace_Notation
#Number
Inputs$Number<-c(1:3240)
Inputs <- data.frame(Inputs)

#Add Inflow Trace Characteristics Column

#Add Demand Trace Characteristics Column

#Sedimentation Trace Characteristics

#Fix Column Names
<<<<<<< HEAD
#names(Inputs)<- c("Demand","Inflow","Year","Sedimentation","Traces","Number")
=======
>>>>>>> b88c8279126995f8dad5fac954013a887050179a
names(Inputs)<- c("Demand","Inflow","Sedimentation","Traces","Number")


##################################  - 2 - Output data ########################################################
#setwd("~/GitHub/WeberBasinVulnerability/WeberBasinVulnerability/2 - RiverWare Modeling/Scenario")
setwd(startWD)
setwd("../2 - RiverWare Modeling/Scenario")

Tot_Mnthly_Stor <- read.csv("Trace1,Trace1,Trace1/Total Storage_NO EVAP.csv")
Tot_Mnthly_Short <-read.csv("Trace1,Trace1,Trace1/Total Shortages.csv")

#Create TraceFolder Naming lookup for Values with No Evap.
#Move into the local input directory
#setwd("../2 - RiverWare Modeling/Scenario")
# Switch into local directory
#setwd("~/GitHub/WeberBasinVulnerability/WeberBasinVulnerability/2 - RiverWare Modeling/Scenario")

                         ##### Total Storage #####
i=1
 for(TTTNum in 1:TraceNumber){
   for(TTNum in 1:TraceNumber1){
     for(TNum in 1:TraceNumber2){
       TraceDirectory <- paste0(",Trace",TNum)
       TraceDirectory <-paste0 (TraceDirectory,"/Total Storage_NO EVAP.csv")
       TraceNum1<- paste0(",Trace",TTNum)
       TraceDirectory <- paste0(TraceNum1,TraceDirectory)
       TraceNum2 <- paste0("Trace",TTTNum)
       TraceDirectory <- paste0(TraceNum2,TraceDirectory)

       Location <- TraceDirectory
       Temp_Storage <- read.csv(Location)
       Tot_Mnthly_Stor[,i] <- Temp_Storage[,5]

       colnames(Tot_Mnthly_Stor)[i] <-  TraceDirectory
 i=i+1
     }
   }
 }
Tot_Mnthly_Stor <- data.frame(Tot_Mnthly_Stor)


#### Storage ####
#Add months and Years column to Mthly Storage 
Tot_Mnthly_Stor$Months <-Months
Tot_Mnthly_Stor$Years  <-Years

#select June 1st values
J1Tot_Stor<- filter(Tot_Mnthly_Stor,Months==6)
#Transpose Data
J1Tot_Stor <- t(J1Tot_Stor)
J1Tot_Stor <- data.frame(J1Tot_Stor)
#Stack columns
Tot_Stor_AllData <-stack(J1Tot_Stor[1:108,1:30])

#Remove Year Column
Tot_Stor_AllData<-data.frame(Tot_Stor_AllData$values)

#Create Column names
colnames(Tot_Stor_AllData) <- "Storage"
#rownames(Tot_Stor_AllData) <- Trace_Notation
 #View(Tot_Stor_AllData)

                                    ##### Total Shortages #####
   i=1
   for(TTTNum in 1:TraceNumber){
     for(TTNum in 1:TraceNumber1){
       for(TNum in 1:TraceNumber2){
         TraceDirectory <- paste0(",Trace",TNum)
         TraceDirectory <-paste0 (TraceDirectory,"/Total Shortages.csv")
         TraceNum1<- paste0(",Trace",TTNum)
         TraceDirectory <- paste0(TraceNum1,TraceDirectory)
         TraceNum2 <- paste0("Trace",TTTNum)
         TraceDirectory <- paste0(TraceNum2,TraceDirectory)
      Location <- TraceDirectory
      Temp_Storage <- read.csv(Location)
      Tot_Mnthly_Short[,i] <- Temp_Storage[,5]
      colnames(Tot_Mnthly_Short)[i] <-  TraceDirectory
      i=i+1
    }
     }
       }
  Tot_Mnthly_Short <- data.frame(Tot_Mnthly_Short)
  
  #### Shortage ####
  #Add months and Years column to Mthly Storage 
  Tot_Mnthly_Short$Months <-Months
  Tot_Mnthly_Short$Years  <-Years
  
  #select June 1st values
  J1Tot_Short<- filter(Tot_Mnthly_Short,Months==6)
  #Transpose Data
  J1Tot_Short <- t(J1Tot_Short)
  J1Tot_Short <- data.frame(J1Tot_Short)
  #Stack columns
  Tot_Short_AllData <-stack(J1Tot_Short[1:108,1:30])
  
  Tot_Short_AllData <- data.frame(Tot_Short_AllData[1])
  
  #Create Column names
  colnames(Tot_Short_AllData) <- "Shortage"
  #rownames(Tot_Stor_AllData) <- Trace_Notation

  
########################   Compile Output data   ###############################
  
  Outputs <- Tot_Stor_AllData
  Outputs$Shortage <- Tot_Short_AllData$Shortage

  # Add Trace Notation
  Outputs$Trace_Notation <-Trace_Notation
  #Number
  Outputs$Number<-c(1:3240)

  Outputs<-data.frame(Outputs)
    
#########################  Merge  ##### AllData Dataframe########################

AllDataDF <- merge(Inputs,Outputs,by="Number")  

################# Select Data -- By Sedimentation Level########################
Data_NoSed <- filter(AllDataDF,Sedimentation==0)
Data_10Perc <- filter(AllDataDF,Sedimentation==10)
Data_30Perc <- filter(AllDataDF,Sedimentation==30)

#Year
yrs<-data.frame(rep(1,36))
i=2
while (i<=30) {
  yrs[,i]<-data.frame(rep(i,36))
  i=i+1
}
yrs<-stack(yrs)
#View(yrs)

Data_NoSed$Year<-yrs$values

#Select Data frame to do Calculation on. 

Data<- Data_NoSed
#Data <- Data_10Perc
#Data <- Data_30Perc


###########################################################################################################
  
  #################### Reliability  Metric for Storage ########################
 
###########################################################################################################
 #  -- Metrics based on WBWCD - Drought Contigency Plan Drought Levels --  #
  # See Table 3-2 : Hot/Dry Projected Drought for Drought Levels
  # Moderate Total Basin Storage Drought Level 340K to 380K -- Yellow  ("Less than 380K")
  # Severe Total Basin Storage Drought Level 280K to 340K -- Orange    ("Less than 340K")
  # Extreme Total Basin Storage Drought Level less than 280K -- Red    ("Less than 280K")
  ModerateLevel<- 380000
  SevereLevel <- 340000
  ExtremeLevel<-280000
  
  Storage_Metrics <- data.frame(Data$Storage)
  Storage_Rel_Metrics_Moderate <- data.frame(Data$Storage)
  Storage_Rel_Metrics_Severe <- data.frame(Data$Storage)
  Storage_Rel_Metrics_Extreme <- data.frame(Data$Storage)
  #View(Stor_Metrics)
  
  #Moderate
  i=1
  while (i<=1080) {
    Storage_Rel_Metrics_Moderate[i,] <- ifelse(Data[i,6]>ModerateLevel,1,0)
    i=i+1
  }
  
  #Severe
  i=1
  while (i<=1080) {
    Storage_Rel_Metrics_Severe[i,] <- ifelse(Data[i,6]>SevereLevel,1,0)
    i=i+1
  }
  
  #Extreme
  i=1
  while (i<=1080) {
    Storage_Rel_Metrics_Extreme[i,] <- ifelse(Data[i,6]>ExtremeLevel,1,0)
    i=i+1
  }

  #input Metrics into Data Dataframe
  
  Data$ModerateStorageR <-Storage_Rel_Metrics_Moderate$Data.Storage
  Data$SevereStorageR <- Storage_Rel_Metrics_Severe$Data.Storage
  Data$ExtremeStorageR<- Storage_Rel_Metrics_Extreme$Data.Storage
  
    
  ## Calculate Reliability #####  ##Errors in code ###
  Stor_Rel_Moderate <- data.frame(1:36)
  Stor_Rel_Severe <- data.frame(c(1:36))
  Stor_Rel_Extreme <- data.frame(1:36)
  
  
  
  Data2<-Data
  
  
  Data2 <-Data %>% 
    group_by(Data$Trace_Notation) %>%                             ############## Has issues ########
    summarise(ModSum = sum(Data$ModerateStorageR))
  
  View(Data2)
  
  
  #filter(Data,Trace_Notation==TraceDirectory[i])
  
  #i=1
  #while (i<=36) {
   # Trace_Notation[i]
    # tempfileA<- filter(Data,Trace_Notation.x == (Trace_Notation[i]))
  
  #Stor_Rel_Moderate[i]<-sum(tempfileA$ModerateStorageR)  
  #Stor_Rel_Severe[i]<-sum(tempfileA$SevereStorageR)
  #Stor_Rel_Extreme[i]<-sum(tempfileA$ExtremStorageR)
  #i=i+1
  #}
  

    i=1
  while (i<=3240) {
    Stor_Rel_Moderate[(i:(i+29)),] <- rep(round(sum((Storage_Rel_Metrics_Moderate[(i:(i+29)),]/30)*100),1),30)
    i=i+30
  }
  
  i=1
  while (i<=3240) {
    Stor_Rel_Severe[(i:(i+29)),] <- rep(round(sum((Storage_Rel_Metrics_Severe[(i:(i+29)),]/30)*100),1),30)
    i=i+30
  }
  
  i=1
  while (i<=3240) {
    Stor_Rel_Extreme[(i:(i+29)),] <- rep(round(sum((Storage_Rel_Metrics_Extreme[(i:(i+29)),]/30)*100),1),30)
    i=i+30
  }
  
  
  ##################################################################################################
  ###PLOTS###
  ##################################################################################################
  library(plotly)
  
  #Axis assignment
  x=Data$Demand
  y=Data$Inflow
  
  #setwd("~/GitHub/WeberBasinVulnerability/WeberBasinVulnerability/3 - Post Processing/Output")
  setwd(startWD)
  setwd("../3 - Post Processing/Output")
  
  # Moderate Demand Level
  z=Data$ModerateStorageR
  
    p <- plot_ly(
    x = x,
    y = y$Inflow,
    z = z$Data.Storage , type = "contour",colors = c("yellow","white","snow"),autocontour = F,contours = list(
    start = 0,end = 1 , size =1))%>%
      colorbar(title = "Fraction of\n Simulated Years")%>%
    layout(title = "June 1st Storage Levels that Exceed Moderate Storage Level (380,000 Acre-Feet)",
           xaxis = list(title ="Demand (Acre-Feet)"),
           yaxis = list(title = "Inflows (Acre-Feet)"))
  p
  
    plotly_IMAGE(p, format = "png", out_file = "Moderate Storage Reliability Plot.png")
  
  #Severe Demand Level
  z=Data$SevereStorageR
  
    p <- plot_ly(
    x = x,
    y = y$Inflow,
    z = z$Data.Storage, type = "contour",colors = c("orange","white","snow"),autocontour = F,contours = list(
      start = 0,end = 1 , size =1))%>%
      colorbar(title = "Fraction of\n Simulated Years")%>%
    layout(title = "June 1st Storage Levels that Exceed Severe Storage Level (340,000 Acre-Feet)",
           xaxis = list(title ="Demand (Acre-Feet)"),
           yaxis = list(title = "Inflows (Acre-Feet)"))
  p
  plotly_IMAGE(p, format = "png", out_file = "Severe Storage Reliability Plot.png")
  
  #Extreme Demand Level
  z=Data$ExtremeStorageR

  p <- plot_ly(
    x = x,
    y = y$Inflow,
    z = z$Data.Storage , type = "contour",colors = c("red","white","snow"),autocontour = F,contours = list(
      start = 0,end = 1 , size =1))%>%
    colorbar(title = "Fraction of\n Simulated Years")%>%
    layout(title = "June 1st Storage Levels that Exceed Extreme Storage Level (280,000 Acre-Feet)",
           xaxis = list(title ="Demand (Acre-Feet)"),
           yaxis = list(title = "Inflows (Acre-Feet)"))
  p
  plotly_IMAGE(p, format = "png", out_file = "Extreme Storage Reliability Plot.png")

############ Storage Contours based on Moderate, Severe and Extreme Storage Drought Levels  #############################
   #Storage
  #z=Data$Storage
  
  #p <- plot_ly(
   # x = x$Data.Demand,
  #  y = y$Data.Inflow,
  #  z =z , type = "contour",
  #  colors = c("red","orange","yellow","white"),
  #  #contours = list(coloring = 'heatmap'),
  #  autocontour = F,contours = list(
  #    start = 280000,
  #    end = 380000,
  #    size = 50000
  #  ))%>%
  #  layout(title = "Storage by Color",
  #         xaxis = list(title ="Demand"),
  #         yaxis = list(title = "Inflows"))
  #p
                                                  ############ End of June 1 code##########
setwd(startWD)
