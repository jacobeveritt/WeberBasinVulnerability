# *------------------------------------------------------------------
# | PROGRAM NAME: Data Compilation
# | FILE NAME: RiverWare Results Monthly Data Compilation
# | DATE: 01/25/20
# | CREATED BY:  Jacob Everitt
# *----------------------------------------------------------------
# | PURPOSE:  Compile Data into 1 data.frame and analyze
# |
# |
# |*------------------------------------------------------------------.
# | DATA USED:  Inputs and Outputs
# |   1 - RiverWare Inputs:
# |     A. - Demand
# |     B. - Inflow
# |     C. - Sedimentation
# | 
# |   2 - RiverWare Outputs
# |     A. - Storage
# |     B. - Shortage
# |
# |*------------------------------------------------------------------
# | CONTENTS: Compilation of data 
# |
# | 0 - Create a Trace notation that matches the output from RiverSmart
# |    a. First Trace is Demand
# |    b. 2nd Trace Notation is Inflow
# |    c. Last Trace Notation is Sedimentation
# | 1 - Create individual dataframes for each Input
# |    A. Demand  -- Tot_Demand
# |    B. Inflow  -- Tot_Inflow
# |    C. Sedimentation  -- Tot_Sed
# |
# | 2 - Create individual dataframes for each output
# |    A. Storage -- Tot_Stor
# |    B. Shortage -- Tot_Short
# |    C. 
# *-----------------------------------------------------------------
# | LIST UPDATES FROM ORIGINAL:
# |
# |
# *------------------------------------------------------------------

### Clear any existing data or functions.
rm(list=ls())
library("dplyr", lib.loc="~/R/win-library/3.5")

#Record the current directory (0 - Code) for later recall
startWD <- getwd()

###Total Storage Compilation#--------------------------------------------------------------------------------#

#Store the current code directory so we can later return to it (0 - Code)
#fCodeDir <- getwd()
### Load the package or install if not present
if (!require("RColorBrewer")) {
  install.packages("RColorBrewer")
  library(RColorBrewer)
}
library(readr)
#install.packages("reshape")
library(reshape) #For Melt
library(lubridate) #For month
library(plotly) # For Plots
library(data.table)
library(dplyr)

####-----------------------------Trace Notation--------------------------------------------------
# Build names of folders output by RiverSmart
TraceNumber <- 6
TraceNumber1 <-6
TraceNumber2 <-3
Tot_TraceNum <- TraceNumber*TraceNumber1*TraceNumber2

Trace_Notation <-c(1:Tot_TraceNum)
i=1
for(TTTNum in 1:TraceNumber){
  for(TTNum in 1:TraceNumber1){
    for(TNum in 1:TraceNumber2){
      TraceDirectory <- paste0(",Trace",TNum)
      TraceNum1<- paste0(",Trace",TTNum)
      TraceDirectory <- paste0(TraceNum1,TraceDirectory)
      TraceNum2 <- paste0("Trace",TTTNum)
      TraceDirectory <- paste0(TraceNum2,TraceDirectory)
      
      Trace_Notation[i] <-  TraceDirectory
      i=i+1
    }
  }
}

Trace_Notation_AllData<- rep(Trace_Notation,359)

#View(Trace_Notation_AllData)

##################################  - 1 - Input data ########################################################

  ######## - A -   Compiling Annual Demands  ########

setwd("C:/Users/Jacob/Desktop/WeberBasinVulnerability-DER-Edits/WeberBasinVulnerability-DER-Edits/1 - Scenario Processing/Annual Service Area Demand Scenarios/Output")
#setwd("../1 - Scenario Processing/Annual Service Area Demand Scenarios/Output")

Tot_Annual_Demand <- read.csv("SumMIandAG.csv")
Tot_Demand <- data.frame(c(1:108))

i=1
j=1
while (i<=6) {
  Tot_Demand[j:(j+17),] <- rep(Tot_Annual_Demand[i,2],(18))  
  i=i+1
  j=j+18
}

#View(Tot_Demand)
colnames(Tot_Demand) <- "Demand"
rownames(Tot_Demand) <- Trace_Notation

#Tot_Demand <- data.frame(Tot_Demand)

Tot_Mnthly_Demand<-data.frame(rep(Tot_Demand$Demand,359))
colnames(Tot_Mnthly_Demand) <- "Demand"
#View(Tot_Monthly_Inflow)              

  ######### - B -  Monthly Inflows Data  ##########

#Move into the local input directory
setwd(startWD)
#setwd("../2 - RiverWare Modeling/Scenario")
# Switch into local directory
setwd("~/GitHub/WeberBasinVulnerability/WeberBasinVulnerability/2 - RiverWare Modeling/Scenario")

#Input Monthly data from RiverSmart Analysis
Tot_Mnthly_Inflow <-read.csv("Trace1,Trace1,Trace1/Total Inflows.csv")

i=1
for(TTTNum in 1:TraceNumber){
  for(TTNum in 1:TraceNumber1){
    for(TNum in 1:TraceNumber2){
      TraceDirectory <- paste0(",Trace",TNum)
      TraceDirectory <-paste0 (TraceDirectory,"/Total Inflows.csv")
      TraceNum1<- paste0(",Trace",TTNum)
      TraceDirectory <- paste0(TraceNum1,TraceDirectory)
      TraceNum2 <- paste0("Trace",TTTNum)
      TraceDirectory <- paste0(TraceNum2,TraceDirectory)
      
      Location <- TraceDirectory
      Temp_Storage <- read.csv(Location)
      Tot_Mnthly_Inflow[,i] <- Temp_Storage[,5]
      
      colnames(Tot_Mnthly_Inflow)[i] <-  TraceDirectory
      i=i+1
    }
  }
}

Tot_Mnthly_Inflow <- data.frame(Tot_Mnthly_Inflow)
#View(Tot_Mnthly_Inflow)

Months <- rep(c(1:12),31)
Months<- Months[(11:369)]
Tot_Mnthly_Inflow$Months <- Months

#Create Years
Years <- c(0:372)
i=1
j=1
while (j<=31) {
  Years[(i:(i+11))] <- rep((j-1),12)
  i=i+12
  j=j+1
}
Years<- Years[(11:369)]

#Add months and Years column
#Tot_Mnthly_Inflow$Months <-Months
Tot_Mnthly_Inflow$Years <- Years

#Add a Water year - The water year is designated by the calendar year in which it ends, so the 2010 water year (USGS) started on October 1, 2009 and ended on September 30, 2010
Tot_Mnthly_Inflow$WaterYear <- ifelse(Tot_Mnthly_Inflow$Months>= 10,Tot_Mnthly_Inflow$Years + 1, Tot_Mnthly_Inflow$Years)
WaterYear<-ifelse(Tot_Mnthly_Inflow$Months>= 10,Tot_Mnthly_Inflow$Years + 1, Tot_Mnthly_Inflow$Years)

#Transpose Data
Tot_Mnthly_Inflow_Transposed <- t(Tot_Mnthly_Inflow)
Tot_Mnthly_Inflow_Transposed <- data.frame(Tot_Mnthly_Inflow_Transposed)
    #View(Tot_Mnthly_Inflow_Transposed)
#Stack Columns
Tot_Mnthly_Inflow_Stacked <- stack(Tot_Mnthly_Inflow_Transposed[1:108,1:359])
Tot_Mnthly_Inflow <- Tot_Mnthly_Inflow_Stacked$values


######## - C -   Compiling Total Sedimentation  ########

##Total Sedimentation Changes on Reservoir
setwd("~/GitHub/WeberBasinVulnerability/WeberBasinVulnerability/3 - Post Processing")
#Move back to code directory
#setwd(startWD)
#Move into the local input directory
#setwd("../3 - Post Processing")

Tot_Sed <- read.csv("Sedimentation.csv")
Tot_Sed <- Tot_Sed[,2]
Tot_Mnthly_Sed <- rep(Tot_Sed,359)


#### Time Columns: Mnths, Years and Water Years #####
Mnths<-c(1:38772)
i=1
j=1
while (i<=359) {
  Mnths[j:(i*108)]<-Months[i]    
i=i+1
j=j+108
  }
#View(Mnths)

Yrs<-c(1:38772)
i=1
j=1
while (i<=359) {
  Yrs[j:(i*108)]<-Years[i]    
  i=i+1
  j=j+108
}
#View(Yrs)

Wtr_Yrs<-c(1:38772)
i=1
j=1
while (i<=359) {
  Wtr_Yrs[j:(i*108)]<-WaterYear[i]    
  i=i+1
  j=j+108
}

##################   Compile Mnthly Input data    ##################################
#Create Data Frame
  Inputs<- data.frame(Tot_Mnthly_Demand)
  Inputs$Inflow <- Tot_Mnthly_Inflow
  Inputs$Sedimentation <- Tot_Mnthly_Sed
  Inputs$Trace_Notation <- Trace_Notation
  Inputs$Month<-Mnths
  Inputs$Years<-Yrs
  Inputs$WaterYear<-Wtr_Yrs
#Number
  Inputs$Number<-c(1:38772)
  Inputs <- data.frame(Inputs)

##################################  - 2 - Output data ########################################################
setwd("~/GitHub/WeberBasinVulnerability/WeberBasinVulnerability/2 - RiverWare Modeling/Scenario")
#setwd(startWD)
#setwd("../2 - RiverWare Modeling/Scenario")

Tot_Mnthly_Stor <- read.csv("Trace1,Trace1,Trace1/Total Storage_NO EVAP.csv")
Tot_Mnthly_Short <-read.csv("Trace1,Trace1,Trace1/Total Shortages.csv")

#Create TraceFolder Naming lookup for Values with No Evap.
#Move into the local input directory
#setwd("../2 - RiverWare Modeling/Scenario")
# Switch into local directory
#setwd("~/GitHub/WeberBasinVulnerability/WeberBasinVulnerability/2 - RiverWare Modeling/Scenario")

##### Total Storage #####
i=1
for(TTTNum in 1:TraceNumber){
  for(TTNum in 1:TraceNumber1){
    for(TNum in 1:TraceNumber2){
      TraceDirectory <- paste0(",Trace",TNum)
      TraceDirectory <-paste0 (TraceDirectory,"/Total Storage_NO EVAP.csv")
      TraceNum1<- paste0(",Trace",TTNum)
      TraceDirectory <- paste0(TraceNum1,TraceDirectory)
      TraceNum2 <- paste0("Trace",TTTNum)
      TraceDirectory <- paste0(TraceNum2,TraceDirectory)
      
      Location <- TraceDirectory
      Temp_Storage <- read.csv(Location)
      Tot_Mnthly_Stor[,i] <- Temp_Storage[,5]
      
      colnames(Tot_Mnthly_Stor)[i] <-  TraceDirectory
      i=i+1
    }
  }
}
Tot_Mnthly_Stor <- data.frame(Tot_Mnthly_Stor)

#Transpose Data
Tot_Mnthly_Stor_Transposed <- t(Tot_Mnthly_Stor)
Tot_Mnthly_Stor_Transposed <- data.frame(Tot_Mnthly_Stor_Transposed)
#View(Tot_Mnthly_Inflow_Transposed)
#Stack Columns
Tot_Mnthly_Stor_Stacked <- stack(Tot_Mnthly_Stor_Transposed[1:108,1:359])
Tot_Mnthly_Stor <- Tot_Mnthly_Stor_Stacked$values
Tot_Mnthly_Stor <- data.frame(Tot_Mnthly_Stor)

##### Total Shortages #####
i=1
for(TTTNum in 1:TraceNumber){
  for(TTNum in 1:TraceNumber1){
    for(TNum in 1:TraceNumber2){
      TraceDirectory <- paste0(",Trace",TNum)
      TraceDirectory <-paste0 (TraceDirectory,"/Total Shortages.csv")
      TraceNum1<- paste0(",Trace",TTNum)
      TraceDirectory <- paste0(TraceNum1,TraceDirectory)
      TraceNum2 <- paste0("Trace",TTTNum)
      TraceDirectory <- paste0(TraceNum2,TraceDirectory)
      Location <- TraceDirectory
      Temp_Storage <- read.csv(Location)
      Tot_Mnthly_Short[,i] <- Temp_Storage[,5]
      colnames(Tot_Mnthly_Short)[i] <-  TraceDirectory
      i=i+1
    }
  }
}
Tot_Mnthly_Short <- data.frame(Tot_Mnthly_Short)

#Transpose Data
Tot_Mnthly_Short_Transposed <- t(Tot_Mnthly_Short)
Tot_Mnthly_Short_Transposed <- data.frame(Tot_Mnthly_Short_Transposed)
#View(Tot_Mnthly_Inflow_Transposed)
#Stack Columns
Tot_Mnthly_Short_Stacked <- stack(Tot_Mnthly_Short_Transposed[1:108,1:359])
Tot_Mnthly_Short <- Tot_Mnthly_Short_Stacked$values
#Tot_Mnthly_Short <- data.frame(Tot_Mnthly_Short)


########################   Compile Output data   ###############################
Outputs <- Tot_Mnthly_Stor
Outputs$Shortage <- Tot_Mnthly_Short

# Add Trace Notation
#Outputs$Trace_Notation <-Trace_Notation
#Number
Outputs$Number<-c(1:38772)

Outputs<-data.frame(Outputs)

#########################  Merge  ---- AllData Dataframe########################
AllDataDF <- merge(Inputs,Outputs,by="Number")  
AllData_MonthlyDF <- AllDataDF

#########################################################################################################
                      ####### Calculate Annual Inflows -- Calculate Average by Trace#######
#########################################################################################################

#From Monthly Streamflows to Annual Streamflows
Annual_Inflows <-AllDataDF %>% 
group_by(WaterYear,Trace_Notation) %>% 
summarise_all(funs(sum(Inflow)))

Avg_Annual_Inflows <- Annual_Inflows %>%
group_by(Trace_Notation) %>%
summarise_all(funs(mean(Inflow)))

Avg_Annual_Inflow<-data.frame(Avg_Annual_Inflows$Inflow)
colnames(Avg_Annual_Inflow)<-"Annual Avg Inflow"
Avg_Annual_Inflow$Trace_Notation <-Trace_Notation
colnames(Avg_Annual_Inflow)[2]<-"Trace_Notation"
#View(Avg_Annual_Inflow)

#########################################################################################################
####### Calculate Annual Shortage by Water Year #######
#########################################################################################################

#From Monthly Shortages to  Annual Shortages
  #Annual_Shortages <-AllDataDF %>% 
  # group_by(WaterYear,Trace_Notation) %>% 
  #summarise_all(funs(sum(Shortage)))                   #Issues with intergrating into AllData dataframe

  #Annual_Shortages<-data.frame(Annual_Shortages)
  #colnames(Avg_Annual_Inflow)<-"Annual Shortages"
  #Annual_Shortages$Trace_Notation <-Trace_Notation

#########################################################################################################
####### Join Inflow and Shortage Data to AllDataDF###########
#########################################################################################################

AllData <- full_join(AllDataDF,Avg_Annual_Inflow,by="Trace_Notation")
#AllData <- full_join(AllData,Annual_Shortages,by ="Trace_Notation")

#View(AllData)


#########################################################################################################
####### Filter June 1st and Sed Values###########
#########################################################################################################

Data_J1<- filter(AllData,Month == 6)

Data_NoSed <- filter(Data_J1,Sedimentation==0)
Data_10Perc <- filter(Data_J1,Sedimentation==10)
Data_30Perc <- filter(Data_J1,Sedimentation==30)

#Select Data frame to do Calculation on. 
   #Data<- Data_NoSed
  Data <- Data_10Perc
  Data <- Data_30Perc

###########################################################################################################
#################### Reliability  Metric for Storage ########################
###########################################################################################################
#  -- Metrics based on WBWCD - Drought Contigency Plan Drought Levels --  #
# See Table 3-2 : Hot/Dry Projected Drought for Drought Levels
# Moderate Total Basin Storage Drought Level 340K to 380K -- Yellow  ("Less than 380K")
# Severe Total Basin Storage Drought Level 280K to 340K -- Orange    ("Less than 340K")
# Extreme Total Basin Storage Drought Level less than 280K -- Red    ("Less than 280K")
ModerateLevel<- 380000
SevereLevel <- 340000
ExtremeLevel<-280000

Storage_Metrics <- data.frame(Data$Tot_Mnthly_Stor)
Storage_Rel_Metrics_Moderate <- data.frame(Data$Tot_Mnthly_Stor)
Storage_Rel_Metrics_Severe <- data.frame(Data$Tot_Mnthly_Stor)
Storage_Rel_Metrics_Extreme <- data.frame(Data$Tot_Mnthly_Stor)
#View(Stor_Metrics)

#Monthly Storage Column Number (MSCN)
MSCN <-9

#Moderate
i=1
while (i<=1080) {
  Storage_Rel_Metrics_Moderate[i,] <- ifelse(Data[i,MSCN]>ModerateLevel,1,0)
  i=i+1
}

#Severe
i=1
while (i<=1080) {
  Storage_Rel_Metrics_Severe[i,] <- ifelse(Data[i,MSCN]>SevereLevel,1,0)
  i=i+1
}

#Extreme
i=1
while (i<=1080) {
  Storage_Rel_Metrics_Extreme[i,] <- ifelse(Data[i,MSCN]>ExtremeLevel,1,0)
  i=i+1
}

#input Metrics into Data Dataframe

Data$ModerateStorageR <-Storage_Rel_Metrics_Moderate$Data.Tot_Mnthly_Stor
Data$SevereStorageR <- Storage_Rel_Metrics_Severe$Data.Tot_Mnthly_Stor
Data$ExtremeStorageR<- Storage_Rel_Metrics_Extreme$Data.Tot_Mnthly_Stor


## Calculate Reliability
Stor_Rel_Moderate <- data.frame(1:36)
Stor_Rel_Severe <- data.frame(c(1:36))
Stor_Rel_Extreme <- data.frame(1:36)



#Reliability_Data<-Data

#Moderate
Reliability_Data_Moderate <-Data %>% 
  group_by(Trace_Notation) %>%
summarise(ModPercent = mean(ModerateStorageR)*100)
#View(Reliability_Data_Moderate)

#Severe
Reliability_Data_Severe <-Data %>% 
  group_by(Trace_Notation) %>%
  summarise(SevPercent = mean(SevereStorageR)*100)
#View(Reliability_Data_Moderate)

#Extreme
Reliability_Data_Extreme <-Data %>% 
  group_by(Trace_Notation) %>%
  summarise(ExtPercent = mean(ExtremeStorageR)*100)
#View(Reliability_Data_Moderate)

##################################################################################################
###PLOT Data###
##################################################################################################

PlotData <- right_join(Reliability_Data_Moderate,Reliability_Data_Severe,by = 'Trace_Notation')
PlotData <- right_join(PlotData,Reliability_Data_Extreme,by = 'Trace_Notation')
PlotData <- left_join(PlotData,Data,by ='Trace_Notation') ####################### -- ISSUES  #############

#View(PlotData)

Data <- PlotData
##################################################################################################
###PLOTS###
##################################################################################################
library(plotly)

#Axis assignment
x=Data$Demand
y=Data$`Annual Avg Inflow`

setwd("~/GitHub/WeberBasinVulnerability/WeberBasinVulnerability/3 - Post Processing/Output")
#setwd(startWD)
#setwd("../3 - Post Processing/Output")

# Create a 3X3 Matrix Plot -- Subplots

plotList <- function(nplots) {
  lapply(seq_len(nplots), function(x) plot_ly())
}
s1 <- subplot(plotList(9), nrows = 3, shareX = TRUE, shareY = TRUE)
s1




# Moderate Demand Level
z=Data$ModPercent

p1 <- plot_ly(
  x = x,
  y = y,
  z = z , type = "contour",colors = c("yellow","white"))%>%
  colorbar(title = "Fraction of\n Simulated Years")%>%
  layout(title = "June 1st Storage Levels Reliability
         Moderate Storage Level (380,000 Acre-Feet)",
         xaxis = list(title ="Demand (Acre-Feet/Year)"),
         yaxis = list(title = "Inflows (Acre-Feet/Year)"))
p1

#plotly_IMAGE(p, format = "png", out_file = "Moderate Storage Reliability Plot.png")

#Severe Demand Level
z=Data$SevPercent

p2 <- plot_ly(
  x = x,
  y = y,
  z = z, type = "contour",colors = c("orange","white"))%>%
  colorbar(title = "Fraction of\n Simulated Years")%>%
  layout(title = "June 1st Storage Levels Reliability
         Severe Storage Level (340,000 Acre-Feet)",
         xaxis = list(title ="Demand (Acre-Feet/Year)"),
         yaxis = list(title = "Inflows (Acre-Feet/Year)"))
p2
#plotly_IMAGE(p, format = "png", out_file = "Severe Storage Reliability Plot.png")

#Extreme Demand Level
z=Data$ExtPercent

p3 <- plot_ly(
  x = x,
  y = y,
  z = z, type = "contour",colors = c("red","white"))%>%
  colorbar(title = "Fraction of\n Simulated Years")%>%
  layout(title = "June 1st Storage Levels Reliability
         Extreme Storage Level (280,000 Acre-Feet)",
         xaxis = list(title ="Demand (Acre-Feet/Year)"),
         yaxis = list(title = "Inflows (Acre-Feet/Year)"))
p3



s1 <- subplot(p1,p2,p3, plot_ly(),nrows = 1)#, margin = 0.04, heights = c(0.6,0.3,0.1))
#s1
s2 <- subplot(p1,p2,p3, plot_ly(),nrows = 1)#, margin = 0.04, heights = c(0.6,0.3,0.1))
#s2
s3 <- subplot(p1,p2,p3, plot_ly(),nrows = 1)#, margin = 0.04, heights = c(0.6,0.3,0.1))
#s3
p3x3 <- subplot(s1, s2, s3,plot_ly(), nrows = 3)#, margin = 0.04, heights = c(0.6, 0.3, 0.1))

p3x3

#Click on zoom see the graph



#plotly_IMAGE(p, format = "png", out_file = "Extreme Storage Reliability Plot.png")

### Plot with Overlay ###  Work in progress
    
#

#text information
#t <- list(
 # family = "sans serif",
#  size = 14,
#  color = toRGB("grey50"))

#z=Data$ModPercent

#p <- plot_ly(
 # x = x,
#  y = y,
 # z = z , type = "contour",contours = list(showlabels = TRUE),colors = c("yellow","white"))%>%
#  add_trace(x=x,y=y,text=Data$Tot_Mnthly_Stor, type = 'scatter',mode ='markers',color = "grey")%>%
 # #add_text(textfont = t, textposition = "top right") %>%
  #colorbar(title = "Fraction of\n Simulated Years")%>%
  #layout(title = "June 1st Storage Levels Reliability
   #      Moderate Storage Level (380,000 Acre-Feet)",
    #     xaxis = list(title ="Demand (Acre-Feet/Year)"),
     #    yaxis = list(title = "Inflows (Acre-Feet/Year)"))
#p







############ Storage Contours based on Moderate, Severe and Extreme Storage Drought Levels  #############################
#Storage
#z=Data$Tot_Mnthly_Stor

#p <- plot_ly(
 #x = Data$Demand,
  #y = Data$Inflow,
  #z =z , type = "contour",
  #colors = c("red","orange","yellow","white"),
  #contours = list(coloring = 'heatmap'),
  #autocontour = F,contours = list(
   # start = 280000,
  #  end = 380000,
   # size = 50000
  #))%>%
  #layout(title = "Storage by Color",
   #      xaxis = list(title ="Demand"),
    #     yaxis = list(title = "Inflows"))
#p

############ End of June 1 code##########
setwd(startWD)
