TraceDirectory <- paste0(TraceNum2,TraceDirectory)
Location <- TraceDirectory
Temp_Storage <- read.csv(Location)
Tot_Mnthly_Stor[,i] <- Temp_Storage[,5]
colnames(Tot_Mnthly_Stor)[i] <-  TraceDirectory
i=i+1
}
}
}
Tot_Mnthly_Stor <- data.frame(Tot_Mnthly_Stor)
#Transpose Data
Tot_Mnthly_Stor_Transposed <- t(Tot_Mnthly_Stor)
Tot_Mnthly_Stor_Transposed <- data.frame(Tot_Mnthly_Stor_Transposed)
#View(Tot_Mnthly_Inflow_Transposed)
#Stack Columns
Tot_Mnthly_Stor_Stacked <- stack(Tot_Mnthly_Stor_Transposed[1:108,1:359])
Tot_Mnthly_Stor <- Tot_Mnthly_Stor_Stacked$values
Tot_Mnthly_Stor <- data.frame(Tot_Mnthly_Stor)
##### Total Shortages #####
i=1
for(TTTNum in 1:TraceNumber){
for(TTNum in 1:TraceNumber1){
for(TNum in 1:TraceNumber2){
TraceDirectory <- paste0(",Trace",TNum)
TraceDirectory <-paste0 (TraceDirectory,"/Total Shortages.csv")
TraceNum1<- paste0(",Trace",TTNum)
TraceDirectory <- paste0(TraceNum1,TraceDirectory)
TraceNum2 <- paste0("Trace",TTTNum)
TraceDirectory <- paste0(TraceNum2,TraceDirectory)
Location <- TraceDirectory
Temp_Storage <- read.csv(Location)
Tot_Mnthly_Short[,i] <- Temp_Storage[,5]
colnames(Tot_Mnthly_Short)[i] <-  TraceDirectory
i=i+1
}
}
}
Tot_Mnthly_Short <- data.frame(Tot_Mnthly_Short)
#Transpose Data
Tot_Mnthly_Short_Transposed <- t(Tot_Mnthly_Short)
Tot_Mnthly_Short_Transposed <- data.frame(Tot_Mnthly_Short_Transposed)
#View(Tot_Mnthly_Inflow_Transposed)
#Stack Columns
Tot_Mnthly_Short_Stacked <- stack(Tot_Mnthly_Short_Transposed[1:108,1:359])
Tot_Mnthly_Short <- Tot_Mnthly_Short_Stacked$values
########################   Compile Output data   ###############################
Outputs <- Tot_Mnthly_Stor
Outputs$Shortage <- Tot_Mnthly_Short
# Add Trace Notation
#Outputs$Trace_Notation <-Trace_Notation
#Number
Outputs$Number<-c(1:38772)
Outputs<-data.frame(Outputs)
#########################  Merge  ---- Data Dataframe########################
Data <- merge(Inputs,Outputs,by="Number")
#########################  Merge  ---- Data Dataframe########################
Data <- merge(Inputs,Outputs,by="Number")
#From Monthly Streamflows to Annual Streamflows
Annual_Inflows$Inflow <-Data %>%
group_by(WaterYear,Trace_Notation) %>%
summarise_all(funs(sum(Inflow)))
View(Annual_Inflows)
#From Monthly Streamflows to Annual Streamflows
Annual_Inflows <-Data %>%
group_by(WaterYear,Trace_Notation) %>%
summarise_all(funs(sum(Inflow)))
### Clear any existing data or functions.
rm(list=ls())
library("dplyr", lib.loc="~/R/win-library/3.5")
#Record the current directory (0 - Code) for later recall
startWD <- getwd()
###Total Storage Compilation#--------------------------------------------------------------------------------#
#Store the current code directory so we can later return to it (0 - Code)
### Load the package or install if not present
if (!require("RColorBrewer")) {
install.packages("RColorBrewer")
library(RColorBrewer)
}
library(readr)
#install.packages("reshape")
library(reshape) #For Melt
library(lubridate) #For month
library(plotly) # For Plots
library(data.table)
library(dplyr)
####-----------------------------Trace Notation--------------------------------------------------
# Build names of folders output by RiverSmart
TraceNumber <- 6
TraceNumber1 <-6
TraceNumber2 <-3
Tot_TraceNum <- TraceNumber*TraceNumber1*TraceNumber2
Trace_Notation <-c(1:Tot_TraceNum)
i=1
for(TTTNum in 1:TraceNumber){
for(TTNum in 1:TraceNumber1){
for(TNum in 1:TraceNumber2){
TraceDirectory <- paste0(",Trace",TNum)
TraceNum1<- paste0(",Trace",TTNum)
TraceDirectory <- paste0(TraceNum1,TraceDirectory)
TraceNum2 <- paste0("Trace",TTTNum)
TraceDirectory <- paste0(TraceNum2,TraceDirectory)
Trace_Notation[i] <-  TraceDirectory
i=i+1
}
}
}
Trace_Notation_Data<- rep(Trace_Notation,359)
######## - A -   Compiling Annual Demands  ########
#setwd("~/GitHub/WeberBasinVulnerability/WeberBasinVulnerability/1 - Scenario Processing/Annual Service Area Demand Scenarios/Output")
setwd("../1 - Scenario Processing/Annual Service Area Demand Scenarios/Output")
Tot_Annual_Demand <- read.csv("SumMIandAG.csv")
Tot_Demand <- data.frame(c(1:108))
######## - A -   Compiling Annual Demands  ########
#setwd("~/GitHub/WeberBasinVulnerability/WeberBasinVulnerability/1 - Scenario Processing/Annual Service Area Demand Scenarios/Output")
setwd("../1 - Scenario Processing/Annual Service Area Demand Scenarios/Output")
######## - A -   Compiling Annual Demands  ########
setwd("~/GitHub/WeberBasinVulnerability/WeberBasinVulnerability/1 - Scenario Processing/Annual Service Area Demand Scenarios/Output")
Tot_Annual_Demand <- read.csv("SumMIandAG.csv")
Tot_Demand <- data.frame(c(1:108))
i=1
j=1
while (i<=6) {
Tot_Demand[j:(j+17),] <- rep(Tot_Annual_Demand[i,2],(18))
i=i+1
j=j+18
}
#View(Tot_Demand)
colnames(Tot_Demand) <- "Demand"
rownames(Tot_Demand) <- Trace_Notation
Tot_Mnthly_Demand<-data.frame(rep(Tot_Demand$Demand,359))
colnames(Tot_Mnthly_Demand) <- "Demand"
# Switch into local directory
#setwd("~/GitHub/WeberBasinVulnerability/WeberBasinVulnerability/2 - RiverWare Modeling/Scenario")
setwd(startWD)
setwd("../2 - RiverWare Modeling/Scenario")
# Switch into local directory
setwd("~/GitHub/WeberBasinVulnerability/WeberBasinVulnerability/2 - RiverWare Modeling/Scenario")
#Input Monthly data from RiverSmart Analysis
Tot_Mnthly_Inflow <-read.csv("Trace1,Trace1,Trace1/Total Inflows.csv")
i=1
for(TTTNum in 1:TraceNumber){
for(TTNum in 1:TraceNumber1){
for(TNum in 1:TraceNumber2){
TraceDirectory <- paste0(",Trace",TNum)
TraceDirectory <-paste0 (TraceDirectory,"/Total Inflows.csv")
TraceNum1<- paste0(",Trace",TTNum)
TraceDirectory <- paste0(TraceNum1,TraceDirectory)
TraceNum2 <- paste0("Trace",TTTNum)
TraceDirectory <- paste0(TraceNum2,TraceDirectory)
Location <- TraceDirectory
Temp_Storage <- read.csv(Location)
Tot_Mnthly_Inflow[,i] <- Temp_Storage[,5]
colnames(Tot_Mnthly_Inflow)[i] <-  TraceDirectory
i=i+1
}
}
}
Tot_Mnthly_Inflow <- data.frame(Tot_Mnthly_Inflow)
Months <- rep(c(1:12),31)
Months<- Months[(11:369)]
Tot_Mnthly_Inflow$Months <- Months
#Create Years
Years <- c(0:372)
i=1
j=1
while (j<=31) {
Years[(i:(i+11))] <- rep((j-1),12)
i=i+12
j=j+1
}
Years<- Years[(11:369)]
#Add months and Years column
#Tot_Mnthly_Inflow$Months <-Months
Tot_Mnthly_Inflow$Years <- Years
#Add a Water year - The water year is designated by the calendar year in which it ends, so the 2010 water year (USGS) started on October 1, 2009 and ended on September 30, 2010
Tot_Mnthly_Inflow$WaterYear <- ifelse(Tot_Mnthly_Inflow$Months>= 10,Tot_Mnthly_Inflow$Years + 1, Tot_Mnthly_Inflow$Years)
WaterYear<-ifelse(Tot_Mnthly_Inflow$Months>= 10,Tot_Mnthly_Inflow$Years + 1, Tot_Mnthly_Inflow$Years)
#Transpose Data
Tot_Mnthly_Inflow_Transposed <- t(Tot_Mnthly_Inflow)
Tot_Mnthly_Inflow_Transposed <- data.frame(Tot_Mnthly_Inflow_Transposed)
#View(Tot_Mnthly_Inflow_Transposed)
#Stack Columns
Tot_Mnthly_Inflow_Stacked <- stack(Tot_Mnthly_Inflow_Transposed[1:108,1:359])
Tot_Mnthly_Inflow <- Tot_Mnthly_Inflow_Stacked$values
##Total Sedimentation Changes on Reservoir
#Move back to code directory
setwd(startWD)
#Move into the local input directory
setwd("../3 - Post Processing")
Tot_Sed <- read.csv("Sedimentation.csv")
setwd("~/GitHub/WeberBasinVulnerability/WeberBasinVulnerability/3 - Post Processing")
Tot_Sed <- read.csv("Sedimentation.csv")
Tot_Sed <- Tot_Sed[,2]
Tot_Mnthly_Sed <- rep(Tot_Sed,359)
#### Time Columns: Mnths, Years and Water Years #####
Mnths<-c(1:38772)
i=1
j=1
while (i<=359) {
Mnths[j:(i*108)]<-Months[i]
i=i+1
j=j+108
}
Yrs<-c(1:38772)
i=1
j=1
while (i<=359) {
Yrs[j:(i*108)]<-Years[i]
i=i+1
j=j+108
}
Wtr_Yrs<-c(1:38772)
i=1
j=1
while (i<=359) {
Wtr_Yrs[j:(i*108)]<-WaterYear[i]
i=i+1
j=j+108
}
##################   Compile Mnthly Input data    ##################################
#Create Data Frame
Inputs<- data.frame(Tot_Mnthly_Demand)
Inputs$Inflow <- Tot_Mnthly_Inflow
Inputs$Sedimentation <- Tot_Mnthly_Sed
Inputs$Trace_Notation <- Trace_Notation
Inputs$Month<-Mnths
Inputs$Years<-Yrs
Inputs$WaterYear<-Wtr_Yrs
#Number
Inputs$Number<-c(1:38772)
Inputs <- data.frame(Inputs)
##################################  - 2 - Output data ########################################################
#Set Local Directory
setwd(startWD)
setwd("../2 - RiverWare Modeling/Scenario")
setwd("~/GitHub/WeberBasinVulnerability/WeberBasinVulnerability/2 - RiverWare Modeling/Scenario")
Tot_Mnthly_Stor <- read.csv("Trace1,Trace1,Trace1/Total Storage_NO EVAP.csv")
Tot_Mnthly_Short <-read.csv("Trace1,Trace1,Trace1/Total Shortages.csv")
##### Total Storage #####
i=1
for(TTTNum in 1:TraceNumber){
for(TTNum in 1:TraceNumber1){
for(TNum in 1:TraceNumber2){
TraceDirectory <- paste0(",Trace",TNum)
TraceDirectory <-paste0 (TraceDirectory,"/Total Storage_NO EVAP.csv")
TraceNum1<- paste0(",Trace",TTNum)
TraceDirectory <- paste0(TraceNum1,TraceDirectory)
TraceNum2 <- paste0("Trace",TTTNum)
TraceDirectory <- paste0(TraceNum2,TraceDirectory)
Location <- TraceDirectory
Temp_Storage <- read.csv(Location)
Tot_Mnthly_Stor[,i] <- Temp_Storage[,5]
colnames(Tot_Mnthly_Stor)[i] <-  TraceDirectory
i=i+1
}
}
}
Tot_Mnthly_Stor <- data.frame(Tot_Mnthly_Stor)
#Transpose Data
Tot_Mnthly_Stor_Transposed <- t(Tot_Mnthly_Stor)
Tot_Mnthly_Stor_Transposed <- data.frame(Tot_Mnthly_Stor_Transposed)
#View(Tot_Mnthly_Inflow_Transposed)
#Stack Columns
Tot_Mnthly_Stor_Stacked <- stack(Tot_Mnthly_Stor_Transposed[1:108,1:359])
Tot_Mnthly_Stor <- Tot_Mnthly_Stor_Stacked$values
Tot_Mnthly_Stor <- data.frame(Tot_Mnthly_Stor)
##### Total Shortages #####
i=1
for(TTTNum in 1:TraceNumber){
for(TTNum in 1:TraceNumber1){
for(TNum in 1:TraceNumber2){
TraceDirectory <- paste0(",Trace",TNum)
TraceDirectory <-paste0 (TraceDirectory,"/Total Shortages.csv")
TraceNum1<- paste0(",Trace",TTNum)
TraceDirectory <- paste0(TraceNum1,TraceDirectory)
TraceNum2 <- paste0("Trace",TTTNum)
TraceDirectory <- paste0(TraceNum2,TraceDirectory)
Location <- TraceDirectory
Temp_Storage <- read.csv(Location)
Tot_Mnthly_Short[,i] <- Temp_Storage[,5]
colnames(Tot_Mnthly_Short)[i] <-  TraceDirectory
i=i+1
}
}
}
Tot_Mnthly_Short <- data.frame(Tot_Mnthly_Short)
#Transpose Data
Tot_Mnthly_Short_Transposed <- t(Tot_Mnthly_Short)
Tot_Mnthly_Short_Transposed <- data.frame(Tot_Mnthly_Short_Transposed)
#View(Tot_Mnthly_Inflow_Transposed)
#Stack Columns
Tot_Mnthly_Short_Stacked <- stack(Tot_Mnthly_Short_Transposed[1:108,1:359])
Tot_Mnthly_Short <- Tot_Mnthly_Short_Stacked$values
########################   Compile Output data   ###############################
Outputs <- Tot_Mnthly_Stor
Outputs$Shortage <- Tot_Mnthly_Short
# Add Trace Notation
#Outputs$Trace_Notation <-Trace_Notation
#Number
Outputs$Number<-c(1:38772)
Outputs<-data.frame(Outputs)
#########################  Merge  ---- Data Dataframe########################
Data <- merge(Inputs,Outputs,by="Number")
#From Monthly Streamflows to Annual Streamflows
Annual_Inflows <-Data %>%
group_by(WaterYear,Trace_Notation) %>%
summarise_all(funs(sum(Inflow)))
View(Annual_Inflows)
#add Inflow name column
Annual_Inflows$Scenario <-rep(c(rep('Hot Dry Flows',3),rep('Base Flows (1940-1970)',3),rep('Duration & Intensity Droughts (1930-1960)',3),rep('Duration Droughts (1610-1640)',3),rep('Intensity Drought (1520-1550)',3),rep('Intensity Drought (1570-1600)',3)),60)
View(Annual_Inflows)
Annual_Inflows<-distinct(Annual_Inflows,keep_all=FALSE)
#From Monthly Streamflows to Annual Streamflows
Annual_Inflows <-Data %>%
group_by(WaterYear,Trace_Notation) %>%
summarise_all(funs(sum(Inflow)))
#add Inflow name column
Annual_Inflows$Scenario <-rep(c(rep('Hot Dry Flows',3),rep('Base Flows (1940-1970)',3),rep('Duration & Intensity Droughts (1930-1960)',3),rep('Duration Droughts (1610-1640)',3),rep('Intensity Drought (1520-1550)',3),rep('Intensity Drought (1570-1600)',3)),60)
Annual_Inflows<-distinct(Annual_Inflows,.keep_all=FALSE)
Annual_Inflows<-distinct(Annual_Inflows$Inflow,keep_all=FALSE)
### PLOT ANNUAL INFLOWS
plot_ly(Annual_Inflows,y=Annual_Inflow$Inflow,mode='lines')
### PLOT ANNUAL INFLOWS
plot_ly(Annual_Inflows,y=Annual_Inflows$Inflow,mode='lines')
### PLOT ANNUAL INFLOWS
plot_ly(Annual_Inflows,x=Annual_Inflows$Scenario,y=Annual_Inflows$Inflow,mode='lines')
### PLOT ANNUAL INFLOWS
plot_ly(Annual_Inflows,x=Annual_Inflows$Scenario,y=Annual_Inflows$Inflow,type = 'lines')
### PLOT ANNUAL INFLOWS
plot_ly(Annual_Inflows,x=Annual_Inflows$Scenario,y=Annual_Inflows$Inflow,type = 'bar',Title='6 Scenarios (Summed Demands)')
### PLOT ANNUAL INFLOWS
plot_ly(Annual_Inflows,x=Annual_Inflows$Scenario,y=Annual_Inflows$Inflow,type = 'bar',title='6 Scenarios (Summed Demands)')
### PLOT ANNUAL INFLOWS
plot_ly(Annual_Inflows,x=Annual_Inflows$Scenario,y=Annual_Inflows$Inflow,type = 'bar')%>%
layout(title='6 Scenarios (Summed Demands)')
### PLOT ANNUAL INFLOWS
plot_ly(Annual_Inflows,x=Annual_Inflows$Scenario,y=Annual_Inflows$Inflow,
type = 'bar',color = Scenario)%>%
layout(title='6 Scenarios (Summed Demands)')
### PLOT ANNUAL INFLOWS
plot_ly(Annual_Inflows,x=Annual_Inflows$Scenario,y=Annual_Inflows$Inflow,
type = 'bar',color = Annual_Inflows$Scenario)%>%
layout(title='6 Scenarios (Summed Demands)')
### PLOT ANNUAL INFLOWS
plot_ly(Annual_Inflows,x=Annual_Inflows$Scenario,y=Annual_Inflows$Inflow,
type = 'bar',color = Annual_Inflows$Scenario)%>%
layout(title='Summed Demands Scenarios)')
### PLOT ANNUAL INFLOWS
plot_ly(Annual_Inflows,x=Annual_Inflows$Scenario,y=Annual_Inflows$Inflow,
type = 'bar',color = Annual_Inflows$Scenario,colors = "Set1")%>%
layout(title='Summed Demands Scenarios')
### PLOT ANNUAL INFLOWS
plot_ly(Annual_Inflows,x=Annual_Inflows$Scenario,y=Annual_Inflows$Inflow,
type = 'bar',color = Annual_Inflows$Scenario,colors = "Set1",
marker = list(color = 'rgb(158,202,225)',
line = list(color = 'rgb(8,48,107)',
width = 1.5)))%>%
layout(title='Summed Demands Scenarios',yaxis(title='Total Demand by Scenario (Acre-Feet)'))
### PLOT ANNUAL INFLOWS
plot_ly(Annual_Inflows,x=Annual_Inflows$Scenario,y=Annual_Inflows$Inflow,
type = 'bar',color = Annual_Inflows$Scenario,colors = "Set1",
marker = list(color = 'rgb(158,202,225)',
line = list(color = 'rgb(8,48,107)',
width = 1.5)))%>%
layout(title='Summed Demands Scenarios',yaxis = list(title='Total Demand by Scenario (Acre-Feet)'))
### PLOT ANNUAL INFLOWS
plot_ly(Annual_Inflows,x=Annual_Inflows$Scenario,y=Annual_Inflows$Inflow,
type = 'bar',color = Annual_Inflows$Scenario,colors = "Set1",
marker = list(width = 15))%>%
layout(title='Summed Demands Scenarios',yaxis = list(title='Total Demand by Scenario (Acre-Feet)'))
### PLOT ANNUAL INFLOWS
plot_ly(Annual_Inflows,x=Annual_Inflows$Scenario,y=Annual_Inflows$Inflow,
type = 'bar',color = Annual_Inflows$Scenario,colors = "Set1",
marker = list(width = 150))%>%
layout(title='Summed Demands Scenarios',yaxis = list(title='Total Demand by Scenario (Acre-Feet)'))
plot_ly(Annual_Inflows,x=Annual_Inflows$Scenario,y=Annual_Inflows$Inflow,
type = 'scatter',color = Annual_Inflows$Scenario,colors = "Set1")%>%
layout(title='Summed Demands Scenarios',yaxis = list(title='Total Demand by Scenario (Acre-Feet)'))
xcategoryorder<-list(categoryorder ="array",
categoryarray =c(Annual_Inflows$Scenario))
plot_ly(Annual_Inflows,x=Annual_Inflows$Scenario,y=Annual_Inflows$Inflow,
type = 'bar',color = Annual_Inflows$Scenario,colors = "Set1")%>%
layout(title='Summed Demands Scenarios',xaxis=xcategoryorder,yaxis = list(title='Total Demand by Scenario (Acre-Feet)'))
plot_ly(Annual_Inflows,x=Annual_Inflows$Scenario,y=Annual_Inflows$Inflow,
type = 'bar',color = Annual_Inflows$Scenario,colors = "Set1")%>%
layout(title='Summed Inflow Scenarios',xaxis=xcategoryorder,yaxis = list(title='Total Inflow by Scenario (Acre-Feet)'))
#Scatter plots
plot_ly(Annual_Inflows,x=Annual_Inflows$Scenario,y=Annual_Inflows$Inflow,
type = 'scatter',color = Annual_Inflows$Scenario,colors = "Set1")%>%
layout(title='Summed Demands Scenarios',yaxis = list(title='Total Demand by Scenario (Acre-Feet)'))
#Mean Inflows
plot_ly(Annual_Inflows,x=Annual_Inflows$Scenario,y=Mean(Annual_Inflows$Inflow),
type = 'bar',color = Annual_Inflows$Scenario,colors = "Set1")%>%
layout(title='Summed Inflow Scenarios',xaxis=xcategoryorder,yaxis = list(title='Total Inflow by Scenario (Acre-Feet)'))
#Mean Inflows
plot_ly(Annual_Inflows,x=Annual_Inflows$Scenario,y=mean(Annual_Inflows$Inflow),
type = 'bar',color = Annual_Inflows$Scenario,colors = "Set1")%>%
layout(title='Summed Inflow Scenarios',xaxis=xcategoryorder,yaxis = list(title='Total Inflow by Scenario (Acre-Feet)'))
#Mean Inflows
plot_ly(Annual_Inflows,x=Annual_Inflows$Scenario,y=mean(Annual_Inflows$Inflow,by=Annual_Inflows$Scenario),
type = 'bar',color = Annual_Inflows$Scenario,colors = "Set1")%>%
layout(title='Mean Inflow Scenarios',xaxis=xcategoryorder,yaxis = list(title='Mean Inflow by Scenario (Acre-Feet)'))
mean(Annual_Inflows$Inflow,by=Annual_Inflows$Scenario)
summarise(Annual_Inflows)
View(summarise(Annual_Inflows))
View((Annual_Inflows))
View((Annual_Inflows,Scenario))
View(summarise(Annual_Inflows,Scenario))
#add Inflow name column
Annual_Inflows$Scenario <-rep(c(rep('Hot Dry Flows',3),rep('Base Flows (1940-1970)',3),rep('Duration & Intensity Droughts (1930-1960)',3),rep('Duration Droughts (1610-1640)',3),rep('Intensity Drought (1520-1550)',3),rep('Intensity Drought (1570-1600)',3)),6)
####From Annual Streamflows to Average Annual Streamflows###
Avg_Annual_Inflows <- Annual_Inflows %>%
group_by(Trace_Notation) %>%
summarise_all(funs(mean(Inflow)))
Avg_Annual_Inflow<-data.frame(Avg_Annual_Inflows$Inflow)
colnames(Avg_Annual_Inflow)<-"Annual Avg Inflow"
Avg_Annual_Inflow$Trace_Notation <-Trace_Notation
colnames(Avg_Annual_Inflow)[2]<-"Trace_Notation"
#add Inflow name column
Avg_Annual_Inflows$Scenario <-rep(c(rep('Hot Dry Flows',3),rep('Base Flows (1940-1970)',3),rep('Duration & Intensity Droughts (1930-1960)',3),rep('Duration Droughts (1610-1640)',3),rep('Intensity Drought (1520-1550)',3),rep('Intensity Drought (1570-1600)',3)),6)
#Plots Bar
#Mean Inflows
plot_ly(Avg_Annual_Inflows,x=Avg_Annual_Inflows$Scenario,y=Avg_Annual_Inflows$Inflow,
type = 'bar',color = Avg_Annual_Inflows$Scenario,colors = "Set1")%>%
layout(title='Mean Inflow Scenarios',xaxis=xcategoryorder,yaxis = list(title='Mean Inflow by Scenario (Acre-Feet)'))
SimplfiedAAI<-distinct(Avg_Annual_Inflows$Scenario)
SimplfiedAAI<-distinct(Avg_Annual_Inflows)
SimpAAI<-distinct(Avg_Annual_Inflows)
View(SimpAAI)
SimpAAI$Trace_Notation<-SimpAAI$Scenario
SimpAAI<-Avg_Annual_Inflows
SimpAAI$Trace_Notation<-SimpAAI$Scenario
SimpAAI<-distinct(Avg_Annual_Inflows)
SimpAAI<-Avg_Annual_Inflows
SimpAAI$Trace_Notation<-SimpAAI$Scenario
SimpAAI<-distinct(SimpAAI,keep_all=FALSE)
SimpAAI<-Avg_Annual_Inflows
SimpAAI$Trace_Notation<-SimpAAI$Scenario
SimpAAI<-distinct(SimpAAI$Trace_Notation,keep_all=FALSE)
SimpAAI<-distinct(SimpAAI$Inflow,keep_all=FALSE)
SimpAAI %>% distinct(Scenario,.keep_all = TRUE)
SimpAAI<-Avg_Annual_Inflows %>% distinct(Scenario,.keep_all = TRUE)
#add Inflow name column
Avg_Annual_Inflows$Scenario <-rep(c(rep('Hot Dry Flows',3),rep('Base Flows (1940-1970)',3),rep('Duration & Intensity Droughts (1930-1960)',3),rep('Duration Droughts (1610-1640)',3),rep('Intensity Drought (1520-1550)',3),rep('Intensity Drought (1570-1600)',3)),6)
SimpAAI<-Avg_Annual_Inflows %>% distinct(Scenario,.keep_all = TRUE)
#Simplify data
SimpAAI<-Avg_Annual_Inflows %>% distinct(Scenario,.keep_all = TRUE)
#Plots Bar
#Mean Inflows
plot_ly(SimpAAI,x=SimpAAI$Scenario,y=SimpAAI$Inflow,
type = 'bar',color = SimpAAI$Scenario,colors = "Set1")%>%
layout(title='Mean Inflow Scenarios',xaxis=xcategoryorder,yaxis = list(title='Mean Inflow by Scenario (Acre-Feet)'))
#Simplify data
SimpAI<-Annual_Inflows %>% distinct(Scenario,.keep_all = TRUE)
View(SimpAI)
#Summed Total Inflows
plot_ly(SimpAI,x=SimpAI$Scenario,y=SimpAI$Inflow,
type = 'bar',color = SimpAI$Scenario,colors = "Set1")%>%
layout(title='Summed Inflow Scenarios',xaxis=xcategoryorder,yaxis = list(title='Total Inflow by Scenario (Acre-Feet)'))
#Scatter plots
plot_ly(Annual_Inflows,x=Annual_Inflows$Scenario,y=Annual_Inflows$Inflow,
type = 'scatter',color = Annual_Inflows$Scenario,colors = "Set1")%>%
layout(title='Summed Inflow Scenarios',yaxis = list(title='Total Inflow by Scenario (Acre-Feet)'))
#Scatter plots
plot_ly(Annual_Inflows,x=Annual_Inflows$Scenario,y=Annual_Inflows$Inflow,
type = 'scatter',color = Annual_Inflows$Scenario,colors = "Set1")%>%
layout(title='Summed Inflow Scenarios',xaxis=xcategoryorder,yaxis = list(title='Total Inflow by Scenario (Acre-Feet)'))
plot_ly(Annual_Inflows,x=Annual_Inflows$WaterYear,y=Annual_Inflows$Inflow,
type = 'scatter',color = Annual_Inflows$Scenario,colors = "Set1")%>%
layout(title='Summed Inflow Scenarios',xaxis=xcategoryorder,yaxis = list(title='Total Inflow by Scenario (Acre-Feet)'))
View(Annual_Inflows)
plot_ly(Annual_Inflows,x=Annual_Inflows$WaterYear,y=Annual_Inflows$Inflow,
type = 'line',color = Annual_Inflows$Scenario,colors = "Set1")%>%
layout(title='Summed Inflow Scenarios',xaxis=xcategoryorder,yaxis = list(title='Total Inflow by Scenario (Acre-Feet)'))
plot_ly(Annual_Inflows,x=Annual_Inflows$WaterYear,y=Annual_Inflows$Inflow,
type = 'scatter',mode='line',color = Annual_Inflows$Scenario,colors = "Set1")%>%
layout(title='Summed Inflow Scenarios',xaxis=xcategoryorder,yaxis = list(title='Total Inflow by Scenario (Acre-Feet)'))
plot_ly(Annual_Inflows,x=Annual_Inflows$WaterYear,y=Annual_Inflows$Inflow,
type = 'scatter',mode='line',color = Annual_Inflows$Scenario,colors = "Set1")%>%
layout(title='Summed Inflow Scenarios',xaxis=list(title='Water Year'),yaxis = list(title='Total Inflow by Scenario (Acre-Feet)'))
plot(weber2014$year,weber2014$recon_m3s,main = "Reconstructed Paleo Flows")
#Input Librarys###############################################
library("viridisLite")
library(readr)
library(tidyverse)
library(readxl)
#install.packages("measurements")
library(measurements)
#Data######################################
weber2014 <- read_csv("weber2014_ac-ft.csv")  #Annual Data from Paleo Flows and Observed Flows
plot(weber2014$year,weber2014$recon_m3s,main = "Reconstructed Paleo Flows")
ClimateFlowsWeberRiver <- read_excel("ClimateFlowsWeberRiver.xlsx")  # Monthly Data from Western Water A. Climate Scenarios
#Store the current code directory so we can later return (0 - Code)
fCodeDir <- getwd()
## Move into local directory ######################################################################################################
setwd("~/GitHub/WeberBasinVulnerability/WeberBasinVulnerability/1 - Scenario Processing/Annual Average Streamflow Scenario Selection")
#Input Librarys###############################################
library("viridisLite")
library(readr)
library(tidyverse)
library(readxl)
#install.packages("measurements")
library(measurements)
#Data######################################
weber2014 <- read_csv("weber2014_ac-ft.csv")  #Annual Data from Paleo Flows and Observed Flows
plot(weber2014$year,weber2014$recon_m3s,main = "Reconstructed Paleo Flows")
ClimateFlowsWeberRiver <- read_excel("ClimateFlowsWeberRiver.xlsx")  # Monthly Data from Western Water A. Climate Scenarios
ClimateFlowsWeberRiver <- ClimateFlowsWeberRiver[4:351,1:6]  #Get rid of first 3 months to start data on 1981-01-01
data <- as_tibble(ClimateFlowsWeberRiver)   ## Used for Plots at bottom of code.
SumsofClimate <- c(1:29)  ##bottom plots
df1 <- data.frame(ClimateFlowsWeberRiver) # Convert to dataframe
View(weber2014)
