<<<<<<< Updated upstream
Annual_Shortages<-data.frame(Annual_Shortages)
colnames(Avg_Annual_Inflow)<-"Annual Shortages"
Annual_Shortages$Trace_Notation <-Trace_Notation
AllData <- full_join(AllDataDF,Avg_Annual_Inflow,by="Trace_Notation")
View(AllData)
View(Avg_Annual_Inflow)
colnames(Avg_Annual_Inflow)[2]<-"Trace_Notation"
View(Avg_Annual_Inflow)
#From Monthly Shortages to  Annual Shortages
Annual_Shortages <-AllDataDF %>%
group_by(WaterYear,Trace_Notation) %>%
summarise_all(funs(sum(Shortage)))
#From Monthly Shortages to  Annual Shortages
Annual_Shortages <-AllDataDF %>%
group_by(WaterYear,Trace_Notation) %>%
summarise_all(funs(sum(Shortage)))
Annual_Shortages<-data.frame(Annual_Shortages)
colnames(Avg_Annual_Inflow)<-"Annual Shortages"
Annual_Shortages$Trace_Notation <-Trace_Notation
View(Annual_Shortages)
#From Monthly Shortages to  Annual Shortages
Annual_Shortages <-AllDataDF %>%
group_by(WaterYear,Trace_Notation) %>%
summarise_all(funs(sum(Shortage)))
Annual_Shortages<-data.frame(Annual_Shortages)
colnames(Avg_Annual_Inflow)<-"Annual Shortages"
Annual_Shortages$Trace_Notation <-Trace_Notation
AllData <- full_join(AllDataDF,Avg_Annual_Inflow,by="Trace_Notation")
View(AllDataDF)
#From Monthly Streamflows to Annual Streamflows
Annual_Inflows <-AllDataDF %>%
group_by(WaterYear,Trace_Notation) %>%
summarise_all(funs(sum(Inflow)))
Avg_Annual_Inflows <- Annual_Inflows %>%
group_by(Trace_Notation) %>%
summarise_all(funs(mean(Inflow)))
Avg_Annual_Inflow<-data.frame(Avg_Annual_Inflows$Inflow)
colnames(Avg_Annual_Inflow)<-"Annual Avg Inflow"
Avg_Annual_Inflow$Trace_Notation <-Trace_Notation
colnames(Avg_Annual_Inflow)[2]<-"Trace_Notation"
View(Avg_Annual_Inflow)
#From Monthly Shortages to  Annual Shortages
Annual_Shortages <-AllDataDF %>%
group_by(WaterYear,Trace_Notation) %>%
summarise_all(funs(sum(Shortage)))
AllData <- full_join(AllDataDF,Avg_Annual_Inflow,by="Trace_Notation")
View(AllData)
Data_J1<- filter(AllDataDF,Month == 6)
Data_NoSed <- filter(Data_J1,Sedimentation==0)
Data_10Perc <- filter(Data_J1,Sedimentation==10)
Data_30Perc <- filter(AllData_J1,Sedimentation==30)
Data_30Perc <- filter(Data_J1,Sedimentation==30)
#Select Data frame to do Calculation on.
Data<- Data_NoSed
###########################################################################################################
#################### Reliability  Metric for Storage ########################
###########################################################################################################
#  -- Metrics based on WBWCD - Drought Contigency Plan Drought Levels --  #
# See Table 3-2 : Hot/Dry Projected Drought for Drought Levels
# Moderate Total Basin Storage Drought Level 340K to 380K -- Yellow  ("Less than 380K")
# Severe Total Basin Storage Drought Level 280K to 340K -- Orange    ("Less than 340K")
# Extreme Total Basin Storage Drought Level less than 280K -- Red    ("Less than 280K")
ModerateLevel<- 380000
SevereLevel <- 340000
ExtremeLevel<-280000
View(Data)
AllData <- full_join(AllDataDF,Avg_Annual_Inflow,by="Trace_Notation")
Data_J1<- filter(AllData,Month == 6)
Data_NoSed <- filter(Data_J1,Sedimentation==0)
Data_10Perc <- filter(Data_J1,Sedimentation==10)
Data_30Perc <- filter(Data_J1,Sedimentation==30)
#Select Data frame to do Calculation on.
Data<- Data_NoSed
###########################################################################################################
#################### Reliability  Metric for Storage ########################
###########################################################################################################
#  -- Metrics based on WBWCD - Drought Contigency Plan Drought Levels --  #
# See Table 3-2 : Hot/Dry Projected Drought for Drought Levels
# Moderate Total Basin Storage Drought Level 340K to 380K -- Yellow  ("Less than 380K")
# Severe Total Basin Storage Drought Level 280K to 340K -- Orange    ("Less than 340K")
# Extreme Total Basin Storage Drought Level less than 280K -- Red    ("Less than 280K")
ModerateLevel<- 380000
SevereLevel <- 340000
ExtremeLevel<-280000
Storage_Metrics <- data.frame(Data$Storage)
Storage_Rel_Metrics_Moderate <- data.frame(Data$Storage)
Storage_Rel_Metrics_Severe <- data.frame(Data$Storage)
Storage_Rel_Metrics_Extreme <- data.frame(Data$Storage)
#Moderate
i=1
while (i<=1080) {
Storage_Rel_Metrics_Moderate[i,] <- ifelse(Data[i,6]>ModerateLevel,1,0)
i=i+1
}
#Severe
i=1
while (i<=1080) {
Storage_Rel_Metrics_Severe[i,] <- ifelse(Data[i,6]>SevereLevel,1,0)
i=i+1
}
#Extreme
i=1
while (i<=1080) {
Storage_Rel_Metrics_Extreme[i,] <- ifelse(Data[i,6]>ExtremeLevel,1,0)
i=i+1
}
Data$ModerateStorageR <-Storage_Rel_Metrics_Moderate$Data.Storage
Data$SevereStorageR <- Storage_Rel_Metrics_Severe$Data.Storage
Data$ExtremeStorageR<- Storage_Rel_Metrics_Extreme$Data.Storage
#Monthly Storage Column Number (MSCN)
MSCN <-9
#Moderate
i=1
while (i<=1080) {
Storage_Rel_Metrics_Moderate[i,] <- ifelse(Data[i,MSCN]>ModerateLevel,1,0)
i=i+1
}
#Severe
i=1
while (i<=1080) {
Storage_Rel_Metrics_Severe[i,] <- ifelse(Data[i,MSCN]>SevereLevel,1,0)
i=i+1
}
#Extreme
i=1
while (i<=1080) {
Storage_Rel_Metrics_Extreme[i,] <- ifelse(Data[i,MSCN]>ExtremeLevel,1,0)
i=i+1
}
Data$ModerateStorageR <-Storage_Rel_Metrics_Moderate$Data.Storage
Data$SevereStorageR <- Storage_Rel_Metrics_Severe$Data.Storage
Data$ExtremeStorageR<- Storage_Rel_Metrics_Extreme$Data.Storage
View(Data)
Data$ModerateStorageR <-Storage_Rel_Metrics_Moderate$Data.Storage
Data$SevereStorageR <- Storage_Rel_Metrics_Severe$Data.Storage
Data$ExtremeStorageR<- Storage_Rel_Metrics_Extreme$Data.Storage
View(Data)
Storage_Rel_Metrics_Moderate
#Moderate
i=1
while (i<=1080) {
Storage_Rel_Metrics_Moderate[i,] <- ifelse(Data[i,MSCN]>ModerateLevel,1,0)
i=i+1
}
Storage_Rel_Metrics_Moderate
Storage_Metrics <- data.frame(Data$Tot_Mnthly_Stor)
Storage_Rel_Metrics_Moderate <- data.frame(Data$Tot_Mnthly_Stor)
Storage_Rel_Metrics_Severe <- data.frame(Data$Tot_Mnthly_Stor)
Storage_Rel_Metrics_Extreme <- data.frame(Data$Tot_Mnthly_Stor)
#Monthly Storage Column Number (MSCN)
MSCN <-9
#Moderate
i=1
while (i<=1080) {
Storage_Rel_Metrics_Moderate[i,] <- ifelse(Data[i,MSCN]>ModerateLevel,1,0)
i=i+1
}
View(Storage_Rel_Metrics_Moderate)
#Moderate
i=1
while (i<=1080) {
Storage_Rel_Metrics_Moderate[i,] <- ifelse(Data[i,MSCN]>ModerateLevel,1,0)
i=i+1
}
#Severe
i=1
while (i<=1080) {
Storage_Rel_Metrics_Severe[i,] <- ifelse(Data[i,MSCN]>SevereLevel,1,0)
i=i+1
}
#Extreme
i=1
while (i<=1080) {
Storage_Rel_Metrics_Extreme[i,] <- ifelse(Data[i,MSCN]>ExtremeLevel,1,0)
i=i+1
}
Data$ModerateStorageR <-Storage_Rel_Metrics_Moderate$Data.Storage
Data$SevereStorageR <- Storage_Rel_Metrics_Severe$Data.Storage
Data$ExtremeStorageR<- Storage_Rel_Metrics_Extreme$Data.Storage
## Calculate Reliability
Stor_Rel_Moderate <- data.frame(1:36)
Stor_Rel_Severe <- data.frame(c(1:36))
Stor_Rel_Extreme <- data.frame(1:36)
Data2<-Data
Data2 <-Data %>%
group_by(Data$Trace_Notation) %>%                             ############## Has issues ########
summarise(ModSum = sum(Data$ModerateStorageR))
View(Data2)
Reliability_Data<-Data
Reliability_Data <-Data %>%
group_by(Data$Trace_Notation) %>%                             ############## Has issues ########
summarise(ModSum = sum(Data$ModerateStorageR))
View(Reliability_Data)
Reliability_Data <-Data %>%
group_by(Trace_Notation) %>%                             ############## Has issues ########
summarise(ModSum = sum(ModerateStorageR))
View(Data)
Data$ModerateStorageR <-Storage_Rel_Metrics_Moderate$Data.Tot_Mnthly_Stor
Data$SevereStorageR <- Storage_Rel_Metrics_Severe$Data.Tot_Mnthly_Stor
Data$ExtremeStorageR<- Storage_Rel_Metrics_Extreme$Data.Tot_Mnthly_Stor
## Calculate Reliability
Stor_Rel_Moderate <- data.frame(1:36)
Stor_Rel_Severe <- data.frame(c(1:36))
Stor_Rel_Extreme <- data.frame(1:36)
Reliability_Data<-Data
Reliability_Data <-Data %>%
group_by(Trace_Notation) %>%                             ############## Has issues ########
summarise(ModSum = sum(ModerateStorageR))
View(Reliability_Data)
Reliability_Data <-Data %>%
group_by(Trace_Notation) %>%                             ############## Has issues ########
summarise(ModSum = mean(ModerateStorageR)*100)
Reliability_Data_Moderate <-Data %>%
group_by(Trace_Notation) %>%
summarise(ModSum = mean(ModerateStorageR)*100)
View(Reliability_Data_Moderate)
Reliability_Data_Moderate <-Data %>%
group_by(Trace_Notation) %>%
summarise(ModSum = mean(ModerateStorageR)*100)
View(Reliability_Data_Moderate)
#Moderate
Reliability_Data_Moderate <-Data %>%
group_by(Trace_Notation) %>%
summarise(ModSum = mean(ModerateStorageR)*100)
#Severe
Reliability_Data_Severe <-Data %>%
group_by(Trace_Notation) %>%
summarise(ModSum = mean(ModerateStorageR)*100)
#Extreme
Reliability_Data_Extreme <-Data %>%
group_by(Trace_Notation) %>%
summarise(ModSum = mean(ModerateStorageR)*100)
PlotData <- Data %>%
group_by(Trace_Notation) %>%
summarise(n_distinct)
PlotData <- Data %>%
group_by(Trace_Notation) %>%
summarise(n_distinct(Trace_Notation))
PlotData <- Data %>%
group_by(Trace_Notation) %>%
summarise(n_distinct(Trace_Notation))
View(PlotData)
PlotData <- Data %>%
group_by(Trace_Notation) %>%
summarise(n_distinct(`Annual Avg Inflow`))
View(PlotData)
PlotData <- Data %>%
group_by(Trace_Notation) %>%
summarise(`Annual Avg Inflow`)
PlotData <- filter(Data == Trace_Notation)
PlotData <- filter(Data, Trace_Notation)
PlotData <- filter(Data, Trace_Notation==Trace_Notation)
View(PlotData)
PlotData <- Avg_Annual_Inflow
PlotData <- Avg_Annual_Inflow
PlotData <- full_join(Avg_Annual_Inflow,Reliability_Data_Moderate,by = 'Trace_Notation')
PlotData <- right_join(Avg_Annual_Inflow,Reliability_Data_Moderate,by = 'Trace_Notation')
#Severe
Reliability_Data_Severe <-Data %>%
group_by(Trace_Notation) %>%
summarise(SevSum = mean(ModerateStorageR)*100)
#Extreme
Reliability_Data_Extreme <-Data %>%
group_by(Trace_Notation) %>%
summarise(ExtSum = mean(ModerateStorageR)*100)
PlotData <- Avg_Annual_Inflow
PlotData <- right_join(Avg_Annual_Inflow,Reliability_Data_Moderate,by = 'Trace_Notation')
PlotData <- right_join(PlotData,Reliability_Data_Severe,by = 'Trace_Notation')
PlotData <- right_join(PlotData,Reliability_Data_Extreme,by = 'Trace_Notation')
View(PlotData)
#Severe
Reliability_Data_Severe <-Data %>%
group_by(Trace_Notation) %>%
summarise(SevSum = mean(SevereStorageR)*100)
#Extreme
Reliability_Data_Extreme <-Data %>%
group_by(Trace_Notation) %>%
summarise(ExtSum = mean(ExtremeStorageR)*100)
PlotData <- right_join(Avg_Annual_Inflow,Reliability_Data_Moderate,by = 'Trace_Notation')
PlotData <- right_join(PlotData,Reliability_Data_Severe,by = 'Trace_Notation')
PlotData <- right_join(PlotData,Reliability_Data_Extreme,by = 'Trace_Notation')
View(PlotData)
PlotData <- right_join((PlotData,Data$Demand,by ='Trace_Notation'))
PlotData <- right_join((PlotData,Data,by ='Trace_Notation'))
PlotData <- right_join(PlotData,Data,by ='Trace_Notation')
View(PlotData)
PlotData <- right_join(Reliability_Data_Moderate,Reliability_Data_Severe,by = 'Trace_Notation')
##################################################################################################
###PLOT Data###
##################################################################################################
PlotData<-1
PlotData <- right_join(Reliability_Data_Moderate,Reliability_Data_Severe,by = 'Trace_Notation')
PlotData <- right_join(PlotData,Reliability_Data_Extreme,by = 'Trace_Notation')
PlotData <- right_join(PlotData,Data,by ='Trace_Notation')
PlotData <- right_join(Reliability_Data_Moderate,Reliability_Data_Severe,by = 'Trace_Notation')
PlotData <- right_join(PlotData,Reliability_Data_Extreme,by = 'Trace_Notation')
PlotData <- left_join(PlotData,Data,by ='Trace_Notation')
PlotData <- right_join(Reliability_Data_Moderate,Reliability_Data_Severe,by = 'Trace_Notation')
PlotData <- right_join(PlotData,Reliability_Data_Extreme,by = 'Trace_Notation')
PlotData <- left_join(PlotData,Data,by ='Trace_Notation')
=======
#Extreme
Reliability_Data_Extreme <-Data %>%
group_by(Trace_Notation) %>%
summarise(ExtPercent = mean(ExtremeStorageR)*100)
PlotData <- right_join(Reliability_Data_Moderate,Reliability_Data_Severe,by = 'Trace_Notation')
PlotData <- right_join(PlotData,Reliability_Data_Extreme,by = 'Trace_Notation')
PlotData <- left_join(PlotData,Data,by ='Trace_Notation') ####################### -- ISSUES  #############
>>>>>>> Stashed changes
Data <- PlotData
##################################################################################################
###PLOTS###
##################################################################################################
library(plotly)
#Axis assignment
x=Data$Demand
<<<<<<< Updated upstream
y=Data$Inflow
y=Data$`Annual Avg Inflow`
setwd("~/GitHub/WeberBasinVulnerability/WeberBasinVulnerability/3 - Post Processing/Output")
# Moderate Demand Level
z=Data$ModerateStorageR
# Moderate Demand Level
z=Data$ModSum
p <- plot_ly(
x = x,
y = y$Inflow,
z = z$Data.Storage , type = "contour",colors = c("yellow","white","snow"),autocontour = F,contours = list(
start = 0,end = 1 , size =1))%>%
colorbar(title = "Fraction of\n Simulated Years")%>%
layout(title = "June 1st Storage Levels that Exceed Moderate Storage Level (380,000 Acre-Feet)",
xaxis = list(title ="Demand (Acre-Feet)"),
yaxis = list(title = "Inflows (Acre-Feet)"))
p <- plot_ly(
x = x,
y = y,
z = z, type = "contour",colors = c("yellow","white","snow"),autocontour = F,contours = list(
start = 0,end = 1 , size =1))%>%
colorbar(title = "Fraction of\n Simulated Years")%>%
layout(title = "June 1st Storage Levels that Exceed Moderate Storage Level (380,000 Acre-Feet)",
xaxis = list(title ="Demand (Acre-Feet)"),
yaxis = list(title = "Inflows (Acre-Feet)"))
p
p <- plot_ly(
x = x,
y = y,
z = z, type = "contour",colors = c("yellow","white","snow"),autocontour = F,contours = list(
start = 0,end = 100 , size =1))%>%
colorbar(title = "Fraction of\n Simulated Years")%>%
layout(title = "June 1st Storage Levels that Exceed Moderate Storage Level (380,000 Acre-Feet)",
xaxis = list(title ="Demand (Acre-Feet)"),
yaxis = list(title = "Inflows (Acre-Feet)"))
p
x = x,
y = y,
z = z, type = "contour",#colors = c("yellow","white","snow"),autocontour = F,contours = list(
#start = 0,end = 100 , size =1))%>%
colorbar(title = "Fraction of\n Simulated Years")%>%
layout(title = "June 1st Storage Levels that Exceed Moderate Storage Level (380,000 Acre-Feet)",
xaxis = list(title ="Demand (Acre-Feet)"),
yaxis = list(title = "Inflows (Acre-Feet)"))
p <- plot_ly(
x = x,
y = y,
z = z, type = "contour"%>%
colorbar(title = "Fraction of\n Simulated Years")%>%
layout(title = "June 1st Storage Levels that Exceed Moderate Storage Level (380,000 Acre-Feet)",
xaxis = list(title ="Demand (Acre-Feet)"),
yaxis = list(title = "Inflows (Acre-Feet)")))
p
p <- plot_ly(
x = x,
y = y,
z = z, type = "contour"#,colors = c("yellow","white","snow"),autocontour = F,contours = list(
#start = 0,end = 100 , size =1))
%>%
colorbar(title = "Fraction of\n Simulated Years")%>%
layout(title = "June 1st Storage Levels that Exceed Moderate Storage Level (380,000 Acre-Feet)",
xaxis = list(title ="Demand (Acre-Feet)"),
yaxis = list(title = "Inflows (Acre-Feet)")))
#Moderate
Reliability_Data_Moderate <-Data %>%
group_by(Trace_Notation) %>%
summarise(ModPercent = mean(ModerateStorageR)*100)
#Severe
Reliability_Data_Severe <-Data %>%
group_by(Trace_Notation) %>%
summarise(SevPercent = mean(SevereStorageR)*100)
#Extreme
Reliability_Data_Extreme <-Data %>%
group_by(Trace_Notation) %>%
summarise(ExtPercent = mean(ExtremeStorageR)*100)
PlotData <- right_join(Reliability_Data_Moderate,Reliability_Data_Severe,by = 'Trace_Notation')
PlotData <- right_join(PlotData,Reliability_Data_Extreme,by = 'Trace_Notation')
PlotData <- left_join(PlotData,Data,by ='Trace_Notation') ####################### -- ISSUES  #############
Data <- PlotData
##################################################################################################
###PLOTS###
##################################################################################################
library(plotly)
#Axis assignment
x=Data$Demand
y=Data$`Annual Avg Inflow`
setwd("~/GitHub/WeberBasinVulnerability/WeberBasinVulnerability/3 - Post Processing/Output")
# Moderate Demand Level
z=Data$ModSum
# Moderate Demand Level
z=Data$ModPercent
p <- plot_ly(
x = x,
y = y,
z = z , type = "contour",colors = c("yellow","white","snow"),autocontour = F,contours = list(
start = 0,end = 100 , size =1))%>%
colorbar(title = "Fraction of\n Simulated Years")%>%
layout(title = "June 1st Storage Levels that Exceed Moderate Storage Level (380,000 Acre-Feet)",
xaxis = list(title ="Demand (Acre-Feet)"),
yaxis = list(title = "Inflows (Acre-Feet)"))
p
#Severe Demand Level
z=Data$SevPercent
p <- plot_ly(
x = x,
y = y$Inflow,
z = z$Data.Storage, type = "contour",colors = c("orange","white","snow"),autocontour = F,contours = list(
start = 0,end = 1 , size =1))%>%
colorbar(title = "Fraction of\n Simulated Years")%>%
layout(title = "June 1st Storage Levels that Exceed Severe Storage Level (340,000 Acre-Feet)",
xaxis = list(title ="Demand (Acre-Feet)"),
yaxis = list(title = "Inflows (Acre-Feet)"))
=======
y=Data$`Annual Avg Inflow`
setwd("~/GitHub/WeberBasinVulnerability/WeberBasinVulnerability/3 - Post Processing/Output")
# Moderate Demand Level
z=Data$ModSum
# Moderate Demand Level
z=Data$ModPercent
p <- plot_ly(
x = x,
y = y,
z = z , type = "contour",colors = c("yellow","white","snow"),autocontour = F,contours = list(
start = 0,end = 100 , size =1))%>%
colorbar(title = "Fraction of\n Simulated Years")%>%
layout(title = "June 1st Storage Levels that Exceed Moderate Storage Level (380,000 Acre-Feet)",
xaxis = list(title ="Demand (Acre-Feet)"),
yaxis = list(title = "Inflows (Acre-Feet)"))
p
#Severe Demand Level
z=Data$SevPercent
p <- plot_ly(
x = x,
y = y$Inflow,
z = z$Data.Storage, type = "contour",colors = c("orange","white","snow"),autocontour = F,contours = list(
start = 0,end = 1 , size =1))%>%
colorbar(title = "Fraction of\n Simulated Years")%>%
layout(title = "June 1st Storage Levels that Exceed Severe Storage Level (340,000 Acre-Feet)",
xaxis = list(title ="Demand (Acre-Feet)"),
yaxis = list(title = "Inflows (Acre-Feet)"))
p <- plot_ly(
x = x,
y = y,
z = z, type = "contour",colors = c("orange","white","snow"),autocontour = F,contours = list(
start = 0,end = 1 , size =1))%>%
colorbar(title = "Fraction of\n Simulated Years")%>%
layout(title = "June 1st Storage Levels that Exceed Severe Storage Level (340,000 Acre-Feet)",
xaxis = list(title ="Demand (Acre-Feet)"),
yaxis = list(title = "Inflows (Acre-Feet)"))
p
p <- plot_ly(
x = x,
y = y,
z = z, type = "contour",colors = c("orange","white","snow"),autocontour = F,contours = list(
start = 0,end = 100 , size =1))%>%
colorbar(title = "Fraction of\n Simulated Years")%>%
layout(title = "June 1st Storage Levels that Exceed Severe Storage Level (340,000 Acre-Feet)",
xaxis = list(title ="Demand (Acre-Feet)"),
yaxis = list(title = "Inflows (Acre-Feet)"))
p
#Extreme Demand Level
z=Data$ExtremeStorageR
p <- plot_ly(
x = x,
y = y,
z = z, type = "contour",colors = c("red","white","snow"),autocontour = F,contours = list(
start = 0,end = 1 , size =1))%>%
colorbar(title = "Fraction of\n Simulated Years")%>%
layout(title = "June 1st Storage Levels that Exceed Extreme Storage Level (280,000 Acre-Feet)",
xaxis = list(title ="Demand (Acre-Feet)"),
yaxis = list(title = "Inflows (Acre-Feet)"))
p
#Extreme Demand Level
z=Data$ExtPercent
p <- plot_ly(
x = x,
y = y,
z = z, type = "contour",colors = c("red","white","snow"),autocontour = F,contours = list(
start = 0,end = 1 , size =1))%>%
colorbar(title = "Fraction of\n Simulated Years")%>%
layout(title = "June 1st Storage Levels that Exceed Extreme Storage Level (280,000 Acre-Feet)",
xaxis = list(title ="Demand (Acre-Feet)"),
yaxis = list(title = "Inflows (Acre-Feet)"))
p
p <- plot_ly(
x = x,
y = y,
z = z, type = "contour",colors = c("red","white","snow"),autocontour = F,contours = list(
start = 0,end = 100 , size =1))%>%
colorbar(title = "Fraction of\n Simulated Years")%>%
layout(title = "June 1st Storage Levels that Exceed Extreme Storage Level (280,000 Acre-Feet)",
xaxis = list(title ="Demand (Acre-Feet)"),
yaxis = list(title = "Inflows (Acre-Feet)"))
p
# Moderate Demand Level
z=Data$ModPercent
p <- plot_ly(
x = x,
y = y,
z = z , type = "contour",colors = c("yellow","white","snow"),autocontour = F,contours = list(
start = 0,end = 100 , size =1))%>%
colorbar(title = "Fraction of\n Simulated Years")%>%
layout(title = "June 1st Storage Levels Reliability
Moderate Storage Level (380,000 Acre-Feet)",
xaxis = list(title ="Demand (Acre-Feet/Year)"),
yaxis = list(title = "Inflows (Acre-Feet/Year)"))
p
#Severe Demand Level
z=Data$SevPercent
>>>>>>> Stashed changes
p <- plot_ly(
x = x,
y = y,
z = z, type = "contour",colors = c("orange","white","snow"),autocontour = F,contours = list(
<<<<<<< Updated upstream
start = 0,end = 1 , size =1))%>%
colorbar(title = "Fraction of\n Simulated Years")%>%
layout(title = "June 1st Storage Levels that Exceed Severe Storage Level (340,000 Acre-Feet)",
xaxis = list(title ="Demand (Acre-Feet)"),
yaxis = list(title = "Inflows (Acre-Feet)"))
p
p <- plot_ly(
x = x,
y = y,
z = z, type = "contour",colors = c("orange","white","snow"),autocontour = F,contours = list(
start = 0,end = 100 , size =1))%>%
colorbar(title = "Fraction of\n Simulated Years")%>%
layout(title = "June 1st Storage Levels that Exceed Severe Storage Level (340,000 Acre-Feet)",
xaxis = list(title ="Demand (Acre-Feet)"),
yaxis = list(title = "Inflows (Acre-Feet)"))
p
#Extreme Demand Level
z=Data$ExtremeStorageR
p <- plot_ly(
x = x,
y = y,
z = z, type = "contour",colors = c("red","white","snow"),autocontour = F,contours = list(
start = 0,end = 1 , size =1))%>%
colorbar(title = "Fraction of\n Simulated Years")%>%
layout(title = "June 1st Storage Levels that Exceed Extreme Storage Level (280,000 Acre-Feet)",
xaxis = list(title ="Demand (Acre-Feet)"),
yaxis = list(title = "Inflows (Acre-Feet)"))
p
#Extreme Demand Level
z=Data$ExtPercent
p <- plot_ly(
x = x,
y = y,
z = z, type = "contour",colors = c("red","white","snow"),autocontour = F,contours = list(
start = 0,end = 1 , size =1))%>%
colorbar(title = "Fraction of\n Simulated Years")%>%
layout(title = "June 1st Storage Levels that Exceed Extreme Storage Level (280,000 Acre-Feet)",
xaxis = list(title ="Demand (Acre-Feet)"),
yaxis = list(title = "Inflows (Acre-Feet)"))
p
p <- plot_ly(
x = x,
y = y,
z = z, type = "contour",colors = c("red","white","snow"),autocontour = F,contours = list(
start = 0,end = 100 , size =1))%>%
colorbar(title = "Fraction of\n Simulated Years")%>%
layout(title = "June 1st Storage Levels that Exceed Extreme Storage Level (280,000 Acre-Feet)",
xaxis = list(title ="Demand (Acre-Feet)"),
yaxis = list(title = "Inflows (Acre-Feet)"))
p
# Moderate Demand Level
z=Data$ModPercent
p <- plot_ly(
x = x,
y = y,
z = z , type = "contour",colors = c("yellow","white","snow"),autocontour = F,contours = list(
start = 0,end = 100 , size =1))%>%
colorbar(title = "Fraction of\n Simulated Years")%>%
layout(title = "June 1st Storage Levels Reliability
Moderate Storage Level (380,000 Acre-Feet)",
xaxis = list(title ="Demand (Acre-Feet/Year)"),
yaxis = list(title = "Inflows (Acre-Feet/Year)"))
p
#Severe Demand Level
z=Data$SevPercent
p <- plot_ly(
x = x,
y = y,
z = z, type = "contour",colors = c("orange","white","snow"),autocontour = F,contours = list(
start = 0,end = 100 , size =1))%>%
colorbar(title = "Fraction of\n Simulated Years")%>%
layout(title = "June 1st Storage Levels Reliability
Severe Storage Level (340,000 Acre-Feet)",
xaxis = list(title ="Demand (Acre-Feet/Year)"),
yaxis = list(title = "Inflows (Acre-Feet/Year)"))
p
#Extreme Demand Level
z=Data$ExtPercent
p <- plot_ly(
x = x,
y = y,
z = z, type = "contour",colors = c("red","white","snow"),autocontour = F,contours = list(
start = 0,end = 100 , size =1))%>%
colorbar(title = "Fraction of\n Simulated Years")%>%
layout(title = "June 1st Storage Levels Reliability
Extreme Storage Level (280,000 Acre-Feet)",
xaxis = list(title ="Demand (Acre-Feet/Year)"),
yaxis = list(title = "Inflows (Acre-Feet/Year)"))
p
=======
start = 0,end = 100 , size =1))%>%
colorbar(title = "Fraction of\n Simulated Years")%>%
layout(title = "June 1st Storage Levels Reliability
Severe Storage Level (340,000 Acre-Feet)",
xaxis = list(title ="Demand (Acre-Feet/Year)"),
yaxis = list(title = "Inflows (Acre-Feet/Year)"))
p
#Extreme Demand Level
z=Data$ExtPercent
p <- plot_ly(
x = x,
y = y,
z = z, type = "contour",colors = c("red","white","snow"),autocontour = F,contours = list(
start = 0,end = 100 , size =1))%>%
colorbar(title = "Fraction of\n Simulated Years")%>%
layout(title = "June 1st Storage Levels Reliability
Extreme Storage Level (280,000 Acre-Feet)",
xaxis = list(title ="Demand (Acre-Feet/Year)"),
yaxis = list(title = "Inflows (Acre-Feet/Year)"))
p
### Clear any existing data or functions.
rm(list=ls())
library("dplyr", lib.loc="~/R/win-library/3.5")
#Record the current directory (0 - Code) for later recall
startWD <- getwd()
# Set to 1 to use Jacob's paths, otherwise for David's
nUseJacob <- 0
#Store the current code directory so we can later return to it (0 - Code)
#fCodeDir <- getwd()
### Load the package or install if not present
if (!require("RColorBrewer")) {
install.packages("RColorBrewer")
library(RColorBrewer)
}
library(readr)
#install.packages("reshape")
library(reshape) #For Melt
library(lubridate) #For month
library(plotly) # For Plots
library(data.table)
library(dplyr)
####-----------------------------Trace Notation--------------------------------------------------
# Build names of folders output by RiverSmart
TraceNumber <- 6
TraceNumber1 <-6
TraceNumber2 <-3
Tot_TraceNum <- TraceNumber*TraceNumber1*TraceNumber2
Trace_Notation <-c(1:Tot_TraceNum)
i=1
for(TTTNum in 1:TraceNumber){
for(TTNum in 1:TraceNumber1){
for(TNum in 1:TraceNumber2){
TraceDirectory <- paste0(",Trace",TNum)
TraceNum1<- paste0(",Trace",TTNum)
TraceDirectory <- paste0(TraceNum1,TraceDirectory)
TraceNum2 <- paste0("Trace",TTTNum)
TraceDirectory <- paste0(TraceNum2,TraceDirectory)
Trace_Notation[i] <-  TraceDirectory
i=i+1
}
}
}
Trace_Notation_AllData<- rep(Trace_Notation,359)
if (nUseJacob ==1){
setwd("C:/Users/Jacob/Desktop/WeberBasinVulnerability-DER-Edits/WeberBasinVulnerability-DER-Edits/1 - Scenario Processing/Annual Service Area Demand Scenarios/Output")
} else {
setwd("../1 - Scenario Processing/Annual Service Area Demand Scenarios/Output")
}
Tot_Annual_Demand <- read.csv("SumMIandAG.csv")
Tot_Demand <- data.frame(c(1:108))
i=1
j=1
while (i<=6) {
Tot_Demand[j:(j+17),] <- rep(Tot_Annual_Demand[i,2],(18))
i=i+1
j=j+18
}
#View(Tot_Demand)
colnames(Tot_Demand) <- "Demand"
rownames(Tot_Demand) <- Trace_Notation
Tot_Mnthly_Demand<-data.frame(rep(Tot_Demand$Demand,359))
colnames(Tot_Mnthly_Demand) <- "Demand"
#Move into the local input directory
if (nUseJacob != 1) {
setwd(startWD)
setwd("../2 - RiverWare Modeling/Scenario")
} else {
# Switch into local directory
setwd("~/GitHub/WeberBasinVulnerability/WeberBasinVulnerability/2 - RiverWare Modeling/Scenario")
}
#Input Monthly data from RiverSmart Analysis
Tot_Mnthly_Inflow <-read.csv("Trace1,Trace1,Trace1/Total Inflows.csv")
i=1
for(TTTNum in 1:TraceNumber){
for(TTNum in 1:TraceNumber1){
for(TNum in 1:TraceNumber2){
TraceDirectory <- paste0(",Trace",TNum)
TraceDirectory <-paste0 (TraceDirectory,"/Total Inflows.csv")
TraceNum1<- paste0(",Trace",TTNum)
TraceDirectory <- paste0(TraceNum1,TraceDirectory)
TraceNum2 <- paste0("Trace",TTTNum)
TraceDirectory <- paste0(TraceNum2,TraceDirectory)
Location <- TraceDirectory
Temp_Storage <- read.csv(Location)
Tot_Mnthly_Inflow[,i] <- Temp_Storage[,5]
colnames(Tot_Mnthly_Inflow)[i] <-  TraceDirectory
i=i+1
}
}
}
Tot_Mnthly_Inflow <- data.frame(Tot_Mnthly_Inflow)
Months <- rep(c(1:12),31)
Months<- Months[(11:369)]
Tot_Mnthly_Inflow$Months <- Months
#Create Years
Years <- c(0:372)
i=1
j=1
while (j<=31) {
Years[(i:(i+11))] <- rep((j-1),12)
i=i+12
j=j+1
}
Years<- Years[(11:369)]
#Add months and Years column
#Tot_Mnthly_Inflow$Months <-Months
Tot_Mnthly_Inflow$Years <- Years
#Add a Water year - The water year is designated by the calendar year in which it ends, so the 2010 water year (USGS) started on October 1, 2009 and ended on September 30, 2010
Tot_Mnthly_Inflow$WaterYear <- ifelse(Tot_Mnthly_Inflow$Months>= 10,Tot_Mnthly_Inflow$Years + 1, Tot_Mnthly_Inflow$Years)
WaterYear<-ifelse(Tot_Mnthly_Inflow$Months>= 10,Tot_Mnthly_Inflow$Years + 1, Tot_Mnthly_Inflow$Years)
#Transpose Data
Tot_Mnthly_Inflow_Transposed <- t(Tot_Mnthly_Inflow)
Tot_Mnthly_Inflow_Transposed <- data.frame(Tot_Mnthly_Inflow_Transposed)
#View(Tot_Mnthly_Inflow_Transposed)
#Stack Columns
Tot_Mnthly_Inflow_Stacked <- stack(Tot_Mnthly_Inflow_Transposed[1:108,1:359])
Tot_Mnthly_Inflow <- Tot_Mnthly_Inflow_Stacked$values
##Total Sedimentation Changes on Reservoir
if (nUseJacob == 1) {
setwd("~/GitHub/WeberBasinVulnerability/WeberBasinVulnerability/3 - Post Processing")
} else {
#Move back to code directory
setwd(startWD)
#Move into the local input directory
setwd("../3 - Post Processing")
}
Tot_Sed <- read.csv("Sedimentation.csv")
Tot_Sed <- Tot_Sed[,2]
Tot_Mnthly_Sed <- rep(Tot_Sed,359)
#### Time Columns: Mnths, Years and Water Years #####
Mnths<-c(1:38772)
i=1
j=1
while (i<=359) {
Mnths[j:(i*108)]<-Months[i]
i=i+1
j=j+108
}
Yrs<-c(1:38772)
i=1
j=1
while (i<=359) {
Yrs[j:(i*108)]<-Years[i]
i=i+1
j=j+108
}
Wtr_Yrs<-c(1:38772)
i=1
j=1
while (i<=359) {
Wtr_Yrs[j:(i*108)]<-WaterYear[i]
i=i+1
j=j+108
}
##################   Compile Mnthly Input data    ##################################
#Create Data Frame
Inputs<- data.frame(Tot_Mnthly_Demand)
Inputs$Inflow <- Tot_Mnthly_Inflow
Inputs$Sedimentation <- Tot_Mnthly_Sed
Inputs$Trace_Notation <- Trace_Notation
Inputs$Month<-Mnths
Inputs$Years<-Yrs
Inputs$WaterYear<-Wtr_Yrs
#Number
Inputs$Number<-c(1:38772)
Inputs <- data.frame(Inputs)
##################################  - 2 - Output data ########################################################
if (nUseJacob==1) {
setwd("~/GitHub/WeberBasinVulnerability/WeberBasinVulnerability/2 - RiverWare Modeling/Scenario")
} else {
setwd(startWD)
setwd("../2 - RiverWare Modeling/Scenario")
}
Tot_Mnthly_Stor <- read.csv("Trace1,Trace1,Trace1/Total Storage_NO EVAP.csv")
Tot_Mnthly_Short <-read.csv("Trace1,Trace1,Trace1/Total Shortages.csv")
##### Total Storage #####
i=1
for(TTTNum in 1:TraceNumber){
for(TTNum in 1:TraceNumber1){
for(TNum in 1:TraceNumber2){
TraceDirectory <- paste0(",Trace",TNum)
TraceDirectory <-paste0 (TraceDirectory,"/Total Storage_NO EVAP.csv")
TraceNum1<- paste0(",Trace",TTNum)
TraceDirectory <- paste0(TraceNum1,TraceDirectory)
TraceNum2 <- paste0("Trace",TTTNum)
TraceDirectory <- paste0(TraceNum2,TraceDirectory)
Location <- TraceDirectory
Temp_Storage <- read.csv(Location)
Tot_Mnthly_Stor[,i] <- Temp_Storage[,5]
colnames(Tot_Mnthly_Stor)[i] <-  TraceDirectory
i=i+1
}
}
}
Tot_Mnthly_Stor <- data.frame(Tot_Mnthly_Stor)
#Transpose Data
Tot_Mnthly_Stor_Transposed <- t(Tot_Mnthly_Stor)
Tot_Mnthly_Stor_Transposed <- data.frame(Tot_Mnthly_Stor_Transposed)
#View(Tot_Mnthly_Inflow_Transposed)
#Stack Columns
Tot_Mnthly_Stor_Stacked <- stack(Tot_Mnthly_Stor_Transposed[1:108,1:359])
Tot_Mnthly_Stor <- Tot_Mnthly_Stor_Stacked$values
Tot_Mnthly_Stor <- data.frame(Tot_Mnthly_Stor)
##### Total Shortages #####
i=1
for(TTTNum in 1:TraceNumber){
for(TTNum in 1:TraceNumber1){
for(TNum in 1:TraceNumber2){
TraceDirectory <- paste0(",Trace",TNum)
TraceDirectory <-paste0 (TraceDirectory,"/Total Shortages.csv")
TraceNum1<- paste0(",Trace",TTNum)
TraceDirectory <- paste0(TraceNum1,TraceDirectory)
TraceNum2 <- paste0("Trace",TTTNum)
TraceDirectory <- paste0(TraceNum2,TraceDirectory)
Location <- TraceDirectory
Temp_Storage <- read.csv(Location)
Tot_Mnthly_Short[,i] <- Temp_Storage[,5]
colnames(Tot_Mnthly_Short)[i] <-  TraceDirectory
i=i+1
}
}
}
Tot_Mnthly_Short <- data.frame(Tot_Mnthly_Short)
#Transpose Data
Tot_Mnthly_Short_Transposed <- t(Tot_Mnthly_Short)
Tot_Mnthly_Short_Transposed <- data.frame(Tot_Mnthly_Short_Transposed)
#View(Tot_Mnthly_Inflow_Transposed)
#Stack Columns
Tot_Mnthly_Short_Stacked <- stack(Tot_Mnthly_Short_Transposed[1:108,1:359])
Tot_Mnthly_Short <- Tot_Mnthly_Short_Stacked$values
########################   Compile Output data   ###############################
Outputs <- Tot_Mnthly_Stor
Outputs$Shortage <- Tot_Mnthly_Short
# Add Trace Notation
#Outputs$Trace_Notation <-Trace_Notation
#Number
Outputs$Number<-c(1:38772)
Outputs<-data.frame(Outputs)
#########################  Merge  ---- AllData Dataframe########################
AllDataDF <- merge(Inputs,Outputs,by="Number")
AllData_MonthlyDF <- AllDataDF
#From Monthly Streamflows to Annual Streamflows
Annual_Inflows <-AllDataDF %>%
group_by(WaterYear,Trace_Notation) %>%
summarise_all(funs(sum(Inflow)))
Avg_Annual_Inflows <- Annual_Inflows %>%
group_by(Trace_Notation) %>%
summarise_all(funs(mean(Inflow)))
Avg_Annual_Inflow<-data.frame(Avg_Annual_Inflows$Inflow)
colnames(Avg_Annual_Inflow)<-"Annual Avg Inflow"
Avg_Annual_Inflow$Trace_Notation <-Trace_Notation
colnames(Avg_Annual_Inflow)[2]<-"Trace_Notation"
#Repeat Calculation from monthly shortage to total annual shortage by water year
Annual_Shortage <-AllDataDF %>%
group_by(WaterYear,Trace_Notation) %>%
summarise_all(funs(sum(Shortage)))
Avg_Annual_Shortage <- Annual_Shortage %>%
group_by(Trace_Notation) %>%
summarise_all(funs(mean(Shortage)))
Avg_Annual_Shortage<-data.frame(Avg_Annual_Shortage$Shortage)
colnames(Avg_Annual_Shortage)<-"Annual Avg Shortage"
Avg_Annual_Shortage$Trace_Notation <- Trace_Notation
colnames(Avg_Annual_Shortage)[2]<-"Trace_Notation"
AllData <- full_join(AllDataDF,Avg_Annual_Inflow,by="Trace_Notation")
AllData <- full_join(AllData,Avg_Annual_Shortage,by ="Trace_Notation")
# Define reservoir levels as arrays: Moderate -> Severe -> Extreme
cStoreNames <- c("Moderate", "Severe", "Extreme")
cStorLevels <- c(380000,340000,280000)
cColors <- c("Yellow", "Orange", "Red")
ModerateLevel<- 380000
SevereLevel <- 340000
ExtremeLevel<-280000
#Calculate the number of storage levels
nLevels <- length(cStorLevels)
#Pull out the monthly storage values
#Storage_Metrics <- data.frame(Data$Tot_Mnthly_Stor)
Storage_Metrics <- data.frame(AllData[,c("Month","Tot_Mnthly_Stor")])
#Create more duplicate columns
Storage_Metrics <- cbind(Storage_Metrics, replicate(nLevels-1,Storage_Metrics$Tot_Mnthly_Stor))
#Rename the columns
colnames(Storage_Metrics)[2:(nLevels+1)] <- cStoreNames
#Record the last data column
cLastDataCol <- ncol(AllData)
#Loop through columns. In each column convert the storage values to a binary: 1 if greater or equal to target. 0 if below
for (i in 1:nLevels) {
#Is the storage criteria met?
Storage_Metrics[,1+i] <- ifelse(Storage_Metrics[,1+i] > cStorLevels[i],1,0)
#Save the result back to the Data datafrom
AllData[,cLastDataCol + i] <- Storage_Metrics[,1+i]
#Rename the column
colnames(AllData)[cLastDataCol +i] <- cStoreNames[i]
}
cRelColNames <- paste0("Rel", cStoreNames)
#Calculate the average (fraction) for each combination of traces for each column. This represents
#the reliability
dfStorageReliability <-AllData[,c("Trace_Notation","Month",cStoreNames)] %>%
filter(Month == 6) %>%  #Filter on the June month because that is when we care about storage at criteria
group_by(Trace_Notation) %>%
summarise_all(funs(mean))
#Multiply by 100 to get a percent
dfStorageReliability[,cStoreNames] <- dfStorageReliability[,cStoreNames]*100
##### Join the Reservoir storage reliability back with the big data set
AllDataFull <-left_join(AllData,dfStorageReliability, by ='Trace_Notation')
# Filter down to a sedimentation scenario and month
PlotData <- filter(AllDataFull,Month.x==6,WaterYear==1,Sedimentation==0)
#Select Data frame to do Calculation on.
Data<- Data_NoSed
Data_NoSed <- filter(Data_J1,Sedimentation==0)
Data_NoSed <- filter(Data1,Sedimentation==0)
Data_NoSed <- filter(Data,Sedimentation==0)
Data_NoSed <- filter(AllData,Sedimentation==0)
#Select Data frame to do Calculation on.
Data<- Data_NoSed
Data <- PlotData
##################################################################################################
###PLOTS###
##################################################################################################
library(plotly)
#Axis assignment
x=Data$Demand
y=Data$`Annual Avg Inflow`
if (nUseJacob) {
setwd("~/GitHub/WeberBasinVulnerability/WeberBasinVulnerability/3 - Post Processing/Output")
} else {
setwd(startWD)
setwd("../3 - Post Processing/Output")
}
# Loop over the storage level criteria to create plots
cColStart <- 17
# Find the minimum reliability to use in the plot
minRel <- min(Data[,cColStart:(cColStart+nLevels-1)])
for (i in 1:nLevels) {
z=Data[,cColStart + i - 1]  #$Moderate.y
tTitle <- paste("Reliability to Meet June 1st ",cStoreNames[i]," Storage Target\n(",format(as.numeric(cStorLevels[i]),big.mark=",")," acre-feet)", sep="")
p <- plot_ly(
x = x,
y = y,
z = z , type = "contour",colors = c(cColors[i],"white","snow"),autocontour = T,contours = list(
showlabels = TRUE, start = minRel,end = 100 , size =2)) %>%  #CAN'T GET Contour LABELS to SHOW
colorbar(title = "Percent of\n Simulated Years")%>%
layout(title = tTitle,
xaxis = list(title ="Demand (Acre-Feet/Year)"),
yaxis = list(title = "Inflows (Acre-Feet/Year)"))  # Weber at Oakley Flow ???
p
}
### DER - Plot attempt in ggPlot to see if get better control
# Specify the contour intervals (days to reach target)
#Install the required packages
xPackages <- c("ggplot2","RColorBrewer","metR", "stringr", "directlabels")
require(xPackages)
lapply(xPackages,require, character.only = TRUE)
lapply(xPackages,library, character.only = TRUE)
cContourIntervals <- seq(80,100, by=2)
for (i in 1:nLevels) {
i <- 3
z=Data[,cColStart + i - 1]
pContour <- ggplot()  +
theme_bw() +
xlab("Demand\n(Thousand Acre-Feet/Year)") +
ylab("Inflows\n(Thousand Acre-Feet/Year)") +
stat_contour(data = Data, aes(x = Demand/100000, y = `Annual Avg Inflow`/100000, z = z, colour = ..level..), size=1.5, breaks=cContourIntervals) +
scale_color_gradient(name="Percent of Simulated\nYears", low=cColors[i], high="White") +
theme(text = element_text(size=18), legend.text=element_text(size=18)) +
#Overplot the actual data points as black circles (points)
geom_point(data = Data, aes(x = Demand/100000, y = `Annual Avg Inflow`/100000), shape = 1, size = 3, stroke = 2.5, color = "Black")
direct.label(pContour, "angled.boxes")
}
#  autocontour = F,contours = list(
#    start = 280000,
#    end = 380000,
#    size = 50000
#  ))%>%
#  layout(title = "Storage by Color",
#         xaxis = list(title ="Demand"),
#         yaxis = list(title = "Inflows"))
#p
############ End of June 1 code##########
setwd(startWD)
>>>>>>> Stashed changes
