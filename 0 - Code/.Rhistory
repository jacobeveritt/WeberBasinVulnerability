#  y = J1DataDF$Inflows,
# z = J1DataDF$Storage, type = "contour",contours = list(start = 0,
#                                                   end = 11000,
#                                                  size = 100))%>%
#  colorbar(title = "Shortage Level")%>%
# layout(title = "June 1st Shortages by Color",
#       xaxis = list(title ="Demand"),
#      yaxis = list(title = "Inflows"))
#p
###########################################################################################################
#################### Reliability  Metric for Storage ########################
#  -- Metrics based on WBWCD - Drought Contigency Plan Drought Levels --  #
# See Table 3-2 : Hot/Dry Projected Drought for Drought Levels
# Moderate Total Basin Storage Drought Level 340K to 380K -- Yellow  ("Less than 380K")
# Severe Total Basin Storage Drought Level 280K to 340K -- Orange    ("Less than 340K")
# Extreme Total Basin Storage Drought Level less than 280K -- Red    ("Less than 280K")
ModerateLevel<- 380000
SevereLevel <- 340000
ExtremeLevel<-280000
Storage_Metrics <- data.frame(Data$Storage)
Storage_Rel_Metrics_Moderate <- data.frame(Data$Storage)
Storage_Rel_Metrics_Severe <- data.frame(Data$Storage)
Storage_Rel_Metrics_Extreme <- data.frame(Data$Storage)
#View(Stor_Metrics)
#Moderate
i=1
while (i<=1080) {
Storage_Rel_Metrics_Moderate[i,] <- ifelse(Data[i,6]>ModerateLevel,1,0)
i=i+1
}
#Severe
i=1
while (i<=1080) {
Storage_Rel_Metrics_Severe[i,] <- ifelse(Data[i,6]>SevereLevel,1,0)
i=i+1
}
#Extreme
i=1
while (i<=1080) {
Storage_Rel_Metrics_Extreme[i,] <- ifelse(Data[i,6]>ExtremeLevel,1,0)
i=i+1
}
#input Metrics into Data Dataframe
Data$ModerateStorageR <-Storage_Rel_Metrics_Moderate
Data$SevereStorageR <- Storage_Rel_Metrics_Severe
Data$ExtremStorageR<- Storage_Rel_Metrics_Extreme
## Calculate Reliability #####  ##Errors in code ###
Stor_Rel_Moderate <- data.frame(1:36)
Stor_Rel_Severe <- data.frame(c(1:36))
Stor_Rel_Extreme <- data.frame(1:36)
#filter(Data,Trace_Notation==TraceDirectory[i])
#i=1
#while (i<=36) {
# Trace_Notation[i]
# tempfileA<- filter(Data,Trace_Notation.x == (Trace_Notation[i]))
#Stor_Rel_Moderate[i]<-sum(tempfileA$ModerateStorageR)
#Stor_Rel_Severe[i]<-sum(tempfileA$SevereStorageR)
#Stor_Rel_Extreme[i]<-sum(tempfileA$ExtremStorageR)
#i=i+1
#}
i=1
while (i<=3240) {
Stor_Rel_Moderate[(i:(i+29)),] <- rep(round(sum((Storage_Rel_Metrics_Moderate[(i:(i+29)),]/30)*100),1),30)
i=i+30
}
i=1
while (i<=3240) {
Stor_Rel_Severe[(i:(i+29)),] <- rep(round(sum((Storage_Rel_Metrics_Severe[(i:(i+29)),]/30)*100),1),30)
i=i+30
}
i=1
while (i<=3240) {
Stor_Rel_Extreme[(i:(i+29)),] <- rep(round(sum((Storage_Rel_Metrics_Extreme[(i:(i+29)),]/30)*100),1),30)
i=i+30
}
#Axis assignment
x=Data$Demand
y=Data$Inflow
#setwd("~/GitHub/WeberBasinVulnerability/WeberBasinVulnerability/3 - Post Processing/Output")
setwd(startWD)
setwd("../3 - Post Processing/Output")
# Moderate Demand Level
z=Data$ModerateStorageR
p <- plot_ly(
x = x,
y = y$Inflow,
z = z$Data.Storage , type = "contour")%>%
colorbar(title = "Fraction of\n Simulated Years")%>%
layout(title = "June 1st Storage Levels that Exceed Moderate Storage Level (380,000 Acre-Feet)",
xaxis = list(title ="Demand (Acre-Feet)"),
yaxis = list(title = "Inflows (Acre-Feet)"))
p
plotly_IMAGE(p, format = "png", out_file = "Moderate Storage Reliability Plot.png")
#Severe Demand Level
z=Data$SevereStorageR
p <- plot_ly(
x = x,
y = y$Inflow,
z = z$Data.Storage, type = "contour")%>%
colorbar(title = "Fraction of\n Simulated Years")%>%
layout(title = "June 1st Storage Levels that Exceed Severe Storage Level (340,000 Acre-Feet)",
xaxis = list(title ="Demand (Acre-Feet)"),
yaxis = list(title = "Inflows (Acre-Feet)"))
p
plotly_IMAGE(p, format = "png", out_file = "Severe Storage Reliability Plot.png")
#Extreme Demand Level
z=Data$ExtremStorageR
p <- plot_ly(
x = x,
y = y$Inflow,
z = z$Data.Storage , type = "contour")%>%
colorbar(title = "Fraction of\n Simulated Years")%>%
layout(title = "June 1st Storage Levels that Exceed Extreme Storage Level (280,000 Acre-Feet)",
xaxis = list(title ="Demand (Acre-Feet)"),
yaxis = list(title = "Inflows (Acre-Feet)"))
p
plotly_IMAGE(p, format = "png", out_file = "Extreme Storage Reliability Plot.png")
############ Storage Contours based on Moderate, Severe and Extreme Storage Drought Levels  #############################
#Storage
#z=Data$Storage
#p <- plot_ly(
# x = x$Data.Demand,
#  y = y$Data.Inflow,
#  z =z , type = "contour",
#  colors = c("red","orange","yellow","white"),
#  #contours = list(coloring = 'heatmap'),
#  autocontour = F,contours = list(
#    start = 280000,
#    end = 380000,
#    size = 50000
#  ))%>%
#  layout(title = "Storage by Color",
#         xaxis = list(title ="Demand"),
#         yaxis = list(title = "Inflows"))
#p
############ End of June 1 code##########
setwd(startWD)
View(Tot_Demand_AllData)
View(Tot_Demand)
View(Tot_Annual_Demand)
View(Tot_Mnthly_Inflow)
View(Tot_Mnthly_Inflow)
View(Tot_Mnthly_Short)
View(Tot_Mnthly_Stor)
Tot_Monthly_Inflow$WaterYear <- Tot_Monthly_Inflow$Years
for(i in 1:nrow(Tot_Monthly_Inflow)) {
if(Tot_Monthly_Inflow$Months[i] >= 10) {
Tot_Monthly_Inflow$WaterYear[i] <- Tot_Monthly_Inflow$Years[i] + 1
}
}
Tot_Mnthly_Inflow$WaterYear <- Tot_Mnthly_Inflow$Years
for(i in 1:nrow(Tot_Mnthly_Inflow)) {
if(Tot_Mnthly_Inflow$Months[i] >= 10) {
Tot_Mnthly_Inflow$WaterYear[i] <- Tot_Mnthly_Inflow$Years[i] + 1
}
}
Tot_Mnthly_Inflow$WaterYear <- Tot_Mnthly_Inflow$Years
Tot_Mnthly_Inflow$WaterYear <- Tot_Mnthly_Inflow$Years
for(i in 1:nrow(Tot_Mnthly_Inflow)) {
if(Tot_Mnthly_Inflow$Months[i] >= 10) {
Tot_Mnthly_Inflow$WaterYear[i] <- Tot_Mnthly_Inflow$Years[i] + 1
}
}
Tot_Mnthly_Inflow$WaterYear <- ifelse(Tot_Mnthly_Inflow$Months>= 10,Tot_Mnthly_Inflow$Years + 1, Tot_Mnthly_Inflow$Years)
rm(list=ls())
library("dplyr", lib.loc="~/R/win-library/3.5")
#Record the current directory (0 - Code) for later recall
startWD <- getwd()
###Total Storage Compilation#--------------------------------------------------------------------------------#
#Store the current code directory so we can later return to it (0 - Code)
#fCodeDir <- getwd()
### Load the package or install if not present
if (!require("RColorBrewer")) {
install.packages("RColorBrewer")
library(RColorBrewer)
}
library(readr)
#install.packages("reshape")
library(reshape) #For Melt
library(lubridate) #For month
library(plotly) # For Plots
library(data.table)
library(dplyr)
####-----------------------------Trace Notation--------------------------------------------------
# Build names of folders output by RiverSmart
TraceNumber <- 6
TraceNumber1 <-6
TraceNumber2 <-3
Tot_TraceNum <- TraceNumber*TraceNumber1*TraceNumber2
Trace_Notation <-c(1:Tot_TraceNum)
i=1
for(TTTNum in 1:TraceNumber){
for(TTNum in 1:TraceNumber1){
for(TNum in 1:TraceNumber2){
TraceDirectory <- paste0(",Trace",TNum)
TraceNum1<- paste0(",Trace",TTNum)
TraceDirectory <- paste0(TraceNum1,TraceDirectory)
TraceNum2 <- paste0("Trace",TTTNum)
TraceDirectory <- paste0(TraceNum2,TraceDirectory)
Trace_Notation[i] <-  TraceDirectory
i=i+1
}
}
}
Trace_Notation_AllData<- rep(Trace_Notation,30)
#View(Trace_Notation_AllData)
##################################  - 1 - Input data ########################################################
######## - A -   Compiling Annual Demands  ########
#setwd("C:/Users/Jacob/Desktop/WeberBasinVulnerability-DER-Edits/WeberBasinVulnerability-DER-Edits/1 - Scenario Processing/Annual Service Area Demand Scenarios/Output")
setwd("../1 - Scenario Processing/Annual Service Area Demand Scenarios/Output")
Tot_Annual_Demand <- read.csv("SumMIandAG.csv")
Tot_Demand <- data.frame(c(1:108))
i=1
j=1
while (i<=6) {
Tot_Demand[j:(j+17),] <- rep(Tot_Annual_Demand[i,2],(18))
i=i+1
j=j+18
}
#View(Tot_Demand)
colnames(Tot_Demand) <- "Tot Demand"
rownames(Tot_Demand) <- Trace_Notation
Tot_Demand <- data.frame(Tot_Demand)
Tot_Demand_AllData<-rep(Tot_Demand$Tot.Demand,30)
Tot_Demand_AllData<-data.frame(Tot_Demand_AllData)
colnames(Tot_Demand_AllData)<-"Demand"
#View(Tot_Demand)
######## - B -  Monthly Inflows to June1 Data  ########
#Move into the local input directory
setwd(startWD)
setwd("../2 - RiverWare Modeling/Scenario")
# Switch into local directory
#setwd("~/GitHub/WeberBasinVulnerability/WeberBasinVulnerability/2 - RiverWare Modeling/Scenario")
#Input Monthly data from RiverSmart Analysis
Tot_Mnthly_Inflow <-read.csv("Trace1,Trace1,Trace1/Total Inflows.csv")
i=1
for(TTTNum in 1:TraceNumber){
for(TTNum in 1:TraceNumber1){
for(TNum in 1:TraceNumber2){
TraceDirectory <- paste0(",Trace",TNum)
TraceDirectory <-paste0 (TraceDirectory,"/Total Inflows.csv")
TraceNum1<- paste0(",Trace",TTNum)
TraceDirectory <- paste0(TraceNum1,TraceDirectory)
TraceNum2 <- paste0("Trace",TTTNum)
TraceDirectory <- paste0(TraceNum2,TraceDirectory)
Location <- TraceDirectory
Temp_Storage <- read.csv(Location)
Tot_Mnthly_Inflow[,i] <- Temp_Storage[,5]
colnames(Tot_Mnthly_Inflow)[i] <-  TraceDirectory
i=i+1
}
}
}
Tot_Mnthly_Inflow <- data.frame(Tot_Mnthly_Inflow)
#View(Tot_Mnthly_Inflow)
#add Date column
#Date <- seq.Date(as.Date("0000/11/30"),by ="month",length=359)
#Months <- rep(c(1:12),31)
#Months<- Months[(11:369)]
#Create Years
Years <- c(0:372)
i=1
j=1
while (j<=31) {
Years[(i:(i+11))] <- rep((j-1),12)
i=i+12
j=j+1
}
Years<- Years[(11:369)]
#Add months and Years column
#Tot_Mnthly_Inflow$Months <-Months
Tot_Mnthly_Inflow$Years <- Years
rm(list=ls())
library("dplyr", lib.loc="~/R/win-library/3.5")
#Record the current directory (0 - Code) for later recall
startWD <- getwd()
###Total Storage Compilation#--------------------------------------------------------------------------------#
#Store the current code directory so we can later return to it (0 - Code)
#fCodeDir <- getwd()
### Load the package or install if not present
if (!require("RColorBrewer")) {
install.packages("RColorBrewer")
library(RColorBrewer)
}
library(readr)
#install.packages("reshape")
library(reshape) #For Melt
library(lubridate) #For month
library(plotly) # For Plots
library(data.table)
library(dplyr)
####-----------------------------Trace Notation--------------------------------------------------
# Build names of folders output by RiverSmart
TraceNumber <- 6
TraceNumber1 <-6
TraceNumber2 <-3
Tot_TraceNum <- TraceNumber*TraceNumber1*TraceNumber2
Trace_Notation <-c(1:Tot_TraceNum)
i=1
for(TTTNum in 1:TraceNumber){
for(TTNum in 1:TraceNumber1){
for(TNum in 1:TraceNumber2){
TraceDirectory <- paste0(",Trace",TNum)
TraceNum1<- paste0(",Trace",TTNum)
TraceDirectory <- paste0(TraceNum1,TraceDirectory)
TraceNum2 <- paste0("Trace",TTTNum)
TraceDirectory <- paste0(TraceNum2,TraceDirectory)
Trace_Notation[i] <-  TraceDirectory
i=i+1
}
}
}
Trace_Notation_AllData<- rep(Trace_Notation,30)
#View(Trace_Notation_AllData)
##################################  - 1 - Input data ########################################################
######## - A -   Compiling Annual Demands  ########
#setwd("C:/Users/Jacob/Desktop/WeberBasinVulnerability-DER-Edits/WeberBasinVulnerability-DER-Edits/1 - Scenario Processing/Annual Service Area Demand Scenarios/Output")
setwd("../1 - Scenario Processing/Annual Service Area Demand Scenarios/Output")
Tot_Annual_Demand <- read.csv("SumMIandAG.csv")
Tot_Demand <- data.frame(c(1:108))
i=1
j=1
while (i<=6) {
Tot_Demand[j:(j+17),] <- rep(Tot_Annual_Demand[i,2],(18))
i=i+1
j=j+18
}
#View(Tot_Demand)
colnames(Tot_Demand) <- "Tot Demand"
rownames(Tot_Demand) <- Trace_Notation
Tot_Demand <- data.frame(Tot_Demand)
Tot_Demand_AllData<-rep(Tot_Demand$Tot.Demand,30)
Tot_Demand_AllData<-data.frame(Tot_Demand_AllData)
colnames(Tot_Demand_AllData)<-"Demand"
#View(Tot_Demand)
######## - B -  Monthly Inflows to June1 Data  ########
#Move into the local input directory
setwd(startWD)
setwd("../2 - RiverWare Modeling/Scenario")
# Switch into local directory
#setwd("~/GitHub/WeberBasinVulnerability/WeberBasinVulnerability/2 - RiverWare Modeling/Scenario")
#Input Monthly data from RiverSmart Analysis
Tot_Mnthly_Inflow <-read.csv("Trace1,Trace1,Trace1/Total Inflows.csv")
i=1
for(TTTNum in 1:TraceNumber){
for(TTNum in 1:TraceNumber1){
for(TNum in 1:TraceNumber2){
TraceDirectory <- paste0(",Trace",TNum)
TraceDirectory <-paste0 (TraceDirectory,"/Total Inflows.csv")
TraceNum1<- paste0(",Trace",TTNum)
TraceDirectory <- paste0(TraceNum1,TraceDirectory)
TraceNum2 <- paste0("Trace",TTTNum)
TraceDirectory <- paste0(TraceNum2,TraceDirectory)
Location <- TraceDirectory
Temp_Storage <- read.csv(Location)
Tot_Mnthly_Inflow[,i] <- Temp_Storage[,5]
colnames(Tot_Mnthly_Inflow)[i] <-  TraceDirectory
i=i+1
}
}
}
Tot_Mnthly_Inflow <- data.frame(Tot_Mnthly_Inflow)
#View(Tot_Mnthly_Inflow)
#add Date column
#Date <- seq.Date(as.Date("0000/11/30"),by ="month",length=359)
Months <- rep(c(1:12),31)
Months<- Months[(11:369)]
#Create Years
Years <- c(0:372)
i=1
j=1
while (j<=31) {
Years[(i:(i+11))] <- rep((j-1),12)
i=i+12
j=j+1
}
Years<- Years[(11:369)]
getwd()
startWD
setwd("../0 - Code")
setwd("../../0 - Code")
rm(list=ls())
library("dplyr", lib.loc="~/R/win-library/3.5")
#Record the current directory (0 - Code) for later recall
startWD <- getwd()
###Total Storage Compilation#--------------------------------------------------------------------------------#
#Store the current code directory so we can later return to it (0 - Code)
#fCodeDir <- getwd()
### Load the package or install if not present
if (!require("RColorBrewer")) {
install.packages("RColorBrewer")
library(RColorBrewer)
}
library(readr)
#install.packages("reshape")
library(reshape) #For Melt
library(lubridate) #For month
library(plotly) # For Plots
library(data.table)
library(dplyr)
####-----------------------------Trace Notation--------------------------------------------------
# Build names of folders output by RiverSmart
TraceNumber <- 6
TraceNumber1 <-6
TraceNumber2 <-3
Tot_TraceNum <- TraceNumber*TraceNumber1*TraceNumber2
Trace_Notation <-c(1:Tot_TraceNum)
i=1
for(TTTNum in 1:TraceNumber){
for(TTNum in 1:TraceNumber1){
for(TNum in 1:TraceNumber2){
TraceDirectory <- paste0(",Trace",TNum)
TraceNum1<- paste0(",Trace",TTNum)
TraceDirectory <- paste0(TraceNum1,TraceDirectory)
TraceNum2 <- paste0("Trace",TTTNum)
TraceDirectory <- paste0(TraceNum2,TraceDirectory)
Trace_Notation[i] <-  TraceDirectory
i=i+1
}
}
}
Trace_Notation_AllData<- rep(Trace_Notation,30)
#View(Trace_Notation_AllData)
##################################  - 1 - Input data ########################################################
######## - A -   Compiling Annual Demands  ########
#setwd("C:/Users/Jacob/Desktop/WeberBasinVulnerability-DER-Edits/WeberBasinVulnerability-DER-Edits/1 - Scenario Processing/Annual Service Area Demand Scenarios/Output")
setwd("../1 - Scenario Processing/Annual Service Area Demand Scenarios/Output")
Tot_Annual_Demand <- read.csv("SumMIandAG.csv")
Tot_Demand <- data.frame(c(1:108))
i=1
j=1
while (i<=6) {
Tot_Demand[j:(j+17),] <- rep(Tot_Annual_Demand[i,2],(18))
i=i+1
j=j+18
}
#View(Tot_Demand)
colnames(Tot_Demand) <- "Tot Demand"
rownames(Tot_Demand) <- Trace_Notation
Tot_Demand <- data.frame(Tot_Demand)
Tot_Demand_AllData<-rep(Tot_Demand$Tot.Demand,30)
Tot_Demand_AllData<-data.frame(Tot_Demand_AllData)
colnames(Tot_Demand_AllData)<-"Demand"
#View(Tot_Demand)
######## - B -  Monthly Inflows to June1 Data  ########
#Move into the local input directory
setwd(startWD)
setwd("../2 - RiverWare Modeling/Scenario")
# Switch into local directory
#setwd("~/GitHub/WeberBasinVulnerability/WeberBasinVulnerability/2 - RiverWare Modeling/Scenario")
#Input Monthly data from RiverSmart Analysis
Tot_Mnthly_Inflow <-read.csv("Trace1,Trace1,Trace1/Total Inflows.csv")
i=1
for(TTTNum in 1:TraceNumber){
for(TTNum in 1:TraceNumber1){
for(TNum in 1:TraceNumber2){
TraceDirectory <- paste0(",Trace",TNum)
TraceDirectory <-paste0 (TraceDirectory,"/Total Inflows.csv")
TraceNum1<- paste0(",Trace",TTNum)
TraceDirectory <- paste0(TraceNum1,TraceDirectory)
TraceNum2 <- paste0("Trace",TTTNum)
TraceDirectory <- paste0(TraceNum2,TraceDirectory)
Location <- TraceDirectory
Temp_Storage <- read.csv(Location)
Tot_Mnthly_Inflow[,i] <- Temp_Storage[,5]
colnames(Tot_Mnthly_Inflow)[i] <-  TraceDirectory
i=i+1
}
}
}
Tot_Mnthly_Inflow <- data.frame(Tot_Mnthly_Inflow)
#View(Tot_Mnthly_Inflow)
#add Date column
#Date <- seq.Date(as.Date("0000/11/30"),by ="month",length=359)
Months <- rep(c(1:12),31)
Months<- Months[(11:369)]
#Create Years
Years <- c(0:372)
i=1
j=1
while (j<=31) {
Years[(i:(i+11))] <- rep((j-1),12)
i=i+12
j=j+1
}
Years<- Years[(11:369)]
#Add months and Years column
#Tot_Mnthly_Inflow$Months <-Months
Tot_Mnthly_Inflow$Years <- Years
Tot_Mnthly_Inflow$Months <- Months
#Create Years
Years <- c(0:372)
i=1
j=1
while (j<=31) {
Years[(i:(i+11))] <- rep((j-1),12)
i=i+12
j=j+1
}
Years<- Years[(11:369)]
#Add months and Years column
#Tot_Mnthly_Inflow$Months <-Months
Tot_Mnthly_Inflow$Years <- Years
#Add a Water year - The water year is designated by the calendar year in which it ends, so the 2010 water year (USGS) started on October 1, 2009 and ended on September 30, 2010
Tot_Mnthly_Inflow$WaterYear <- ifelse(Tot_Mnthly_Inflow$Months>= 10,Tot_Mnthly_Inflow$Years + 1, Tot_Mnthly_Inflow$Years)
Annual_Inflows <-Tot_Mnthly_Inflow %>%
group_by(Years) %>%
summarise_all(funs(sum))
View(Annual_Inflows)
Annual_Inflows <-Tot_Mnthly_Inflow %>%
group_by(WaterYear) %>%
summarise_all(funs(sum))
