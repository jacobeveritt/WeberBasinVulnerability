# group_by(Trace_Notation) %>%
#summarise(SevPercent = mean(SevereStorageR)*100)
#View(Reliability_Data_Moderate)
# Extreme
#Reliability_Data_Extreme <-Data %>%
# group_by(Trace_Notation) %>%
#summarise(ExtPercent = mean(ExtremeStorageR)*100)
#View(Reliability_Data_Moderate)
##### Join the Reservoir storage reliability back with the big data set
#AllData<-right_join(Data,dfStorageReliability,by='Trace_Notation')
AllData<-left_join(Data,dfStorageReliability,by='Trace_Notation')
##################################################################################################
###PLOTS###
##################################################################################################
#### DER Attempt in ggPLOT Code to show shortage contour plots
## for different sedimentation rates
## Rows = Sedimintation levels (0, 10, 30)
## Columns  = Different shortage metrics (average annual shortage and maximum annual shortage)
##
#Set Local Directory
setwd(startWD)
setwd("../4 - Plots/ggPlot-StorageCriteria")
#Specify attributes for each shortage metric
cColors <- c("Blue", "Purple")
cShortMetrics <- c("Mean Shortage (acre-feet/year)","Max. Shortage (acre-feet/year)")
cSedValues <- unique(AllData$Sedimentation)
nShortMetrics <- length(cShortMetrics)
nSeds <- length(cSedValues)
AxisTitles <- c("Demand (1,000 acre-feet/year)","Inflows (1,000 acre-feet/year)")
library("scales")
#Calculate Annual Shortage by water year
dfAnnualShortages <-AllData %>% select(Trace_Notation, WaterYear, `Annual Avg Inflow`, Demand, Shortage, Sedimentation, WBWCDShortage) %>%
group_by(Trace_Notation, WaterYear, `Annual Avg Inflow`, Demand, Sedimentation) %>%
summarise(AnnualShort = sum(Shortage), AnnualWBWCDShort = sum(WBWCDShortage))
#Calculate fraction of years with shortages
dfAnnualShortages$ShortYear <- ifelse(dfAnnualShortages$AnnualShort > 100,1,0)
dfAnnualShortages$ShortYearWBWCD <- ifelse(dfAnnualShortages$AnnualWBWCDShort > 100,1,0)
#Calculate average and max shortage for trace and max shorta
dfShortages <- dfAnnualShortages %>% group_by(Trace_Notation,`Annual Avg Inflow`, Demand, Sedimentation) %>%
summarise(MeanShort = mean(AnnualShort), MaxShort = max(AnnualShort), NumShortYears = sum(ShortYear),
MeanWBWCDShort = mean(AnnualWBWCDShort), MaxWBWCDShort = max(AnnualWBWCDShort), NumShortWBWCDYears = sum(ShortYearWBWCD))
#Make a nice Sedimentation column
dfShortages$Sed <- paste(percent(dfShortages$Sedimentation/100), "Sedimentation")
#Label each row with an Inflow scenario monicer
dfFlowScens <- data.frame(Trace = seq(1:6), StartYear=c(2030, 1940,1930,1610,1520,1570),
FlowLabel=c("Hot Dry","Historical\n(1940 to 1970)","","","",""),
FlowLabel2=c("Hot Dry","Historical (1940 to 1970)","","","",""),
FlowLabelAsYear = c("Hot Dry","","","","",""))
#Create the year to year label
dfFlowScens$FlowLabel <- ifelse(dfFlowScens$FlowLabel=="",paste0(as.character(dfFlowScens$StartYear)," to ", as.character(dfFlowScens$StartYear+30),sep=""), as.character(dfFlowScens$FlowLabel))
dfFlowScens$FlowLabel2 <- ifelse(dfFlowScens$FlowLabel2=="",paste0(as.character(dfFlowScens$StartYear)," to ", as.character(dfFlowScens$StartYear+30),sep=""), as.character(dfFlowScens$FlowLabel2))
dfFlowScens$FlowLabelAsYear <- ifelse(dfFlowScens$FlowLabelAsYear=="",paste0(as.character(dfFlowScens$StartYear)," to ", as.character(dfFlowScens$StartYear+30),sep=""), as.character(dfFlowScens$FlowLabelAsYear))
dfFlowScens$TraceStr <- paste0("Trace",dfFlowScens$Trace)
#Link the Flow scenario name with the trace number
#Trace numbers are {Trace1,Trace2,Trace3} -- {Demand,Flow,Sedimentation}
#Split out the trace names. This is a list
lTraces <- strsplit(dfShortages$Trace_Notation,",")
#Convert to a dataframe and transpose
dfTraces <- as.data.frame(t(as.data.frame(lTraces)))
#Assign names to the columns
colnames(dfTraces) <- c("DemTrace","FlowTrace","SedTrace")
dfTraces$TracesAll <- paste(sep=",",dfTraces$DemTrace,dfTraces$FlowTrace,dfTraces$SedTrace)
#Joint the flow names
dfTraces <- left_join(dfTraces,dfFlowScens,by = c("FlowTrace" = "TraceStr"))
#Join back in
dfShortages <- full_join(dfShortages,dfTraces,by =c("Trace_Notation" = "TracesAll"))
#Calculate the ratio of WBWCD shortage to total basin shortage for WBWCD shortage volumes higher than a threshold
nMinShort <- 20000 # Minimum shortage to calculate fraction
dfShortages$FractMeanShortage <- ifelse(dfShortages$MeanWBWCDShort >= nMinShort, round(dfShortages$MeanWBWCDShort / dfShortages$MeanShort * 100,1), 0)
dfShortages$FractMaxShortage <- ifelse(dfShortages$MaxWBWCDShort >= nMinShort, round(dfShortages$MaxWBWCDShort / dfShortages$MaxShort * 100,1), 0)
dfPlotData <- dfShortages
#Constant to control display of shortages (divide acre-feet by xx)
nShortDivide <- 1000
#Construct breaks of contour lines. We want about 10 contour lines
relBreaksAvg <- seq(0,max(dfShortages$MeanWBWCDShort/nShortDivide),by=20)
relBreaksMax <- seq(0,max(dfShortages$MaxWBWCDShort/nShortDivide),by=20)
#Grab the column names of the data frame
cColNames <- colnames(dfPlotData)
colplots <- list() #new empty list
#Define a new data frame that represents the historical point
#Grab the historical inflow
nHistoricalFlow <- dfPlotData %>% filter(FlowLabel == dfFlowScens$FlowLabel[2]) %>% select(`Annual Avg Inflow`)
dfHistoricalPoint <- data.frame(Demand = c(549000),
AnnualAvgFlow = nHistoricalFlow$`Annual Avg Inflow`[1] ,
DataType = "Historical")
dfHistoricalPoint$`MeanShort` <- 0
dfHistoricalPointMulti <- dfHistoricalPoint
dfHistoricalPointMulti$`MaxShort`<-0
dfHistoricalPointMulti$`NumShortYears`<-0
#Define the countour box border color - https://stackoverflow.com/questions/24815672/how-can-i-configure-box-color-in-directlabels-draw-rects
my.dl <- list(box.color="red", "draw.rects")
#my.dl <- list(dl.trans(box.color="red"),"draw.rects")
nMetrics <- length(cShortMetrics)
### Figure A - WBWCD mean and max shortages as contour
#Loop over the shortage metrics
for (iMetric in (1:nMetrics)) {
#Grab the column name for the current storage target
#sCurrCol <- paste0("`",cColNames[iMetric+4],"`","/nShortDivide",sep="")
sCurrCol <- paste0(cColNames[iMetric+7],"/nShortDivide",sep="")
if (iMetric == 1){
relBreaks <- relBreaksAvg
} else {
relBreaks <- relBreaksMax
}
print(sCurrCol)
#Make three plots (facets) for the different sedimination levels for the storage target
colplots[[iMetric]] <-
ggplot(dfPlotData, aes_string(x="Demand/1e3",y= "`Annual Avg Inflow`/1e3", z = sCurrCol)) +
metR::geom_contour_fill(breaks = relBreaks ,na.fill = TRUE) +
#Contour lines
metR::geom_contour2( colour = "black", binwidth=4, size=0.75, breaks = relBreaks)   +
#Label contour lines (This is not working very well)
#metR::geom_text_contour(size=6, check_overlap = TRUE, parse = TRUE) +
#geom_dl(aes(label=..level..),method=list("angled.boxes", cex=1), stat="contour", breaks = relBreaks) +
#geom_dl(aes(label=..level..),method=list("angled.endpoints", cex=1), stat="contour", breaks = relBreaks) +
# This line is giving an error
geom_dl(aes(label=..level..), method=list("angled.boxes", cex=1), stat="contour", breaks = relBreaks) +
#Overplot historical point
#geom_point(data= dfHistoricalPointMulti, aes(x = Demand/1e3, y = AnnualAvgFlow/1e3), shape = 15, color="Blue", size=6) +
geom_point(data= dfHistoricalPointMulti, aes(x = Demand/1e3, y = AnnualAvgFlow/1e3), shape = 15, color="Blue", size=6, inherit.aes = FALSE) +
#Fill the contours from white to the target color
scale_fill_gradient(name = "Reliability",low = "White", high = as.character(cColors[iMetric]), na.value = "white") +
#scale_fill_gradientn(name = "Reliability",colours = c("White",as.character(cColors[iMetric])), na.value = "white") +
#Create the facets by sedimentation level
facet_wrap( ~Sed, nrow = nSeds) +
theme_bw() +
guides(fill= "none") +
scale_size(guide="none") +
labs(x=AxisTitles[1], y=AxisTitles[2]) +
theme(text = element_text(size=18),
legend.position = "none")
#colplots[[iMetric]] <-  direct.label(colplots[[iMetric]], list("far.from.others.borders","calc.boxes", "enlarge.box", "my.dl"))
print(colplots[[iMetric]])
}
#Combine all the column plots
plot_grid(colplots[[1]], colplots[[2]],
labels = cShortMetrics,vjust = 4,  #Position the labels inside the top facet plot
ncol = 2, nrow = 1)
#Save the plot to file
ggsave("FigA-ShortageContourWBWCD.jpg", width = 12.5,
height = 7.5, units = "in",
dpi = 300)
### Figure B - WBWCD mean and max shortages as a fraction of total Weber Basin shortage
#Construct breaks of contour lines. We want about 10 contour lines
relBreaksAvg <- seq(0,max(dfShortages$FractMeanShortage),by=10)
relBreaksMax <- seq(0,max(dfShortages$FractMaxShortage)+10,by=10)
cShortMetrics <- c("Mean Shortage (%)","Max. Shortage (%)")
#cShortMetrics <- c("Mean Shortage (%)") #,"Max. Shortage (%)")
colplots <- list() #new empty list
nMetrics <- length(cShortMetrics)
ahull.grid <- list("outside.ahull","empty.grid")
chull.grid <- list("outside.chull","empty.grid")
#Loop over the shortage metrics
for (iMetric in (1:nMetrics)) {
#iMetric <- 2
#Grab the column name for the current storage target
#sCurrCol <- paste0("`",cColNames[iMetric+4],"`","/nShortDivide",sep="")
sCurrCol <- paste0(cColNames[iMetric+19])
if (iMetric == 1){
relBreaks <- relBreaksAvg
} else {
relBreaks <- relBreaksMax
}
print(sCurrCol)
#Make three plots (facets) for the different sedimination levels for the storage target
colplots[[iMetric]] <-
ggplot(dfPlotData, aes_string(x="Demand/1e3",y= "`Annual Avg Inflow`/1e3", z = sCurrCol)) +
#ggplot(dfPlotData %>% filter(Sedimentation == 10, `Annual Avg Inflow` > 300000, Demand > 300000), aes_string(x="Demand/1e3",y= "`Annual Avg Inflow`/1e3", z = sCurrCol)) +
metR::geom_contour_fill(breaks = relBreaks ,na.fill = TRUE) +
#Contour lines
metR::geom_contour2( colour = "black", binwidth=4, size=0.75, breaks = relBreaks)   +
#Label contour lines (This is not working very well)
#metR::geom_text_contour(size=6, check_overlap = TRUE, parse = TRUE) +
#geom_dl(aes(label=..level..),method=list("angled.boxes", cex=1), stat="contour", breaks = relBreaks) +
#geom_dl(aes(label=..level..),method=list("angled.endpoints", cex=1), stat="contour", breaks = relBreaks) +
#geom_text(aes(label= round(FractMaxShortage,1))) +
# This line is giving an error
geom_dl(aes(label=..level..), method=list("angled.boxes", cex=1), stat="contour", breaks = relBreaks) +
#geom_dl(aes(label=..level..), method=list("top.pieces", cex=1), stat="contour", breaks = relBreaks) +
#geom_dl(aes(label=..level..), method=list("chull.grid", cex=1), stat="contour", breaks = relBreaks) +
#Overplot historical point
#geom_point(data= dfHistoricalPointMulti, aes(x = Demand/1e3, y = AnnualAvgFlow/1e3), shape = 15, color="Blue", size=6) +
geom_point(data= dfHistoricalPointMulti, aes(x = Demand/1e3, y = AnnualAvgFlow/1e3), shape = 15, color="Blue", size=6, inherit.aes = FALSE) +
#Fill the contours from white to the target color
scale_fill_gradientn(name = "Reliability",colours = c("White",as.character(cColors[iMetric])), na.value = "white") +
#Create the facets by sedimentation level
facet_wrap( ~Sed, nrow = nSeds) +
theme_bw() +
guides(fill= "none") +
scale_size(guide="none") +
labs(x=AxisTitles[1], y=AxisTitles[2]) +
theme(text = element_text(size=18),
legend.position = "none")
#colplots[[iMetric]] <-  direct.label(colplots[[iMetric]], list("far.from.others.borders","calc.boxes", "enlarge.box", "my.dl"))
print(colplots[[iMetric]])
}
#Combine all the column plots
plot_grid(colplots[[1]], colplots[[2]],
labels = cShortMetrics,vjust = 4,  #Position the labels inside the top facet plot
ncol = 2, nrow = 1)
## Plot as labels on grid for testing
#ggplot(dfPlotData %>% filter(Sedimentation == 10), aes_string(x="Demand/1e3",y= "`Annual Avg Inflow`/1e3")) +
#      geom_text(aes(label= round(FractMaxShortage,1)))
#Save the plot to file
ggsave("FigB-ShortageContourWBWCDFractofBasinTotal.jpg", width = 12.5,
height = 7.5, units = "in",
dpi = 300)
dfScenarioCombos <- data.frame(FlowScen = c("Trace2","Trace3","Trace1"),  # Historical/558, 1930-1960/711, Hot Dry/840
DemScen = c("Trace2","Trace4","Trace6"))
dfTimePlotData <- inner_join(AllData,dfScenarioCombos,by = c("FlowTrace"= "FlowScen","DemTrace"="DemScen"))
View(AllData)
View(AllData)
lTraces <- strsplit(AllData$Trace_Notation,",")
dfTraces <- as.data.frame(t(as.data.frame(lTraces)))
colnames(dfTraces) <- c("DemTrace","FlowTrace","SedTrace")
dfTraces$TracesAll <- paste(sep=",",dfTraces$DemTrace,dfTraces$FlowTrace,dfTraces$SedTrace)
View(dfTraces)
AllData <- full_join(AllData,dfTraces,by =c("Trace_Notation" = "TracesAll"))
AllData<-left_join(Data,dfStorageReliability,by='Trace_Notation')
lTraces <- strsplit(AllData$Trace_Notation,",")
dfTraces <- as.data.frame(t(as.data.frame(lTraces)))
colnames(dfTraces) <- c("DemTrace","FlowTrace","SedTrace")
dfTraces$TracesAll <- paste(sep=",",dfTraces$DemTrace,dfTraces$FlowTrace,dfTraces$SedTrace)
AllData <- left_join(AllData,dfTraces,by =c("Trace_Notation" = "TracesAll"))
View(dfTraces)
AllData<-left_join(Data,dfStorageReliability,by='Trace_Notation')
View(dfTraces)
lTraces <- strsplit(unique(AllData$Trace_Notation),",")
dfTraces <- as.data.frame(t(as.data.frame(lTraces)))
View(dfTraces)
dfTraces <- as.data.frame(t(as.data.frame(lTraces)))
#Assign names to the columns
colnames(dfTraces) <- c("DemTrace","FlowTrace","SedTrace")
dfTraces$TracesAll <- paste(sep=",",dfTraces$DemTrace,dfTraces$FlowTrace,dfTraces$SedTrace)
AllData <- left_join(AllData,dfTraces,by =c("Trace_Notation" = "TracesAll"))
dfTimePlotData <- inner_join(AllData,dfScenarioCombos,by = c("FlowTrace"= "FlowScen","DemTrace"="DemScen"))
View(dfScenarioCombos)
View(dfTimePlotData)
dfTimePlotData$Date <- as.Date(sprintf("%d-%d-%d",dfTimePlotData$Years, dfTimePlotData$Month.x,1))
dfTimePlotData$Sed <- paste(percent(dfTimePlotData$Sedimentation/100), "Sedimentation")
dfTimePlotData$RunName <- paste(sprintf("%.0f",dfTimePlotData$Demand/1e3),dfTimePlotData$FlowLabel, sep = " / ")
cRunNames <-  unique(dfTimePlotData$RunName)
cSedValuesForTime <- unique(dfTimePlotData$Sed)
cDateRange <- c(min(dfTimePlotData$Date),max(dfTimePlotData$Date))
ggplot(dfTimePlotData, aes(x = Date, y = Shortage/1e3)) +
#Line plots of storage series
# Sed facets, runs ~ colors
#geom_line(aes(color = RunName), size = 1) +
#scale_color_manual(values = c(pBlues[5],pBlues[3],pBlues[7]), breaks = c("1610 to 1640 / 428", "1570 to 1600 / 492","Hot Dry / 544")) +
#facet_wrap(~Sed, nrow = 2) +  # Set nrow to 1 to make the panels side by side
#Seds as colors, runs ~ facets
geom_line(aes(color = Sed), size = 1) +
scale_color_manual(values = c(pBlues[3],pBlues[5], pBlues[7]), breaks = cSedValuesForTime) + #c("0% Sedimentation", "30% Sedimentation")) +
facet_wrap(~RunName, nrow = 3) +  # Set nrow to 1 to make the panels side by side
theme_bw() +
#guides(color = guide_legend(title="Run (Flow / Demand)", order=1)) +
guides(color = guide_legend(title="", order=1)) +
scale_size(guide="none") +
labs(x="Model Year", y="Shortage\n(1,000 acre-feet)") +
theme(text = element_text(size=18))
pBlues <- brewer.pal(9,"Blues")
ggplot(dfTimePlotData, aes(x = Date, y = Shortage/1e3)) +
#Line plots of storage series
# Sed facets, runs ~ colors
#geom_line(aes(color = RunName), size = 1) +
#scale_color_manual(values = c(pBlues[5],pBlues[3],pBlues[7]), breaks = c("1610 to 1640 / 428", "1570 to 1600 / 492","Hot Dry / 544")) +
#facet_wrap(~Sed, nrow = 2) +  # Set nrow to 1 to make the panels side by side
#Seds as colors, runs ~ facets
geom_line(aes(color = Sed), size = 1) +
scale_color_manual(values = c(pBlues[3],pBlues[5], pBlues[7]), breaks = cSedValuesForTime) + #c("0% Sedimentation", "30% Sedimentation")) +
facet_wrap(~RunName, nrow = 3) +  # Set nrow to 1 to make the panels side by side
theme_bw() +
#guides(color = guide_legend(title="Run (Flow / Demand)", order=1)) +
guides(color = guide_legend(title="", order=1)) +
scale_size(guide="none") +
labs(x="Model Year", y="Shortage\n(1,000 acre-feet)") +
theme(text = element_text(size=18))
#legend.position = "none")
View(dfTimePlotData)
dfTimePlotData$RunName <- paste(sprintf("%.0f",dfTimePlotData$Demand/1e3),dfTimePlotData$FlowLabel, sep = " / ")
dfFlowScens <- data.frame(Trace = seq(1:6), StartYear=c(2030, 1940,1930,1610,1520,1570),
FlowLabel=c("Hot Dry","Historical\n(1940 to 1970)","","","",""),
FlowLabel2=c("Hot Dry","Historical (1940 to 1970)","","","",""),
FlowLabelAsYear = c("Hot Dry","","","","",""))
#Create the year to year label
dfFlowScens$FlowLabel <- ifelse(dfFlowScens$FlowLabel=="",paste0(as.character(dfFlowScens$StartYear)," to ", as.character(dfFlowScens$StartYear+30),sep=""), as.character(dfFlowScens$FlowLabel))
dfFlowScens$FlowLabel2 <- ifelse(dfFlowScens$FlowLabel2=="",paste0(as.character(dfFlowScens$StartYear)," to ", as.character(dfFlowScens$StartYear+30),sep=""), as.character(dfFlowScens$FlowLabel2))
dfFlowScens$FlowLabelAsYear <- ifelse(dfFlowScens$FlowLabelAsYear=="",paste0(as.character(dfFlowScens$StartYear)," to ", as.character(dfFlowScens$StartYear+30),sep=""), as.character(dfFlowScens$FlowLabelAsYear))
dfFlowScens$TraceStr <- paste0("Trace",dfFlowScens$Trace)
dfTraces <- left_join(dfTraces,dfFlowScens,by = c("FlowTrace" = "TraceStr"))
AllData<-left_join(Data,dfStorageReliability,by='Trace_Notation')
View(dfTraces)
AllData <- left_join(AllData,dfTraces,by =c("Trace_Notation" = "TracesAll"))
dfTimePlotData <- inner_join(AllData,dfScenarioCombos,by = c("FlowTrace"= "FlowScen","DemTrace"="DemScen"))
#Filter out middle Sedimentation trace
#dfTimePlotData <- dfTimePlotData %>% filter(SedTrace != "Trace2")
#Calculate a year-month-day
dfTimePlotData$Date <- as.Date(sprintf("%d-%d-%d",dfTimePlotData$Years, dfTimePlotData$Month.x,1))
#Make a nice Sedimentation column
dfTimePlotData$Sed <- paste(percent(dfTimePlotData$Sedimentation/100), "Sedimentation")
#Calculate a Flow-Demand run name
dfTimePlotData$RunName <- paste(sprintf("%.0f",dfTimePlotData$Demand/1e3),dfTimePlotData$FlowLabel, sep = " / ")
cRunNames <-  unique(dfTimePlotData$RunName)
cSedValuesForTime <- unique(dfTimePlotData$Sed)
#Construct the data frame for the storage criteria
cDateRange <- c(min(dfTimePlotData$Date),max(dfTimePlotData$Date))
# Blue scale for lines
pBlues <- brewer.pal(9,"Blues")
ggplot(dfTimePlotData, aes(x = Date, y = Shortage/1e3)) +
#Line plots of storage series
# Sed facets, runs ~ colors
#geom_line(aes(color = RunName), size = 1) +
#scale_color_manual(values = c(pBlues[5],pBlues[3],pBlues[7]), breaks = c("1610 to 1640 / 428", "1570 to 1600 / 492","Hot Dry / 544")) +
#facet_wrap(~Sed, nrow = 2) +  # Set nrow to 1 to make the panels side by side
#Seds as colors, runs ~ facets
geom_line(aes(color = Sed), size = 1) +
scale_color_manual(values = c(pBlues[3],pBlues[5], pBlues[7]), breaks = cSedValuesForTime) + #c("0% Sedimentation", "30% Sedimentation")) +
facet_wrap(~RunName, nrow = 3) +  # Set nrow to 1 to make the panels side by side
theme_bw() +
#guides(color = guide_legend(title="Run (Flow / Demand)", order=1)) +
guides(color = guide_legend(title="", order=1)) +
scale_size(guide="none") +
labs(x="Model Year", y="Shortage\n(1,000 acre-feet)") +
theme(text = element_text(size=18))
ggplot(dfTimePlotData, aes(x = Date, y = WBWCDShortage/1e3)) +
#Line plots of storage series
# Sed facets, runs ~ colors
#geom_line(aes(color = RunName), size = 1) +
#scale_color_manual(values = c(pBlues[5],pBlues[3],pBlues[7]), breaks = c("1610 to 1640 / 428", "1570 to 1600 / 492","Hot Dry / 544")) +
#facet_wrap(~Sed, nrow = 2) +  # Set nrow to 1 to make the panels side by side
#Seds as colors, runs ~ facets
geom_line(aes(color = Sed), size = 1) +
scale_color_manual(values = c(pBlues[3],pBlues[5], pBlues[7]), breaks = cSedValuesForTime) + #c("0% Sedimentation", "30% Sedimentation")) +
facet_wrap(~RunName, nrow = 3) +  # Set nrow to 1 to make the panels side by side
theme_bw() +
#guides(color = guide_legend(title="Run (Flow / Demand)", order=1)) +
guides(color = guide_legend(title="", order=1)) +
scale_size(guide="none") +
labs(x="Model Year", y="Shortage\n(1,000 acre-feet)") +
theme(text = element_text(size=18))
ggplot(dfTimePlotData, aes(x = Date)) +
#Seds as colors, runs ~ facets
geom_line(aes(y=WBWCDShortage, color = Sed), size = 1) +
scale_color_manual(values = c(pBlues[3],pBlues[5], pBlues[7]), breaks = cSedValuesForTime) + #c("0% Sedimentation", "30% Sedimentation")) +
facet_wrap(~RunName, nrow = 3) +  # Set nrow to 1 to make the panels side by side
theme_bw() +
#guides(color = guide_legend(title="Run (Flow / Demand)", order=1)) +
guides(color = guide_legend(title="", order=1)) +
scale_size(guide="none") +
labs(x="Model Year", y="Shortage\n(1,000 acre-feet)") +
theme(text = element_text(size=18))
ggplot(dfTimePlotData, aes(x = Date)) +
#Seds as colors, runs ~ facets
geom_line(aes(y=WBWCDShortage/1000, color = Sed), size = 1) +
scale_color_manual(values = c(pBlues[3],pBlues[5], pBlues[7]), breaks = cSedValuesForTime) + #c("0% Sedimentation", "30% Sedimentation")) +
facet_wrap(~RunName, nrow = 3) +  # Set nrow to 1 to make the panels side by side
theme_bw() +
#guides(color = guide_legend(title="Run (Flow / Demand)", order=1)) +
guides(color = guide_legend(title="", order=1)) +
scale_size(guide="none") +
labs(x="Model Year", y="Shortage\n(1,000 acre-feet)") +
theme(text = element_text(size=18))
pReds <- brewer.pal(9,"Reds")
ggplot(dfTimePlotData, aes(x = Date)) +
#Seds as colors, runs ~ facets
geom_line(aes(y=WBWCDShortage/1000, color = Sed), size = 1) +
geom_line(aes(y=Shortage/1000, color = Sed), size = 1) +
scale_color_manual(values = c(pBlues[3],pBlues[5], pBlues[7],pReds[3],pReds[5],pReds[7]), breaks = rep(cSedValuesForTime,2)) + #c("0% Sedimentation", "30% Sedimentation")) +
facet_wrap(~RunName, nrow = 3) +  # Set nrow to 1 to make the panels side by side
theme_bw() +
#guides(color = guide_legend(title="Run (Flow / Demand)", order=1)) +
guides(color = guide_legend(title="", order=1)) +
scale_size(guide="none") +
labs(x="Model Year", y="Shortage\n(1,000 acre-feet)") +
theme(text = element_text(size=18))
ggplot(dfTimePlotData, aes(x = Date)) +
#Seds as colors, runs ~ facets
geom_line(aes(y=WBWCDShortage/1000, color = Sed), size = 1) +
geom_line(aes(y=Shortage/1000, color = Sed), size = 1) +
scale_color_manual(values = c(pBlues[3],pBlues[5], pBlues[7],pReds[3],pReds[5],pReds[7])) + #, breaks = rep(cSedValuesForTime,2)) + #c("0% Sedimentation", "30% Sedimentation")) +
facet_wrap(~RunName, nrow = 3) +  # Set nrow to 1 to make the panels side by side
theme_bw() +
#guides(color = guide_legend(title="Run (Flow / Demand)", order=1)) +
guides(color = guide_legend(title="", order=1)) +
scale_size(guide="none") +
labs(x="Model Year", y="Shortage\n(1,000 acre-feet)") +
theme(text = element_text(size=18))
ggplot(dfTimePlotData, aes(x = Date)) +
#Seds as colors, runs ~ facets
#geom_line(aes(y=WBWCDShortage/1000, color = Sed), size = 1) +
geom_line(aes(y=Shortage/1000, color = Sed), size = 1) +
scale_color_manual(values = c(pBlues[3],pBlues[5], pBlues[7],pReds[3],pReds[5],pReds[7])) + #, breaks = rep(cSedValuesForTime,2)) + #c("0% Sedimentation", "30% Sedimentation")) +
facet_wrap(~RunName, nrow = 3) +  # Set nrow to 1 to make the panels side by side
theme_bw() +
#guides(color = guide_legend(title="Run (Flow / Demand)", order=1)) +
guides(color = guide_legend(title="", order=1)) +
scale_size(guide="none") +
labs(x="Model Year", y="Shortage\n(1,000 acre-feet)") +
theme(text = element_text(size=18))
#legend.position = "none")
ggplot(dfTimePlotData, aes(x = Date)) +
#Seds as colors, runs ~ facets
geom_line(aes(y=WBWCDShortage/1000, color = Sed), size = 1) +
#geom_line(aes(y=Shortage/1000, color = Sed), size = 1) +
scale_color_manual(values = c(pBlues[3],pBlues[5], pBlues[7],pReds[3],pReds[5],pReds[7])) + #, breaks = rep(cSedValuesForTime,2)) + #c("0% Sedimentation", "30% Sedimentation")) +
facet_wrap(~RunName, nrow = 3) +  # Set nrow to 1 to make the panels side by side
theme_bw() +
#guides(color = guide_legend(title="Run (Flow / Demand)", order=1)) +
guides(color = guide_legend(title="", order=1)) +
scale_size(guide="none") +
labs(x="Model Year", y="Shortage\n(1,000 acre-feet)") +
theme(text = element_text(size=18))
ggplot(dfTimePlotData, aes(x = Date)) +
#Seds as colors, runs ~ facets
geom_line(aes(y=WBWCDShortage/1000), color="red", size = 1) +
geom_line(aes(y=Shortage/1000, color = Sed), size = 1) +
scale_color_manual(values = c(pBlues[3],pBlues[5], pBlues[7],pReds[3],pReds[5],pReds[7])) + #, breaks = rep(cSedValuesForTime,2)) + #c("0% Sedimentation", "30% Sedimentation")) +
facet_wrap(~RunName, nrow = 3) +  # Set nrow to 1 to make the panels side by side
theme_bw() +
#guides(color = guide_legend(title="Run (Flow / Demand)", order=1)) +
guides(color = guide_legend(title="", order=1)) +
scale_size(guide="none") +
labs(x="Model Year", y="Shortage\n(1,000 acre-feet)") +
theme(text = element_text(size=18))
colnames(dfTimePlotData)
cTimePlotDataColNames <- colnames(dfTimePlotData)
c(2:9,12:31)
dfTimePlotDataMelt <- melt(dfTimePlotData,
id.vars = cTimePlotDataColNames[c(2:9,12:31)],
measure.vars = cTimePlotDataColNames(c(10,11)))
TimePlotDataColNames <- colnames(dfTimePlotData)
cTimePlotDataColNames <- colnames(dfTimePlotData)
dfTimePlotDataMelt <- melt(dfTimePlotData,
id.vars = cTimePlotDataColNames[c(2:9,12:31)],
measure.vars = cTimePlotDataColNames(c(10,11)))
dfTimePlotDataMelt <- melt(dfTimePlotData,
id.vars = cTimePlotDataColNames[c(2:9,12:31)],
measure.vars = cTimePlotDataColNames[c(10,11)])
View(dfTimePlotDataMelt)
dfTimePlotDataMelt$LegendLabel <- paste0(dfTimePlotDataMelt$variable, dfTimePlotDataMelt$Sed, sep=": ")
dfTimePlotDataMelt$LegendLabel <- paste(dfTimePlotDataMelt$variable, dfTimePlotDataMelt$Sed, sep=": ")
ggplot(dfTimePlotDataMelt, aes(x = Date)) +
#Seds as colors, runs ~ facets
geom_line(aes(y=variable/1000), color=LegendLabel, size = 1) +
scale_color_manual(values = c(pBlues[3],pBlues[5], pBlues[7],pReds[3],pReds[5],pReds[7])) + #, breaks = rep(cSedValuesForTime,2)) + #c("0% Sedimentation", "30% Sedimentation")) +
facet_wrap(~RunName, nrow = 3) +  # Set nrow to 1 to make the panels side by side
theme_bw() +
#guides(color = guide_legend(title="Run (Flow / Demand)", order=1)) +
guides(color = guide_legend(title="", order=1)) +
scale_size(guide="none") +
labs(x="Model Year", y="Shortage\n(1,000 acre-feet)") +
theme(text = element_text(size=18))
ggplot(dfTimePlotDataMelt, aes(x = Date, y=value/1000)) +
#Seds as colors, runs ~ facets
geom_line(aes(color=LegendLabel), size = 1) +
scale_color_manual(values = c(pBlues[3],pBlues[5], pBlues[7],pReds[3],pReds[5],pReds[7])) + #, breaks = rep(cSedValuesForTime,2)) + #c("0% Sedimentation", "30% Sedimentation")) +
facet_wrap(~RunName, nrow = 3) +  # Set nrow to 1 to make the panels side by side
theme_bw() +
#guides(color = guide_legend(title="Run (Flow / Demand)", order=1)) +
guides(color = guide_legend(title="", order=1)) +
scale_size(guide="none") +
labs(x="Model Year", y="Shortage\n(1,000 acre-feet)") +
theme(text = element_text(size=18))
dfTimePlotDataMelt$LegendLabel <- paste(ifelse(dfTimePlotDataMelt$variable == "Shortage","Basin","WBWCD"), dfTimePlotDataMelt$Sed, sep=": ")
ggplot(dfTimePlotDataMelt, aes(x = Date, y=value/1000)) +
#Seds as colors, runs ~ facets
geom_line(aes(color=LegendLabel), size = 1) +
scale_color_manual(values = c(pBlues[3],pBlues[5], pBlues[7],pReds[3],pReds[5],pReds[7])) + #, breaks = rep(cSedValuesForTime,2)) + #c("0% Sedimentation", "30% Sedimentation")) +
facet_wrap(~RunName, nrow = 3) +  # Set nrow to 1 to make the panels side by side
theme_bw() +
#guides(color = guide_legend(title="Run (Flow / Demand)", order=1)) +
guides(color = guide_legend(title="", order=1)) +
scale_size(guide="none") +
labs(x="Model Year", y="Shortage\n(1,000 acre-feet)") +
theme(text = element_text(size=18))
cLegendLabels <- unique(dfTimePlotDataMelt$LegendLabel)
cLegendLabels
cLegendLabels <- cLegendLabels[c(3,2,1,6,5,4)]
cLegendLabels
ggplot(dfTimePlotDataMelt, aes(x = Date, y=value/1000)) +
#Seds as colors, runs ~ facets
geom_line(aes(color=LegendLabel), size = 1) +
scale_color_manual(values = c(pBlues[3],pBlues[5], pBlues[7],pReds[3],pReds[5],pReds[7]), breaks = cLengendLabels) + #, breaks = rep(cSedValuesForTime,2)) + #c("0% Sedimentation", "30% Sedimentation")) +
facet_wrap(~RunName, nrow = 3) +  # Set nrow to 1 to make the panels side by side
theme_bw() +
#guides(color = guide_legend(title="Run (Flow / Demand)", order=1)) +
guides(color = guide_legend(title="", order=1)) +
scale_size(guide="none") +
labs(x="Model Year", y="Shortage\n(1,000 acre-feet)") +
theme(text = element_text(size=18))
ggplot(dfTimePlotDataMelt, aes(x = Date, y=value/1000)) +
#Seds as colors, runs ~ facets
geom_line(aes(color=LegendLabel), size = 1) +
scale_color_manual(values = c(pBlues[3],pBlues[5], pBlues[7],pReds[3],pReds[5],pReds[7]), breaks = cLegendLabels) + #, breaks = rep(cSedValuesForTime,2)) + #c("0% Sedimentation", "30% Sedimentation")) +
facet_wrap(~RunName, nrow = 3) +  # Set nrow to 1 to make the panels side by side
theme_bw() +
#guides(color = guide_legend(title="Run (Flow / Demand)", order=1)) +
guides(color = guide_legend(title="", order=1)) +
scale_size(guide="none") +
labs(x="Model Year", y="Shortage\n(1,000 acre-feet)") +
theme(text = element_text(size=18))
ggplot(dfTimePlotDataMelt, aes(x = Date, y=value/1000)) +
#Seds as colors, runs ~ facets
geom_line(aes(color=LegendLabel), size = 1) +
scale_color_manual(values = c(pBlues[7],pBlues[5], pBlues[3],pReds[7],pReds[5],pReds[3]), breaks = cLegendLabels) + #, breaks = rep(cSedValuesForTime,2)) + #c("0% Sedimentation", "30% Sedimentation")) +
facet_wrap(~RunName, nrow = 3) +  # Set nrow to 1 to make the panels side by side
theme_bw() +
#guides(color = guide_legend(title="Run (Flow / Demand)", order=1)) +
guides(color = guide_legend(title="", order=1)) +
scale_size(guide="none") +
labs(x="Model Year", y="Shortage\n(1,000 acre-feet)") +
theme(text = element_text(size=18))
