Storage_Metrics <- data.frame(Data[,c("Month","Tot_Mnthly_Stor")])
#Create more duplicate columns
Storage_Metrics <- cbind(Storage_Metrics, replicate(nLevels-1,Storage_Metrics$Tot_Mnthly_Stor))
#Rename the columns
colnames(Storage_Metrics)[2:(nLevels+1)] <- cStoreNames
#Record the last data column
cLastDataCol <- ncol(Data)
#Loop through columns. In each column convert the storage values to a binary: 1 if greater or equal to target. 0 if below
for (i in 1:nLevels) {
#Is the storage criteria met?
Storage_Metrics[,1+i] <- ifelse(Storage_Metrics[,1+i] > cStorLevels[i],1,0)
#Save the result back to the Data datafrom
Data[,cLastDataCol + i] <- Storage_Metrics[,1+i]
#Rename the column
colnames(Data)[cLastDataCol +i] <- cStoreNames[i]
}
cRelColNames <- paste0("Rel", cStoreNames)
#Calculate the average (fraction) for each combination of traces for each column. This represents
#the reliability
dfStorageReliability <-Data[,c("Trace_Notation","Month",cStoreNames)] %>%
filter(Month == 6) %>%  #Filter on the June month because that is when we care about storage at criteria
group_by(Trace_Notation) %>%
summarise_all(funs(mean))
#Multiply by 100 to get a percent
dfStorageReliability[,cStoreNames] <- dfStorageReliability[,cStoreNames]*100
# Rename columns
colnames(dfStorageReliability)[3:5] <- c("Mod Reliability", "Sev Reliability","Ext Reliability")
# #Moderate
# Reliability_Data_Moderate <-Data %>%
#  group_by(Trace_Notation) %>%
# summarise(ModPercent = mean(Moderate)*100)
# Severe
#Reliability_Data_Severe <-Data %>%
# group_by(Trace_Notation) %>%
#summarise(SevPercent = mean(SevereStorageR)*100)
#View(Reliability_Data_Moderate)
# Extreme
#Reliability_Data_Extreme <-Data %>%
# group_by(Trace_Notation) %>%
#summarise(ExtPercent = mean(ExtremeStorageR)*100)
#View(Reliability_Data_Moderate)
##### Join the Reservoir storage reliability back with the big data set
AllData<-right_join(Data,dfStorageReliability,by='Trace_Notation')
## Arrange the Demand and Inflow columns so they plot correctly
AllData <- AllData %>% arrange(Demand, -`Annual Avg Inflow`) ##%>% mutate(Demand=factor(Demand))
#AllData <- AllData %>% arrange(Demand, `Annual Avg Inflow`)
#AllData$DemandFac = with(AllData, reorder(Demand,`Annual Avg Inflow`))
##################################################################################################
###PLOTS###
##################################################################################################
#### DER Attempt in ggPLOT Code to double loop to automate the generation of the matrix contour plot
## for sedimentation rates and storage targets
## FIGURE 8
## Rows = Sedimintation levels (0, 10, 30)
## Columns  = Reservoir Storage Targets (Moderate, Severe, Extreme)
##
## Annotations:
#
#    - First column has Sedimentation level, y-axis title, and y-axis ticks
#    - First row has column header (Storage criteria)
#    - Final row has x-axis title and ticks
# Change into the plot folder
setwd(startWD)
setwd("../4 - Plots/ggPlot-StorageCriteria")
#setwd("~/GitHub/WeberBasinVulnerability/WeberBasinVulnerability/4 - Plots/ggPlot-StorageCriteria")
# Define the dataframes to populate cell values
#Storage Targets:
dfStorageTargets <- data.frame(Num = seq(1,3),
Name = c("Moderate","Severe","Extreme"),
Color = c("Yellow","Orange","Red"),
Volume = c(380000,340000,280000),
Cutback = c(43000,123000,206000),  #Annual cutback in acre-feet per year
ColumnNum = c(17:19))  #Variable/column number of reliability results in big data frame
#Calculate a column of different volumes
dfStorageTargets$VolDiff <- c(-diff(as.matrix(dfStorageTargets$Volume)),280000)
#Grab a lighter shade of color from color brewer
pReds <- brewer.pal(9,"Reds")
pOranges <- brewer.pal(9,"Oranges")
pYelGreen <- brewer.pal(9,"YlGn")
dfStorageTargets$ColorLite <- c(pYelGreen[1],pOranges[3],pReds[3])
#Calculate the subtitle
dfStorageTargets$Subtitle <- paste0(dfStorageTargets$Name, " (",comma(dfStorageTargets$Volume, digits = 0)," acre-feet)")
cSedValues <- unique(AllData$Sedimentation)
nTargets <- nrow(dfStorageTargets)
nSeds <- length(cSedValues)
AxisTitles <- c("Demand (1,000 acre-feet/year)","Inflows (1,000 acre-feet/year)")
#Filter AllData down to a single row per inflow/demand/sedimentation combination
dfScenResults <- AllData %>% filter(Month.x == 1, WaterYear == 1)
#Make a nice Sedimentation column
dfScenResults$Sed <- paste(percent(dfScenResults$Sedimentation/100), "Sedimentation")
#Label each row with an Inflow scenario monicer
dfFlowScens <- data.frame(Trace = seq(1:6), StartYear=c(2030, 1940,1930,1610,1520,1570),
FlowLabel=c("Hot Dry","Historical\n(1940 to 1970)","","","",""),
FlowLabel2=c("Hot Dry","Historical (1940 to 1970)","","","",""),
FlowLabelAsYear = c("Hot Dry","","","","",""))
#Create the year to year label
dfFlowScens$FlowLabel <- ifelse(dfFlowScens$FlowLabel=="",paste0(as.character(dfFlowScens$StartYear)," to ", as.character(dfFlowScens$StartYear+30),sep=""), as.character(dfFlowScens$FlowLabel))
dfFlowScens$FlowLabel2 <- ifelse(dfFlowScens$FlowLabel2=="",paste0(as.character(dfFlowScens$StartYear)," to ", as.character(dfFlowScens$StartYear+30),sep=""), as.character(dfFlowScens$FlowLabel2))
dfFlowScens$FlowLabelAsYear <- ifelse(dfFlowScens$FlowLabelAsYear=="",paste0(as.character(dfFlowScens$StartYear)," to ", as.character(dfFlowScens$StartYear+30),sep=""), as.character(dfFlowScens$FlowLabelAsYear))
dfFlowScens$TraceStr <- paste0("Trace",dfFlowScens$Trace)
#Link the Flow scenario name with the trace number
#Trace numbers are {Trace1,Trace2,Trace3} -- {Demand,Flow,Sedimentation}
#Split out the trace names. This is a list
lTraces <- strsplit(dfScenResults$Trace_Notation,",")
#Convert to a dataframe and transpose
dfTraces <- as.data.frame(t(as.data.frame(lTraces)))
#Assign names to the columns
colnames(dfTraces) <- c("DemTrace","FlowTrace","SedTrace")
dfTraces$TracesAll <- paste(sep=",",dfTraces$DemTrace,dfTraces$FlowTrace,dfTraces$SedTrace)
#Joint the flow names
dfTraces <- left_join(dfTraces,dfFlowScens,by = c("FlowTrace" = "TraceStr"))
#Join back in
dfScenResults <- full_join(dfScenResults,dfTraces,by =c("Trace_Notation" = "TracesAll"))
#Convert from reliability above target to failures below target
dfScenResults$`Mod Reliability` <- (100 - dfScenResults$`Mod Reliability`)
dfScenResults$`Sev Reliability` <-(100 - dfScenResults$`Sev Reliability`)
dfScenResults$`Ext Reliability` <- (100 - dfScenResults$`Ext Reliability`)
dfPlotData <- dfScenResults
# Add a column to define the point type
dfPlotData$DataType <- "Model"
#Define a new data frame that represents the historical point
#Grab the historical inflow
nHistoricalFlow <- dfPlotData %>% filter(FlowLabel == dfFlowScens$FlowLabel[2]) %>% select(`Annual Avg Inflow`)
dfHistoricalPoint <- data.frame(Demand = c(549000),
AnnualAvgFlow = nHistoricalFlow$`Annual Avg Inflow`[1] ,
DataType = "Historical")
dfHistoricalPoint$`Mod Reliability` <- 0
dfHistoricalPointMulti <- dfHistoricalPoint
dfHistoricalPointMulti$`Sev Reliability`<-0
dfHistoricalPointMulti$`Ext Reliability`<-0
# dfPlotData <- dfScenResults %>% filter(Sedimentation == 0)
#relBreaks <- c(seq(0,20,by=4),seq(30,100, by=10))
relBreaks <- seq(0,100,by=10)
cFlowScens <- sort(unique(dfPlotData$`Annual Avg Inflow`))/1e3
#dfFlowScenLabels <- dfPlotData %>% distinct(FlowTrace, `Annual Avg Inflow`,FlowLabel,FlowLabel2, FlowLabelAsYear) %>% arrange(`Annual Avg Inflow`)
dfFlowScenLabels <- dfPlotData %>% distinct(FlowTrace, `Annual Avg Inflow`,FlowLabel) %>% arrange(`Annual Avg Inflow`)
dfDemScenLabels <- dfPlotData %>% distinct(DemTrace, Demand) %>% arrange(Demand)
dfDemScenLabels$Demand <- dfDemScenLabels$Demand/1e3
#cDemScens <- sort(unique(dfPlotData$Demand))/1e3
#Grab the column names of the data frame
cColNames <- colnames(dfPlotData)
colplots <- list() #new empty list
#Loop over the storage target criteria to create column contour plots for each sedimentation levels
for (iTarget in (1:nTargets)) {
#Grab the column name for the current storage target
sCurrCol <- paste0("`",cColNames[iTarget+16],"`",sep="")
#Make three plots (facets) for the different sedimination levels for the storage target
colplots[[iTarget]] <-
ggplot(dfPlotData, aes_string(x="Demand/1e3",y= "`Annual Avg Inflow`/1e3", z = sCurrCol)) +
#ggplot(dfPlotData, aes_string(x="as.numeric(levels(DemandFac))/1e3",y= "`Annual Avg Inflow`/1e3", z = sCurrCol)) +
#ggplot(dfPlotData, aes_string(x="reorder(Demand,Demand)/1e3",y= "`Annual Avg Inflow`/1e3", z = sCurrCol)) +
#Fix Coordinates
#coord_fixed(ratio = 2/5)+
#Fill Color
metR::geom_contour_fill(breaks = relBreaks ,na.fill = TRUE) +
#Contour lines
metR::geom_contour2( colour = "black", binwidth=4, size=0.75, breaks = relBreaks)   +
#Label contour lines (This is not working very well)
#metR::geom_text_contour(size=6, check_overlap = TRUE, parse = TRUE) +
geom_dl(aes(label=..level..),method=list("angled.boxes", cex=1), stat="contour", breaks = relBreaks) +
#Overplot points
#geom_point(size=4) +
#Overplot historical point
geom_point(data= dfHistoricalPointMulti, aes(x = Demand/1e3, y = AnnualAvgFlow/1e3), shape = 15, color="Blue", size=6) +
#Fill the contours from white to the target color
scale_fill_gradientn(name = "Reliability",colours = c("White",as.character(dfStorageTargets$Color[iTarget])), na.value = "white") +
#Create the facets by sedimentation level
facet_wrap( ~Sed, nrow = nSeds) +
coord_equal(ratio=1) +
theme_bw() +
guides(fill= "none") +
scale_size(guide="none") +
labs(x=AxisTitles[1], y=AxisTitles[2]) +
theme(text = element_text(size=18),
legend.position = "none")
print(colplots[[iTarget]])
}
#Combine all the column plots
pMatrix <- plot_grid(colplots[[1]], colplots[[2]], colplots[[3]],
labels = dfStorageTargets$Subtitle,vjust = 7.5,  #Position the labels inside the top facet plot
ncol = 3, nrow = 1)
print(pMatrix)
#Save the plot to file
ggsave("Fig8-StorageReliability.jpg",width = 12.5,
height = 7.5, units = "in",
dpi = 300)
## FIGURE 7 -- Single plot for Sedmintation Rate == 0, Moderate level.
## Overplot the Flow/Demand combo Scenarios as black circles
## Add second left- top- axes to annotate flow and demand scenarios
dfPlotData1Frame <- dfPlotData %>% filter(Sedimentation == 0)
iTarget <- 1
sCurrCol <- paste0("`",cColNames[iTarget+16],"`",sep="")
### Original version fo single contour plot
# pSingleLevel <- ggplot(dfPlotData1Frame, aes_string(x="Demand/1e3",y= "`Annual Avg Inflow`/1e3", z = sCurrCol)) +
# #pSingleLevel <- ggplot(dfPlotData1Frame, aes(x=as.numeric(DemandFac)/1e3,y= `Annual Avg Inflow`/1e3, z = `Mod Reliability`)) +
#
#      #Fill Color
#    metR::geom_contour_fill(breaks = relBreaks ,na.fill = TRUE) +
#    #Contour lines
#    #metR::geom_contour2( colour = "black", binwidth=4, size=0.75, breaks = relBreaks)   +
#    metR::geom_contour2( colour = "black", size=0.75, breaks = relBreaks)   +
#    #Label contour lines (This is not working very well)
#    #metR::geom_text_contour(aes(label=..level..),size=6, check_overlap = TRUE, parse = TRUE) +
#    geom_dl(aes(label=..level..),method=list("angled.boxes", cex=2), stat="contour", breaks = relBreaks) +
#
#    #Overplot model scenario points
#    geom_point(size=4, color = "Black", shape = 19) +
#    #Overplot historical point
#    geom_point(data= dfHistoricalPoint, aes(x = Demand/1e3, y = AnnualAvgFlow/1e3), shape = 15, color="Blue", size=6) +
#    # Label the points with reliability. Take out on final.
#    #geom_text(label=sprintf("%.0f",dfPlotData1Frame$`Mod Reliability`), size=5) +
#
#    #Add secondary x and y axis to label scenarios
#    scale_y_continuous(sec.axis = sec_axis(~. +0, name = "", breaks = dfFlowScenLabels$`Annual Avg Inflow`/1e3, labels = dfFlowScenLabels$FlowLabel)) +
#    scale_x_continuous(sec.axis = sec_axis(~. +0, name = "", breaks = dfDemScenLabels$Demand,  labels = format(dfDemScenLabels$Demand,digits=0))) +
#
#
#    #Fill the contours from white to the target color
#    scale_fill_gradientn(name = "Reliability",colours = c("White",as.character(dfStorageTargets$Color[iTarget])), na.value = "white") +
#    #scale_shape_manual(values = c(19,15)) +
#    #scale_color_manual(values = c("Blue","Black")) +
#
#   #Create the facets by sedimentation level
#    #facet_wrap( ~Sed, nrow = nSeds) +
#
#    theme_bw() +
#
#    guides(fill= "none") +
#    guides(shape = guide_legend(title="", order=1)) +
#    scale_size(guide="none") +
#
#    labs(x=AxisTitles[1], y=AxisTitles[2]) +
#    theme(text = element_text(size=18),
#          legend.position = "none")
#
#
#
#  print(pSingleLevel)
# #Save the plot to file
# ggsave("SingleReliability.jpg",width = 7,
#        height = 5, units = "in",
#        dpi = 300)
### Improved version of Figure 7 - single contour plot. Markers for legend.
dfPlotData1Frame$AnnualAvgFlow <- dfPlotData1Frame$`Annual Avg Inflow`
dfPlotShapes <- dfPlotData1Frame %>% select(Demand, AnnualAvgFlow, DataType, `Mod Reliability`)
dfPlotShapes$DataType <- as.factor(dfPlotShapes$DataType)
#Combine the plot and historical data frames into 1
dfPlotShapes <- rbind(dfHistoricalPoint, dfPlotShapes)
### Attempt to get shape guides to show
pSingleTest <- ggplot(dfPlotShapes, aes_string(x="Demand/1e3",y= "`AnnualAvgFlow`/1e3", z = sCurrCol)) +
#Fill Color
metR::geom_contour_fill(data=dfPlotData1Frame, aes_string(x="Demand/1e3",y= "`Annual Avg Inflow`/1e3", z = sCurrCol), breaks = relBreaks ,na.fill = TRUE) +
#Contour lines
metR::geom_contour2(data=dfPlotData1Frame, aes_string(x="Demand/1e3",y= "`Annual Avg Inflow`/1e3", z = sCurrCol), colour = "black", size=0.75, breaks = relBreaks)   +
#Label contour lines (This is not working very well)
geom_dl(data=dfPlotData1Frame, aes(label=..level..),method=list("angled.boxes", cex=2), stat="contour", breaks = relBreaks) +
#Overplot model scenario points
geom_point(aes(shape=DataType, size=DataType, color = DataType)) +
#Overplot historical point
#geom_point(data= dfHistoricalPoint, aes(x = Demand/1e3, y = AnnualAvgFlow/1e3), shape = 15, color="Blue", size=6) +
# Label the points with reliability. Take out on final.
#geom_text(label=sprintf("%.0f",dfPlotData1Frame$`Mod Reliability`), size=5) +
#Add secondary x and y axis to label scenarios
#scale_y_continuous(sec.axis = sec_axis(~. +0, name = "", breaks = dfFlowScenLabels$`Annual Avg Inflow`/1e3, labels = dfFlowScenLabels$FlowLabel)) +
scale_y_continuous(sec.axis = sec_axis(~. +0, name = "", breaks = dfFlowScenLabels$`Annual Avg Inflow`/1e3, labels = dfFlowScenLabels$FlowLabel)) +
scale_x_continuous(sec.axis = sec_axis(~. +0, name = "", breaks = dfDemScenLabels$Demand,  labels = format(dfDemScenLabels$Demand,digits=0))) +
#Fill the contours from white to the target color
scale_fill_gradientn(name = "Reliability",colours = c("White",as.character(dfStorageTargets$Color[iTarget])), na.value = "white") +
scale_shape_manual(values = c(15,19)) +  # Square / Circle
scale_color_manual(values = c("Blue","Black")) +
scale_size_manual(values = c(5,3)) +
#Create the facets by sedimentation level
#facet_wrap( ~Sed, nrow = nSeds) +
coord_equal(ratio=1) +
theme_bw() +
guides(fill= "none") +
#guides(shape = guide_legend(title="", order=1)) +
#scale_size(guide="none") +
labs(x=AxisTitles[1], y=AxisTitles[2]) +
theme(text = element_text(size=14), legend.title=element_blank()) #,
#legend.position = "none")
print(pSingleTest)
ggsave("Fig7-SingleReliability.jpg",width = 9,
height = 6, units = "in",
dpi = 300)
###### ADD TIME SERIES PLOTS #############
###
### For select runs (combinations of Flow and Demand)
### Figure 10
#Join the scenario names
AllData <- full_join(AllData,dfTraces,by =c("Trace_Notation" = "TracesAll"))
#Specify the demand/flow scenario combos we want to plot
#dfScenarioCombos <- data.frame(FlowScen = c("Trace4","Trace6","Trace1"),
#                               DemScen = c("Trace5","Trace4","Trace3"))
dfScenarioCombos <- data.frame(FlowScen = c("Trace2","Trace3","Trace1"),  # Historical/558, 1930-1960/711, Hot Dry/840
DemScen = c("Trace2","Trace4","Trace6"))
#Filter on the supply, demand scenario combinations
dfTimePlotData <- inner_join(AllData,dfScenarioCombos,by = c("FlowTrace"= "FlowScen","DemTrace"="DemScen"))
#Filter out middle Sedimentation trace
#dfTimePlotData <- dfTimePlotData %>% filter(SedTrace != "Trace2")
#Calculate a year-month-day
dfTimePlotData$Date <- as.Date(sprintf("%d-%d-%d",dfTimePlotData$Years, dfTimePlotData$Month.x,1))
#Make a nice Sedimentation column
dfTimePlotData$Sed <- paste(percent(dfTimePlotData$Sedimentation/100), "Sedimentation")
#Calculate a Flow-Demand run name
dfTimePlotData$RunName <- paste(sprintf("%.0f",dfTimePlotData$Demand/1e3),dfTimePlotData$FlowLabel, sep = " / ")
cRunNames <-  unique(dfTimePlotData$RunName)
cSedValuesForTime <- unique(dfTimePlotData$Sed)
#Construct the data frame for the storage criteria
cDateRange <- c(min(dfTimePlotData$Date),max(dfTimePlotData$Date))
dfStorageCriteria <- do.call("rbind", replicate(2, dfStorageTargets, simplify = FALSE))
dfStorageCriteria$Date <- c(rep(cDateRange[1],nTargets),rep(cDateRange[2],nTargets))
dfStorageCriteria <- dfStorageCriteria %>% arrange(-Volume)
#Get the colors we will need
# Light Red
# Blue scale for lines
pBlues <- brewer.pal(9,"Blues")
#http://www.sthda.com/english/articles/32-r-graphics-essentials/128-plot-time-series-data-using-ggplot/
ggplot(dfTimePlotData, aes(x = Date, y = Tot_Mnthly_Stor/1e3)) +
#Area plots of storage criteria
geom_area(data=dfStorageCriteria %>% filter(Name=="Moderate"), aes(x = Date, y= Volume/1e3, color = Name, fill = Name),
alpha = 1, position = "identity") +
geom_area(data=dfStorageCriteria %>% filter(Name=="Severe"), aes(x = Date, y= Volume/1e3, color = Name, fill = Name),
alpha = 1, position = "identity") +
geom_area(data=dfStorageCriteria %>% filter(Name=="Extreme"), aes(x = Date, y= Volume/1e3, color = Name, fill = Name),
alpha = 1, position = "identity") +
#geom_ribbon(data=dfStorageCriteria, aes(ymax = Volume/1e3, ymin=0, fill = Name)) +
#scale_color_manual(values = dfStorageTargets$Color) +
scale_fill_manual(values = c(dfStorageTargets$ColorLite[3],dfStorageTargets$ColorLite[1],dfStorageTargets$ColorLite[2]), breaks = c("Moderate","Severe","Extreme")) +
#Line plots of storage series
geom_line(aes(color = RunName), size = 1) +
scale_color_manual(values = c(pBlues[3],pBlues[5],pBlues[7], dfStorageTargets$ColorLite[3],dfStorageTargets$ColorLite[1],dfStorageTargets$ColorLite[2]), breaks = cRunNames) +
facet_wrap(~Sed, nrow = 3) +  # Set nrow to 1 to make the panels side by side
theme_bw() +
guides(fill= guide_legend(title="Storage Target", order=2), color = guide_legend(title="Run (Demand / Flow)", order=1)) +
scale_size(guide="none") +
labs(x="Model Year", y="Total Storage\n(1,000 acre-feet)") +
theme(text = element_text(size=18))
#legend.position = "none")
ggsave("Fig10-StorageTimeSeries.jpg",width = 10,
height = 7, units = "in",
dpi = 300)
### Alternative version of Figure 10 storage time series - facets are Runs and trace colors are Sedimentation
ggplot(dfTimePlotData, aes(x = Date, y = Tot_Mnthly_Stor/1e3)) +
#Area plots of storage criteria
geom_area(data=dfStorageCriteria %>% filter(Name=="Moderate"), aes(x = Date, y= Volume/1e3, color = Name, fill = Name),
alpha = 1, position = "identity") +
geom_area(data=dfStorageCriteria %>% filter(Name=="Severe"), aes(x = Date, y= Volume/1e3, color = Name, fill = Name),
alpha = 1, position = "identity") +
geom_area(data=dfStorageCriteria %>% filter(Name=="Extreme"), aes(x = Date, y= Volume/1e3, color = Name, fill = Name),
alpha = 1, position = "identity") +
#geom_ribbon(data=dfStorageCriteria, aes(ymax = Volume/1e3, ymin=0, fill = Name)) +
#scale_color_manual(values = dfStorageTargets$Color) +
scale_fill_manual(values = c(dfStorageTargets$ColorLite[3],dfStorageTargets$ColorLite[1],dfStorageTargets$ColorLite[2]), breaks = c("Moderate","Severe","Extreme")) +
#Line plots of storage series
geom_line(aes(color = Sed), size = 1) +
#scale_color_manual(values = c(pBlues[3],pBlues[7], dfStorageTargets$ColorLite[3],dfStorageTargets$ColorLite[1],dfStorageTargets$ColorLite[2]), breaks = cSedValuesForTime) +
scale_color_manual(values = c(pBlues[3],pBlues[5], pBlues[7], dfStorageTargets$ColorLite[3],dfStorageTargets$ColorLite[1],dfStorageTargets$ColorLite[2]), breaks = cSedValuesForTime, labels = percent(cSedValues/100)) +
facet_wrap(~RunName, nrow = 3) +  # Set nrow to 1 to make the panels side by side
theme_bw() +
guides(fill= guide_legend(title="Storage Target", order=2), color = guide_legend(title="Reservoir\nSedimentation", order=1)) +
scale_size(guide="none") +
labs(x="Model Year", y="Total Storage\n(1,000 acre-feet)") +
theme(text = element_text(size=18))
#legend.position = "none")
ggsave("Fig10b-StorageTimeSeries.jpg",width = 10,
height = 7, units = "in",
dpi = 300)
#### Figure 11 - Show time series of shortage plots for same runs
ggplot(dfTimePlotData, aes(x = Date, y = Shortage/1e3)) +
#Line plots of storage series
# Sed facets, runs ~ colors
#geom_line(aes(color = RunName), size = 1) +
#scale_color_manual(values = c(pBlues[5],pBlues[3],pBlues[7]), breaks = c("1610 to 1640 / 428", "1570 to 1600 / 492","Hot Dry / 544")) +
#facet_wrap(~Sed, nrow = 2) +  # Set nrow to 1 to make the panels side by side
#Seds as colors, runs ~ facets
geom_line(aes(color = Sed), size = 1) +
scale_color_manual(values = c(pBlues[3],pBlues[5], pBlues[7]), breaks = cSedValuesForTime) + #c("0% Sedimentation", "30% Sedimentation")) +
facet_wrap(~RunName, nrow = 3) +  # Set nrow to 1 to make the panels side by side
theme_bw() +
#guides(color = guide_legend(title="Run (Flow / Demand)", order=1)) +
guides(color = guide_legend(title="", order=1)) +
scale_size(guide="none") +
labs(x="Model Year", y="Shortage\n(1,000 acre-feet)") +
theme(text = element_text(size=18))
#legend.position = "none")
ggsave("Fig11-ShortageTimeSeries.jpg",width = 10,
height = 7, units = "in",
dpi = 300)
#### Figure 12 - Experiment to use Figure 10 but add line thickness at Shortage
ggplot(dfTimePlotData, aes(x = Date, y = Tot_Mnthly_Stor/1e3)) +
#Area plots of storage criteria
geom_area(data=dfStorageCriteria %>% filter(Name=="Moderate"), aes(x = Date, y= Volume/1e3, color = Name, fill = Name),
alpha = 1, position = "identity") +
geom_area(data=dfStorageCriteria %>% filter(Name=="Severe"), aes(x = Date, y= Volume/1e3, color = Name, fill = Name),
alpha = 1, position = "identity") +
geom_area(data=dfStorageCriteria %>% filter(Name=="Extreme"), aes(x = Date, y= Volume/1e3, color = Name, fill = Name),
alpha = 1, position = "identity") +
#geom_ribbon(data=dfStorageCriteria, aes(ymax = Volume/1e3, ymin=0, fill = Name)) +
#scale_color_manual(values = dfStorageTargets$Color) +
scale_fill_manual(values = c(dfStorageTargets$ColorLite[3],dfStorageTargets$ColorLite[1],dfStorageTargets$ColorLite[2]), breaks = c("Moderate","Severe","Extreme")) +
#Line plots of storage series
geom_line(aes(color = RunName, size=Shortage)) +
scale_color_manual(values = c(pBlues[3],pBlues[5],pBlues[7], dfStorageTargets$ColorLite[3],dfStorageTargets$ColorLite[1],dfStorageTargets$ColorLite[2]), breaks = cRunNames) + # c("428 / 1610 to 1640", "492 / 1570 to 1600","544 / Hot Dry")) +
facet_wrap(~Sed, nrow = 3) +  # Set nrow to 1 to make the panels side by side
theme_bw() +
guides(fill= guide_legend(title="Storage Target", order=3),
color = guide_legend(title="Run (Demand / Flow)", order=1),
size = guide_legend(title="Shortage (ac-ft per mon.)", order=2)) +
scale_size(guide="none") +
labs(x="Model Year", y="Total Storage\n(1,000 acre-feet)") +
theme(text = element_text(size=18))
#legend.position = "none")
ggsave("Fig12-StorageShortageTimeSeries.jpg",width = 10,
height = 7, units = "in",
dpi = 300)
### Figure 12b. Shortages and storage. Runs as facets. Traces as sedimentation
#### Figure 12 - Experiment to use Figure 10 but add line thickness at Shortage
ggplot(dfTimePlotData, aes(x = Date, y = Tot_Mnthly_Stor/1e3)) +
#Area plots of storage criteria
geom_area(data=dfStorageCriteria %>% filter(Name=="Moderate"), aes(x = Date, y= Volume/1e3, color = Name, fill = Name),
alpha = 1, position = "identity") +
geom_area(data=dfStorageCriteria %>% filter(Name=="Severe"), aes(x = Date, y= Volume/1e3, color = Name, fill = Name),
alpha = 1, position = "identity") +
geom_area(data=dfStorageCriteria %>% filter(Name=="Extreme"), aes(x = Date, y= Volume/1e3, color = Name, fill = Name),
alpha = 1, position = "identity") +
#geom_ribbon(data=dfStorageCriteria, aes(ymax = Volume/1e3, ymin=0, fill = Name)) +
#scale_color_manual(values = dfStorageTargets$Color) +
scale_fill_manual(values = c(dfStorageTargets$ColorLite[3],dfStorageTargets$ColorLite[1],dfStorageTargets$ColorLite[2]), breaks = c("Moderate","Severe","Extreme")) +
#Line plots of storage series
geom_line(aes(color = Sed, size=Shortage)) +
scale_color_manual(values = c(pBlues[3],pBlues[5],pBlues[7], dfStorageTargets$ColorLite[3],dfStorageTargets$ColorLite[1],dfStorageTargets$ColorLite[2]), breaks = cSedValuesForTime, labels = percent(cSedValues/100)) + # c("428 / 1610 to 1640", "492 / 1570 to 1600","544 / Hot Dry")) +
facet_wrap(~RunName, nrow = 3) +  # Set nrow to 1 to make the panels side by side
theme_bw() +
guides(fill= guide_legend(title="Storage Target", order=3),
color = guide_legend(title="Reservoir Sedimentation", order=1),
size = guide_legend(title="Shortage (ac-ft per mon.)", order=2)) +
scale_size(guide="none") +
labs(x="Model Year", y="Total Storage\n(1,000 acre-feet)") +
theme(text = element_text(size=18))
#legend.position = "none")
ggsave("Fig12b-StorageShortageTimeSeries.jpg",width = 10,
height = 7, units = "in",
dpi = 300)
### Figure 13. Fraction of years model shortage is greater than Drought-Contingency Plan shortages?
# use a lot of code from Figure 7
# Includes single contour plot. Markers for legend.
# Contours represent fraction of years where model shortages are greater than DCP
# A few steps (new mutated columns.
#    Figure out storage criteria
#    Figure out corresponding DCP shortage
#    Compare
# A. Figure out storage criteria
# Add a zero (no shortage) tier
dfStorageTargetNone <- data.frame(Num = 0,
Name = "None",
Color = "White",
Volume = 10000000, #Arbitrary large
Cutback = 0,  #Annual cutback in acre-feet per year
ColumnNum = NA)
#Combien the no storage criteria with existing ones
dfStorageTargetsWithNone <- rbind(dfStorageTargetNone, dfStorageTargets[,1:6])
# Select the June data
dfShortageResults <- AllData %>% filter(Month.x == 6, Sedimentation == 0)
# Sum the three binaries for storage above each threshold. Subtract from 3. This gives the threshold level (0, 1, 2, or 3)
dfShortageResults$Level <- 3 - (dfShortageResults$Moderate + dfShortageResults$Severe + dfShortageResults$Extreme)
# Join the Storage Target table by the number
dfShortageResultsStorJoin <- inner_join(dfShortageResults,dfStorageTargetsWithNone,by = c("Level"= "Num"))
# New column to indicate when model cutback exceeds DCP cutback (DCP cutback is met; 1=yes met, 0=no)
dfShortageResultsStorJoin$DCPNotMet <- ifelse(dfShortageResultsStorJoin$`Annual Avg Shortage` > dfShortageResultsStorJoin$Cutback, 1, 0)
#Summarize cuts met by water year
dfShortages <- dfShortageResultsStorJoin %>% group_by(Demand, Sedimentation, `Annual Avg Inflow`) %>%
summarize(DCPMissed = sum(DCPNotMet)/30*100, ModRel = mean(`Mod Reliability`))
dfPlotShapes$DCPMissed <- NA
sCurrCol <- "DCPMissed"
### Attempt to get shape guides to show
#pSingleShort <- ggplot(dfPlotShapes, aes_string(x="Demand/1e3",y= "`AnnualAvgFlow`/1e3", z = "DCPMissed")) +
pSingleShort <- ggplot(dfPlotShapes %>% filter(DataType=="Historical"), aes_string(x="Demand/1e3",y= "`AnnualAvgFlow`/1e3", z = "DCPMissed")) +
#Fill Color
metR::geom_contour_fill(data=dfShortages, aes_string(x="Demand/1e3",y= "`Annual Avg Inflow`/1e3", z = "DCPMissed"), breaks = relBreaks,na.fill = TRUE) +
#Contour lines
metR::geom_contour2(data=dfShortages, aes_string(x="Demand/1e3",y= "`Annual Avg Inflow`/1e3", z = sCurrCol), colour = "black", size=0.75, breaks = relBreaks)   +
#Label contour lines (This is not working very well)
geom_dl(data=dfShortages, aes(x=Demand/1e3, y=`Annual Avg Inflow`/1e3, label=..level..), method=list("angled.boxes", cex=2), stat="contour", breaks = relBreaks) +
#Overplot model scenario points
geom_point(aes(shape=DataType, size=DataType, color = DataType)) +
#Overplot historical point
#Add secondary x and y axis to label scenarios
scale_y_continuous(sec.axis = sec_axis(~. +0, name = "", breaks = dfFlowScenLabels$`Annual Avg Inflow`/1e3, labels = dfFlowScenLabels$FlowLabel)) +
scale_x_continuous(sec.axis = sec_axis(~. +0, name = "", breaks = dfDemScenLabels$Demand,  labels = format(dfDemScenLabels$Demand,digits=0))) +
#Fill the contours from white to the target color
scale_fill_gradientn(name = "Reliability",colours = c("White","Green"), na.value = "white") +
scale_shape_manual(values = c(15,19)) +  # Square / Circle
scale_color_manual(values = c("Blue","Black")) +
scale_size_manual(values = c(6,4)) +
#Create the facets by sedimentation level
#facet_wrap( ~Sed, nrow = nSeds) +
coord_equal(ratio=1) +
theme_bw() +
guides(fill= "none") +
#guides(shape = guide_legend(title="", order=1)) +
#scale_size(guide="none") +
labs(x=AxisTitles[1], y=AxisTitles[2]) +
theme(text = element_text(size=14), legend.title=element_blank()) #,
#legend.position = "none")
print(pSingleShort)
ggsave("Fig13-ShortageGtDCP.jpg",width = 9,
height = 6, units = "in",
dpi = 300)
#Return to original folder
setwd(startWD)
############ End of June 1 code##########
