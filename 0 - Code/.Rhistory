group_by(Trace_Notation) %>%
summarise_all(funs(mean(Shortage)))
Avg_Annual_Shortage<-data.frame(Avg_Annual_Shortage$Shortage)
colnames(Avg_Annual_Shortage)<-"Annual Avg Shortage"
Avg_Annual_Shortage$Trace_Notation <- Trace_Notation
colnames(Avg_Annual_Shortage)[2]<-"Trace_Notation"
Data <- full_join(Data,Avg_Annual_Inflow,by="Trace_Notation")
Data <- full_join(Data,Avg_Annual_Shortage,by ="Trace_Notation")
# Define reservoir levels as arrays: Moderate -> Severe -> Extreme
cStoreNames <- c("Moderate", "Severe", "Extreme")
cStorLevels <- c(380000,340000,280000)
cColors <- c("Yellow", "Orange", "Red")
ModerateLevel<- 380000
SevereLevel <- 340000
ExtremeLevel<-280000
#Calculate the number of storage levels
nLevels <- length(cStorLevels)
#Pull out the monthly storage values
#Storage_Metrics <- data.frame(Data$Tot_Mnthly_Stor)
Storage_Metrics <- data.frame(Data[,c("Month","Tot_Mnthly_Stor")])
#Create more duplicate columns
Storage_Metrics <- cbind(Storage_Metrics, replicate(nLevels-1,Storage_Metrics$Tot_Mnthly_Stor))
#Rename the columns
colnames(Storage_Metrics)[2:(nLevels+1)] <- cStoreNames
#Record the last data column
cLastDataCol <- ncol(Data)
#Loop through columns. In each column convert the storage values to a binary: 1 if greater or equal to target. 0 if below
for (i in 1:nLevels) {
#Is the storage criteria met?
Storage_Metrics[,1+i] <- ifelse(Storage_Metrics[,1+i] > cStorLevels[i],1,0) #1 Greater than or equal
#Storage_Metrics[,1+i] <- ifelse(Storage_Metrics[,1+i] < cStorLevels[i],1,0)   #1 Less than or equal
#Save the result back to the Data datafrom
Data[,cLastDataCol + i] <- Storage_Metrics[,1+i]
#Rename the column
colnames(Data)[cLastDataCol +i] <- cStoreNames[i]
}
cRelColNames <- paste0("Rel", cStoreNames)
#Calculate the average (fraction) for each combination of traces for each column. This represents
#the reliability
dfStorageReliability <-Data[,c("Trace_Notation","Month",cStoreNames)] %>%
filter(Month == 6) %>%  #Filter on the June month because that is when we care about storage at criteria
group_by(Trace_Notation) %>%
summarise_all(funs(mean))
#Multiply by 100 to get a percent
#dfStorageReliability[,cStoreNames] <- dfStorageReliability[,cStoreNames]*100
dfStorageReliability[,cStoreNames] <- 100-(dfStorageReliability[,cStoreNames]*100)  #Reliability -- How often is metric in below storage specified value
# Rename columns
colnames(dfStorageReliability)[3:5] <- c("Mod Reliability", "Sev Reliability","Ext Reliability")
##### Join the Reservoir storage reliability back with the big data set
AllData<-right_join(Data,dfStorageReliability,by='Trace_Notation')
##################################################################################################
###PLOTS###
##################################################################################################
library(plotly)
Data_NoSed <- filter(AllData,Sedimentation==0)
Data_10Perc <- filter(AllData,Sedimentation==10)
Data_30Perc <- filter(AllData,Sedimentation==30)
#Select Data frame to do Calculation on.
PlotData<- Data_NoSed
PlotData10 <- Data_10Perc
PlotData30 <- Data_30Perc
#No Sedimentation
#########Individual PLOTS############
x<-PlotData$Demand
y<-PlotData$`Annual Avg Inflow`
TorF <- FALSE
# Moderate Demand Level
z=PlotData$`Mod Reliability`
p1 <- plot_ly(
x = x,
y = y,
z = z , type = "contour",contours = list(showlabels = TRUE),showscale = TorF, colors = c("white","yellow"))%>%
colorbar(title = "Percent of\n Years below \n Storage Level")%>%
layout(title = "June 1st Storage Levels Reliability
Moderate Storage Level (380,000 Acre-Feet)",
xaxis = list(title ="Demand (Acre-Feet/Year)", showticklabels = FALSE),
yaxis = list(title = "Inflows (Acre-Feet/Year)") ,
annotations = list(text = "Moderate Storage
Level (380,000 Acre-Feet)",
x = 475000,
y = 950000,
yref = "y",
xref = "x",
xanchor = "middle",
yanchor = "top",
showarrow = FALSE,
font = list(size = 15))
)
p1
Tot_Annual_Demand <- read.csv("SumMIandAG.csv")
######## - A -   Compiling Annual Demands  ########
setwd("~/GitHub/WeberBasinVulnerability/WeberBasinVulnerability/1 - Scenario Processing/Annual Service Area Demand Scenarios/Output")
library(readxl)
DemandSelections <- read_excel("DemandSelections.xlsx")
Tot_Annual_Demand <- read.csv("SumMIandAG.csv")
Tot_Annual_Demand[,2] <- DemandSelections$MI...AG
Tot_Annual_Demand
Tot_Demand <- data.frame(c(1:108))
i=1
j=1
while (i<=6) {
Tot_Demand[j:(j+17),] <- rep(Tot_Annual_Demand[i,2],(18))
i=i+1
j=j+18
}
#View(Tot_Demand)
colnames(Tot_Demand) <- "Demand"
rownames(Tot_Demand) <- Trace_Notation
Tot_Mnthly_Demand<-data.frame(rep(Tot_Demand$Demand,359))
colnames(Tot_Mnthly_Demand) <- "Demand"
# Switch into local directory
setwd("~/GitHub/WeberBasinVulnerability/WeberBasinVulnerability/2 - RiverWare Modeling/Scenario")
setwd(startWD)
setwd("../2 - RiverWare Modeling/Scenario")
#Input Monthly data from RiverSmart Analysis
Tot_Mnthly_Inflow <-read.csv("Trace1,Trace1,Trace1/Total Inflows.csv")
# Switch into local directory
setwd("~/GitHub/WeberBasinVulnerability/WeberBasinVulnerability/2 - RiverWare Modeling/Scenario")
#Input Monthly data from RiverSmart Analysis
Tot_Mnthly_Inflow <-read.csv("Trace1,Trace1,Trace1/Total Inflows.csv")
i=1
for(TTTNum in 1:TraceNumber){
for(TTNum in 1:TraceNumber1){
for(TNum in 1:TraceNumber2){
TraceDirectory <- paste0(",Trace",TNum)
TraceDirectory <-paste0 (TraceDirectory,"/Total Inflows.csv")
TraceNum1<- paste0(",Trace",TTNum)
TraceDirectory <- paste0(TraceNum1,TraceDirectory)
TraceNum2 <- paste0("Trace",TTTNum)
TraceDirectory <- paste0(TraceNum2,TraceDirectory)
Location <- TraceDirectory
Temp_Storage <- read.csv(Location)
Tot_Mnthly_Inflow[,i] <- Temp_Storage[,5]
colnames(Tot_Mnthly_Inflow)[i] <-  TraceDirectory
i=i+1
}
}
}
Tot_Mnthly_Inflow <- data.frame(Tot_Mnthly_Inflow)
Months <- rep(c(1:12),31)
Months<- Months[(11:369)]
Tot_Mnthly_Inflow$Months <- Months
#Create Years
Years <- c(0:372)
i=1
j=1
while (j<=31) {
Years[(i:(i+11))] <- rep((j-1),12)
i=i+12
j=j+1
}
Years<- Years[(11:369)]
#Add months and Years column
#Tot_Mnthly_Inflow$Months <-Months
Tot_Mnthly_Inflow$Years <- Years
#Add a Water year - The water year is designated by the calendar year in which it ends, so the 2010 water year (USGS) started on October 1, 2009 and ended on September 30, 2010
Tot_Mnthly_Inflow$WaterYear <- ifelse(Tot_Mnthly_Inflow$Months>= 10,Tot_Mnthly_Inflow$Years + 1, Tot_Mnthly_Inflow$Years)
WaterYear<-ifelse(Tot_Mnthly_Inflow$Months>= 10,Tot_Mnthly_Inflow$Years + 1, Tot_Mnthly_Inflow$Years)
#Transpose Data
Tot_Mnthly_Inflow_Transposed <- t(Tot_Mnthly_Inflow)
Tot_Mnthly_Inflow_Transposed <- data.frame(Tot_Mnthly_Inflow_Transposed)
#View(Tot_Mnthly_Inflow_Transposed)
#Stack Columns
Tot_Mnthly_Inflow_Stacked <- stack(Tot_Mnthly_Inflow_Transposed[1:108,1:359])
Tot_Mnthly_Inflow <- Tot_Mnthly_Inflow_Stacked$values
##Total Sedimentation Changes on Reservoir
#Move back to code directory
setwd(startWD)
#Move into the local input directory
#setwd("../3 - Post Processing")
setwd("~/GitHub/WeberBasinVulnerability/WeberBasinVulnerability/3 - Post Processing")
Tot_Sed <- read.csv("Sedimentation.csv")
Tot_Sed <- Tot_Sed[,2]
Tot_Mnthly_Sed <- rep(Tot_Sed,359)
#### Time Columns: Mnths, Years and Water Years #####
Mnths<-c(1:38772)
i=1
j=1
while (i<=359) {
Mnths[j:(i*108)]<-Months[i]
i=i+1
j=j+108
}
Yrs<-c(1:38772)
i=1
j=1
while (i<=359) {
Yrs[j:(i*108)]<-Years[i]
i=i+1
j=j+108
}
Wtr_Yrs<-c(1:38772)
i=1
j=1
while (i<=359) {
Wtr_Yrs[j:(i*108)]<-WaterYear[i]
i=i+1
j=j+108
}
##################   Compile Mnthly Input data    ##################################
#Create Data Frame
Inputs<- data.frame(Tot_Mnthly_Demand)
Inputs$Inflow <- Tot_Mnthly_Inflow
Inputs$Sedimentation <- Tot_Mnthly_Sed
Inputs$Trace_Notation <- Trace_Notation
Inputs$Month<-Mnths
Inputs$Years<-Yrs
Inputs$WaterYear<-Wtr_Yrs
#Number
Inputs$Number<-c(1:38772)
Inputs <- data.frame(Inputs)
##################################  - 2 - Output data ########################################################
#Set Local Directory
setwd(startWD)
setwd("../2 - RiverWare Modeling/Scenario")
setwd("~/GitHub/WeberBasinVulnerability/WeberBasinVulnerability/2 - RiverWare Modeling/Scenario")
Tot_Mnthly_Stor <- read.csv("Trace1,Trace1,Trace1/Total Storage_NO EVAP.csv")
Tot_Mnthly_Short <-read.csv("Trace1,Trace1,Trace1/Total Shortages.csv")
##### Total Storage #####
i=1
for(TTTNum in 1:TraceNumber){
for(TTNum in 1:TraceNumber1){
for(TNum in 1:TraceNumber2){
TraceDirectory <- paste0(",Trace",TNum)
TraceDirectory <-paste0 (TraceDirectory,"/Total Storage_NO EVAP.csv")
TraceNum1<- paste0(",Trace",TTNum)
TraceDirectory <- paste0(TraceNum1,TraceDirectory)
TraceNum2 <- paste0("Trace",TTTNum)
TraceDirectory <- paste0(TraceNum2,TraceDirectory)
Location <- TraceDirectory
Temp_Storage <- read.csv(Location)
Tot_Mnthly_Stor[,i] <- Temp_Storage[,5]
colnames(Tot_Mnthly_Stor)[i] <-  TraceDirectory
i=i+1
}
}
}
Tot_Mnthly_Stor <- data.frame(Tot_Mnthly_Stor)
#Transpose Data
Tot_Mnthly_Stor_Transposed <- t(Tot_Mnthly_Stor)
Tot_Mnthly_Stor_Transposed <- data.frame(Tot_Mnthly_Stor_Transposed)
#View(Tot_Mnthly_Inflow_Transposed)
#Stack Columns
Tot_Mnthly_Stor_Stacked <- stack(Tot_Mnthly_Stor_Transposed[1:108,1:359])
Tot_Mnthly_Stor <- Tot_Mnthly_Stor_Stacked$values
Tot_Mnthly_Stor <- data.frame(Tot_Mnthly_Stor)
##### Total Shortages #####
i=1
for(TTTNum in 1:TraceNumber){
for(TTNum in 1:TraceNumber1){
for(TNum in 1:TraceNumber2){
TraceDirectory <- paste0(",Trace",TNum)
TraceDirectory <-paste0 (TraceDirectory,"/Total Shortages.csv")
TraceNum1<- paste0(",Trace",TTNum)
TraceDirectory <- paste0(TraceNum1,TraceDirectory)
TraceNum2 <- paste0("Trace",TTTNum)
TraceDirectory <- paste0(TraceNum2,TraceDirectory)
Location <- TraceDirectory
Temp_Storage <- read.csv(Location)
Tot_Mnthly_Short[,i] <- Temp_Storage[,5]
colnames(Tot_Mnthly_Short)[i] <-  TraceDirectory
i=i+1
}
}
}
#Transpose Data
Tot_Mnthly_Short_Transposed <- t(Tot_Mnthly_Short)
Tot_Mnthly_Short_Transposed <- data.frame(Tot_Mnthly_Short_Transposed)
Tot_Mnthly_Short <- Tot_Mnthly_Short_Stacked$values
########################   Compile Output data   ###############################
Outputs <- Tot_Mnthly_Stor
#View(Tot_Mnthly_Inflow_Transposed)
#Stack Columns
Tot_Mnthly_Short_Stacked <- stack(Tot_Mnthly_Short_Transposed[1:108,1:359])
Tot_Mnthly_Short <- data.frame(Tot_Mnthly_Short)
Outputs$Shortage <- Tot_Mnthly_Short
# Add Trace Notation
#Outputs$Trace_Notation <-Trace_Notation
#Number
Outputs$Number<-c(1:38772)
Outputs<-data.frame(Outputs)
#########################  Merge  ---- Data Dataframe########################
Data <- merge(Inputs,Outputs,by="Number")
#From Monthly Streamflows to Annual Streamflows
Annual_Inflows <-Data %>%
group_by(WaterYear,Trace_Notation) %>%
summarise_all(funs(sum(Inflow)))
#add Inflow name column
Annual_Inflows$Scenario <-rep(c(rep('Hot Dry Flows',3),rep('Base Flows (1940-1970)',3),rep('Duration & Intensity Droughts (1930-1960)',3),rep('Duration Droughts (1610-1640)',3),rep('Intensity Drought (1520-1550)',3),rep('Intensity Drought (1570-1600)',3)),60)
#Simplify data
SimpAI<-Annual_Inflows %>% distinct(Scenario,.keep_all = TRUE)
#Summed Total Inflows
plot_ly(SimpAI,x=SimpAI$Scenario,y=SimpAI$Inflow,
type = 'bar',color = SimpAI$Scenario,colors = "Set1")%>%
layout(title='Summed Inflow Scenarios',xaxis=xcategoryorder,yaxis = list(title='Total Inflow by Scenario (Acre-Feet)'))
#Scatter plots
plot_ly(Annual_Inflows,x=Annual_Inflows$Scenario,y=Annual_Inflows$Inflow,
type = 'scatter',color = Annual_Inflows$Scenario,colors = "Set1")%>%
layout(title='Summed Inflow Scenarios',xaxis=xcategoryorder,yaxis = list(title='Total Inflow by Scenario (Acre-Feet)'))
#Plot single line
plot_ly(Annual_Inflows,y=Annual_Inflows$Inflow,
type = 'scatter',mode='line',color = Annual_Inflows$Scenario,colors = "Set1")%>%
layout(title='Summed Inflow Scenarios',xaxis=list(title='Water Year'),yaxis = list(title='Total Inflow by Scenario (Acre-Feet)'))
####From Annual Streamflows to Average Annual Streamflows###
Avg_Annual_Inflows <- Annual_Inflows %>%
group_by(Trace_Notation) %>%
summarise_all(funs(mean(Inflow)))
plot_ly(Annual_Inflows,x=Annual_Inflows$WaterYear,y=Annual_Inflows$Inflow,
type = 'scatter',mode='line',color = Annual_Inflows$Scenario,colors = "Set1")%>%
layout(title='Summed Inflow Scenarios',xaxis=list(title='Water Year'),yaxis = list(title='Total Inflow by Scenario (Acre-Feet)'))
### PLOT ANNUAL INFLOWS
#BAR PLOT
#fix order of bar plot by trace order
xcategoryorder<-list(categoryorder ="array",
categoryarray =c(Annual_Inflows$Scenario))
####From Annual Streamflows to Average Annual Streamflows###
Avg_Annual_Inflows <- Annual_Inflows %>%
group_by(Trace_Notation) %>%
summarise_all(funs(mean(Inflow)))
Avg_Annual_Inflow<-data.frame(Avg_Annual_Inflows$Inflow)
colnames(Avg_Annual_Inflow)<-"Annual Avg Inflow"
Avg_Annual_Inflow$Trace_Notation <-Trace_Notation
colnames(Avg_Annual_Inflow)[2]<-"Trace_Notation"
#add Inflow name column
Avg_Annual_Inflows$Scenario <-rep(c(rep('Hot Dry Flows',3),rep('Base Flows (1940-1970)',3),rep('Duration & Intensity Droughts (1930-1960)',3),rep('Duration Droughts (1610-1640)',3),rep('Intensity Drought (1520-1550)',3),rep('Intensity Drought (1570-1600)',3)),6)
#Simplify data
SimpAAI<-Avg_Annual_Inflows %>% distinct(Scenario,.keep_all = TRUE)
#Plots Bar
#Mean Inflows
plot_ly(SimpAAI,x=SimpAAI$Scenario,y=SimpAAI$Inflow,
type = 'bar',color = SimpAAI$Scenario,colors = "Set1")%>%
layout(title='Mean Inflow Scenarios',xaxis=xcategoryorder,yaxis = list(title='Mean Inflow by Scenario (Acre-Feet)'),showlegend=FALSE)
#Repeat Calculation from monthly shortage to total annual shortage by water year
Annual_Shortage <-Data %>%
group_by(WaterYear,Trace_Notation) %>%
summarise_all(funs(sum(Shortage)))
Avg_Annual_Shortage <- Annual_Shortage %>%
group_by(Trace_Notation) %>%
summarise_all(funs(mean(Shortage)))
Avg_Annual_Shortage<-data.frame(Avg_Annual_Shortage$Shortage)
colnames(Avg_Annual_Shortage)<-"Annual Avg Shortage"
Avg_Annual_Shortage$Trace_Notation <- Trace_Notation
colnames(Avg_Annual_Shortage)[2]<-"Trace_Notation"
Data <- full_join(Data,Avg_Annual_Inflow,by="Trace_Notation")
Data <- full_join(Data,Avg_Annual_Shortage,by ="Trace_Notation")
# Define reservoir levels as arrays: Moderate -> Severe -> Extreme
cStoreNames <- c("Moderate", "Severe", "Extreme")
cStorLevels <- c(380000,340000,280000)
cColors <- c("Yellow", "Orange", "Red")
ModerateLevel<- 380000
SevereLevel <- 340000
ExtremeLevel<-280000
#Calculate the number of storage levels
nLevels <- length(cStorLevels)
#Pull out the monthly storage values
#Storage_Metrics <- data.frame(Data$Tot_Mnthly_Stor)
Storage_Metrics <- data.frame(Data[,c("Month","Tot_Mnthly_Stor")])
#Create more duplicate columns
Storage_Metrics <- cbind(Storage_Metrics, replicate(nLevels-1,Storage_Metrics$Tot_Mnthly_Stor))
#Rename the columns
colnames(Storage_Metrics)[2:(nLevels+1)] <- cStoreNames
#Record the last data column
cLastDataCol <- ncol(Data)
#Loop through columns. In each column convert the storage values to a binary: 1 if greater or equal to target. 0 if below
for (i in 1:nLevels) {
#Is the storage criteria met?
Storage_Metrics[,1+i] <- ifelse(Storage_Metrics[,1+i] > cStorLevels[i],1,0) #1 Greater than or equal
#Storage_Metrics[,1+i] <- ifelse(Storage_Metrics[,1+i] < cStorLevels[i],1,0)   #1 Less than or equal
#Save the result back to the Data datafrom
Data[,cLastDataCol + i] <- Storage_Metrics[,1+i]
#Rename the column
colnames(Data)[cLastDataCol +i] <- cStoreNames[i]
}
cRelColNames <- paste0("Rel", cStoreNames)
#Calculate the average (fraction) for each combination of traces for each column. This represents
#the reliability
dfStorageReliability <-Data[,c("Trace_Notation","Month",cStoreNames)] %>%
filter(Month == 6) %>%  #Filter on the June month because that is when we care about storage at criteria
group_by(Trace_Notation) %>%
summarise_all(funs(mean))
#Multiply by 100 to get a percent
#dfStorageReliability[,cStoreNames] <- dfStorageReliability[,cStoreNames]*100
dfStorageReliability[,cStoreNames] <- 100-(dfStorageReliability[,cStoreNames]*100)  #Reliability -- How often is metric in below storage specified value
# Rename columns
colnames(dfStorageReliability)[3:5] <- c("Mod Reliability", "Sev Reliability","Ext Reliability")
##### Join the Reservoir storage reliability back with the big data set
AllData<-right_join(Data,dfStorageReliability,by='Trace_Notation')
##################################################################################################
###PLOTS###
##################################################################################################
library(plotly)
Data_NoSed <- filter(AllData,Sedimentation==0)
Data_10Perc <- filter(AllData,Sedimentation==10)
Data_30Perc <- filter(AllData,Sedimentation==30)
#Select Data frame to do Calculation on.
PlotData<- Data_NoSed
PlotData10 <- Data_10Perc
PlotData30 <- Data_30Perc
#No Sedimentation
#########Individual PLOTS############
x<-PlotData$Demand
y<-PlotData$`Annual Avg Inflow`
TorF <- FALSE
# Moderate Demand Level
z=PlotData$`Mod Reliability`
p1 <- plot_ly(
x = x,
y = y,
z = z , type = "contour",contours = list(showlabels = TRUE),showscale = TorF, colors = c("white","yellow"))%>%
colorbar(title = "Percent of\n Years below \n Storage Level")%>%
layout(title = "June 1st Storage Levels Reliability
Moderate Storage Level (380,000 Acre-Feet)",
xaxis = list(title ="Demand (Acre-Feet/Year)", showticklabels = FALSE),
yaxis = list(title = "Inflows (Acre-Feet/Year)") ,
annotations = list(text = "Moderate Storage
Level (380,000 Acre-Feet)",
x = 475000,
y = 950000,
yref = "y",
xref = "x",
xanchor = "middle",
yanchor = "top",
showarrow = FALSE,
font = list(size = 15))
)
p1
#Severe Demand Level
z=PlotData$`Sev Reliability`
p2 <- plot_ly(
x = x,
y = y,
z = z, type = "contour",contours = list(showlabels = TRUE),showscale = TorF, colors = c("white","orange"))%>%
colorbar(title = "Percent of\n Years below \n Storage Level")%>%
layout(title = "June 1st Storage Levels Reliability
Severe Storage Level (340,000 Acre-Feet)",
xaxis = list(title ="Demand (Acre-Feet/Year)"),
yaxis = list(title = "Inflows (Acre-Feet/Year)")  ,
annotations = list(text = "Severe Storage
Level (340,000 Acre-Feet)",
x = 475000,
y = 950000,
yref = "y",
xref = "x",
xanchor = "middle",
yanchor = "top",
showarrow = FALSE,
font = list(size = 15))
)
p2
#Extreme Demand Level
z=PlotData$`Ext Reliability`
p3 <- plot_ly(
x = x,
y = y,
z = z, type = "contour",contours = list(showlabels = TRUE),showscale = TorF,colors = c("white","red"))%>%
colorbar(title = "Percent of\n Years below \n Storage Level")%>%
layout(title = "June 1st Storage Levels Reliability
Extreme Storage Level (280,000 Acre-Feet)",
xaxis = list(title ="Demand (Acre-Feet/Year)"),
yaxis = list(title = "Inflows (Acre-Feet/Year)")  ,
annotations = list(text = "Extreme Storage
Level (280,000 Acre-Feet)",
x = 475000,
y = 950000,
yref = "y",
xref = "x",
xanchor = "middle",
yanchor = "top",
showarrow = FALSE,
font = list(size = 15))
)
p3
PlotData2<-PlotData
t <- list(
family = "sans serif",
size = 8,
color = toRGB("grey50"))
ontop_p1<-add_trace(p1,x=x,y=y,type='scatter',mode='text',text=PlotData$Trace_Notation,textfont= t,textposition = 'middle right', showlegend =F)
ontop_p2<-add_trace(p2,x=x,y=y,type='scatter',showlegend =F)
#ontop_p1<-add_trace(p1,x=x,y=y,type='scatter',mode='text',text=PlotData$Trace_Notation,textfont= t,textposition = 'middle right', showlegend =F)
ontop_p1<-add_trace(p1,x=x,y=y,type='scatter',mode='text', showlegend =F)
#ontop_p1<-add_trace(p1,x=x,y=y,type='scatter',mode='text',text=PlotData$Trace_Notation,textfont= t,textposition = 'middle right', showlegend =F)
ontop_p1<-add_trace(p1,x=x,y=y,type='scatter', showlegend =F)
ontop_p2<-add_trace(p2,x=x,y=y,type='scatter',showlegend =F)
ontop_p3<-add_trace(p3,x=x,y=y,type='scatter',showlegend =F)
#View
ontop_p1
#Extreme Demand Level
z=PlotData$`Ext Reliability`
p3 <- plot_ly(
x = x,
y = y,
z = z, type = "contour",contours = list(showlabels = TRUE),showscale = TorF,colors = c("white","red"))%>%
colorbar(title = "Percent of\n Years below \n Storage Level")%>%
layout(title = "June 1st Storage Levels Reliability
Extreme Storage Level (280,000 Acre-Feet)",
xaxis = list(title ="Demand (Acre-Feet/Year)"),
yaxis = list(title = "Inflows (Acre-Feet/Year)") # ,
#annotations = list(text = "Extreme Storage
#                  Level (280,000 Acre-Feet)",
#                 x = 475000,
#               y = 950000,
#               yref = "y",
#              xref = "x",
#             xanchor = "middle",
#            yanchor = "top",
#           showarrow = FALSE,
#          font = list(size = 15))
)
p3
ontop_p3<-add_trace(p3,x=x,y=y,type='scatter',showlegend =F)
ontop_p3
