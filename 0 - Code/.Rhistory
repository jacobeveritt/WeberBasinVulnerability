xaxis=list(title='FACTORS'))
### Clear any existing data or functions.
#rm(list=ls())
library("dplyr", lib.loc="~/R/win-library/3.5")
#Record the current directory (0 - Code) for later recall
startWD <- getwd()
###Total Storage Compilation#--------------------------------------------------------------------------------#
#Store the current code directory so we can later return to it (0 - Code)
### Load the package or install if not present
if (!require("RColorBrewer")) {
install.packages("RColorBrewer")
library(RColorBrewer)
}
library(readr)
#install.packages("reshape")
library(reshape) #For Melt
library(lubridate) #For month
library(plotly) # For Plots
library(data.table)
library(dplyr)
####-----------------------------Trace Notation--------------------------------------------------
# Build names of folders output by RiverSmart
TraceNumber <- 6
TraceNumber1 <-3
TraceNumber2 <-6
TraceNumber3 <-3
Tot_TraceNum <- TraceNumber*TraceNumber1*TraceNumber2*TraceNumber3
Trace_Notation <-c(1:Tot_TraceNum)
i=1
for(TTTTNum in 1:TraceNumber){
for(TTTNum in 1:TraceNumber1){
for(TTNum in 1:TraceNumber2){
for(TNum in 1:TraceNumber3){
TraceDirectory <- paste0(",Trace",TNum)
TraceNum1<- paste0(",Trace",TTNum)
TraceDirectory <- paste0(TraceNum1,TraceDirectory)
TraceNum2 <- paste0(",Trace",TTTNum)
TraceDirectory <- paste0(TraceNum2,TraceDirectory)
TraceNum3 <- paste0("Trace",TTTTNum)
TraceDirectory <- paste0(TraceNum3,TraceDirectory)
Trace_Notation[i] <-  TraceDirectory
i=i+1
}
}
}
}
Trace_Notation_Data<- rep(Trace_Notation,359)
View(Trace_Notation_Data)
######## - A -   Compiling Annual Demands  ########
setwd("~/GitHub/WeberBasinVulnerability/WeberBasinVulnerability/1 - Scenario Processing/Annual Service Area Demand Scenarios/Output")
setwd("../1 - Scenario Processing/Annual Service Area Demand Scenarios/Output")
library(readxl)
DemandSelections <- read_excel("DemandSelections.xlsx")
Tot_Annual_Demand <- read.csv("SumMIandAG.csv")
Tot_Annual_Demand[,2] <- DemandSelections$MI...AG
Tot_Annual_Demand
Tot_Demand <- data.frame(c(1:324))
i=1
j=1
while (i<=6) {
Tot_Demand[j:(j+53),] <- rep(Tot_Annual_Demand[i,2],(54))
i=i+1
j=j+18
}
#View(Tot_Demand)
colnames(Tot_Demand) <- "Demand"
rownames(Tot_Demand) <- Trace_Notation
Tot_Mnthly_Demand<-data.frame(rep(Tot_Demand$Demand,359))
colnames(Tot_Mnthly_Demand) <- "Demand"
# Switch into local directory
setwd("~/GitHub/WeberBasinVulnerability/WeberBasinVulnerability/2 - RiverWare Modeling/With Evaporation Modeling/Scenario")
#Input Monthly data from RiverSmart Analysis
Tot_Mnthly_Inflow <-read.csv("Trace1,Trace1,Trace1,Trace1/Total Inflows.csv")
i=1
for(TTTTNum in 1:TraceNumber){
for(TTTNum in 1:TraceNumber1){
for(TTNum in 1:TraceNumber2){
for(TNum in 1:TraceNumber3){
TraceDirectory <- paste0(",Trace",TNum)
TraceDirectory <-paste0 (TraceDirectory,"/Total Inflows.csv")
TraceNum1<- paste0(",Trace",TTNum)
TraceDirectory <- paste0(TraceNum1,TraceDirectory)
TraceNum2 <- paste0(",Trace",TTTNum)
TraceDirectory <- paste0(TraceNum2,TraceDirectory)
TraceNum3 <- paste0("Trace",TTTTNum)
TraceDirectory <- paste0(TraceNum3,TraceDirectory)
Location <- TraceDirectory
Temp_Storage <- read.csv(Location)
Tot_Mnthly_Inflow[,i] <- Temp_Storage[,5]
colnames(Tot_Mnthly_Inflow)[i] <-  TraceDirectory
i=i+1
}
}
}
}
Tot_Mnthly_Inflow <- data.frame(Tot_Mnthly_Inflow)
Months <- rep(c(1:12),31)
Months<- Months[(11:369)]
Tot_Mnthly_Inflow$Months <- Months
#Create Years
Years <- c(0:372)
i=1
j=1
while (j<=31) {
Years[(i:(i+11))] <- rep((j-1),12)
i=i+12
j=j+1
}
Years<- Years[(11:369)]
#Add months and Years column
#Tot_Mnthly_Inflow$Months <-Months
Tot_Mnthly_Inflow$Years <- Years
#Add a Water year - The water year is designated by the calendar year in which it ends, so the 2010 water year (USGS) started on October 1, 2009 and ended on September 30, 2010
Tot_Mnthly_Inflow$WaterYear <- ifelse(Tot_Mnthly_Inflow$Months>= 10,Tot_Mnthly_Inflow$Years + 1, Tot_Mnthly_Inflow$Years)
WaterYear<-ifelse(Tot_Mnthly_Inflow$Months>= 10,Tot_Mnthly_Inflow$Years + 1, Tot_Mnthly_Inflow$Years)
#Transpose Data
Tot_Mnthly_Inflow_Transposed <- t(Tot_Mnthly_Inflow)
Tot_Mnthly_Inflow_Transposed <- data.frame(Tot_Mnthly_Inflow_Transposed)
#View(Tot_Mnthly_Inflow_Transposed)
#Stack Columns
Tot_Mnthly_Inflow_Stacked <- stack(Tot_Mnthly_Inflow_Transposed[1:324,1:359])
Tot_Mnthly_Inflow <- Tot_Mnthly_Inflow_Stacked$values
##Total Sedimentation Changes on Reservoir
#Move back to code directory
setwd(startWD)
#Move into the local input directory
#setwd("../3 - Post Processing")
setwd("~/GitHub/WeberBasinVulnerability/WeberBasinVulnerability/3 - Post Processing")
Tot_Sed <- read.csv("Sedimentation.csv")
Tot_Sed <- Tot_Sed[,2]
Tot_Mnthly_Sed <- rep(Tot_Sed,359)
#### Time Columns: Mnths, Years and Water Years #####
Mnths<-c(1:38772)
i=1
j=1
while (i<=359) {
Mnths[j:(i*324)]<-Months[i]
i=i+1
j=j+324
}
Yrs<-c(1:38772)
i=1
j=1
while (i<=359) {
Yrs[j:(i*324)]<-Years[i]
i=i+1
j=j+324
}
Wtr_Yrs<-c(1:38772)
i=1
j=1
while (i<=359) {
Wtr_Yrs[j:(i*324)]<-WaterYear[i]
i=i+1
j=j+324
}
##################   Compile Mnthly Input data    ##################################
#Create Data Frame
Inputs<- data.frame(Tot_Mnthly_Demand)
Inputs$Inflow <- Tot_Mnthly_Inflow
Inputs$Sedimentation <- Tot_Mnthly_Sed
Inputs$Trace_Notation <- Trace_Notation
Inputs$Month<-Mnths
Inputs$Years<-Yrs
Inputs$WaterYear<-Wtr_Yrs
#Number
Inputs$Number<-c(1:38772)
Inputs <- data.frame(Inputs)
##################################  - 2 - Output data ########################################################
#Set Local Directory
setwd(startWD)
setwd("../2 - RiverWare Modeling/Scenario")
setwd("~/GitHub/WeberBasinVulnerability/WeberBasinVulnerability/2 - RiverWare Modeling/Scenario")
Tot_Mnthly_Stor <- read.csv("Trace1,Trace1,Trace1/Total Storage_NO EVAP.csv")
Tot_Mnthly_Short <-read.csv("Trace1,Trace1,Trace1/Total Shortages.csv")
##### Total Storage #####
i=1
for(TTTTNum in 1:TraceNumber)
for(TTTNum in 1:TraceNumber1){
for(TTNum in 1:TraceNumber2){
for(TNum in 1:TraceNumber3){
TraceDirectory <- paste0(",Trace",TNum)
TraceDirectory <-paste0 (TraceDirectory,"/Total Storage_NO EVAP.csv")
TraceNum1<- paste0(",Trace",TTNum)
TraceDirectory <- paste0(TraceNum1,TraceDirectory)
TraceNum2 <- paste0(",Trace",TTTNum)
TraceDirectory <- paste0(TraceNum2,TraceDirectory)
TraceNum2 <- paste0("Trace",TTTTNum)
TraceDirectory <- paste0(TraceNum3,TraceDirectory)
Location <- TraceDirectory
Temp_Storage <- read.csv(Location)
Tot_Mnthly_Stor[,i] <- Temp_Storage[,5]
colnames(Tot_Mnthly_Stor)[i] <-  TraceDirectory
i=i+1
}
}
}
##### Total Storage #####
i=1
for(TTTTNum in 1:TraceNumber)
for(TTTNum in 1:TraceNumber1){
for(TTNum in 1:TraceNumber2){
for(TNum in 1:TraceNumber3){
TraceDirectory <- paste0(",Trace",TNum)
TraceDirectory <-paste0 (TraceDirectory,"/Total Storage_NO EVAP.csv")
TraceNum1<- paste0(",Trace",TTNum)
TraceDirectory <- paste0(TraceNum1,TraceDirectory)
TraceNum2 <- paste0(",Trace",TTTNum)
TraceDirectory <- paste0(TraceNum2,TraceDirectory)
TraceNum2 <- paste0("Trace",TTTTNum)
TraceDirectory <- paste0(TraceNum3,TraceDirectory)
Location <- TraceDirectory
Temp_Storage <- read.csv(Location)
Tot_Mnthly_Stor[,i] <- Temp_Storage[,5]
colnames(Tot_Mnthly_Stor)[i] <-  TraceDirectory
i=i+1
}
}
}
##### Total Storage #####
i=1
for(TTTTNum in 1:TraceNumber)
for(TTTNum in 1:TraceNumber1){
for(TTNum in 1:TraceNumber2){
for(TNum in 1:TraceNumber3){
TraceDirectory <- paste0(",Trace",TNum)
TraceDirectory <-paste0 (TraceDirectory,"/Total Storage_NO EVAP.csv")
TraceNum1<- paste0(",Trace",TTNum)
TraceDirectory <- paste0(TraceNum1,TraceDirectory)
TraceNum2 <- paste0(",Trace",TTTNum)
TraceDirectory <- paste0(TraceNum2,TraceDirectory)
TraceNum2 <- paste0("Trace",TTTTNum)
TraceDirectory <- paste0(TraceNum3,TraceDirectory)
Location <- TraceDirectory
Temp_Storage <- read.csv(Location)
Tot_Mnthly_Stor[,i] <- Temp_Storage[,5]
colnames(Tot_Mnthly_Stor)[i] <-  TraceDirectory
i=i+1
}
}
}
### Clear any existing data or functions.
#rm(list=ls())
library("dplyr", lib.loc="~/R/win-library/3.5")
#Record the current directory (0 - Code) for later recall
startWD <- getwd()
###Total Storage Compilation#--------------------------------------------------------------------------------#
#Store the current code directory so we can later return to it (0 - Code)
### Load the package or install if not present
if (!require("RColorBrewer")) {
install.packages("RColorBrewer")
library(RColorBrewer)
}
library(readr)
#install.packages("reshape")
library(reshape) #For Melt
library(lubridate) #For month
library(plotly) # For Plots
library(data.table)
library(dplyr)
####-----------------------------Trace Notation--------------------------------------------------
# Build names of folders output by RiverSmart
TraceNumber <- 6
TraceNumber1 <-3
TraceNumber2 <-6
TraceNumber3 <-3
Tot_TraceNum <- TraceNumber*TraceNumber1*TraceNumber2*TraceNumber3
Trace_Notation <-c(1:Tot_TraceNum)
i=1
for(TTTTNum in 1:TraceNumber){
for(TTTNum in 1:TraceNumber1){
for(TTNum in 1:TraceNumber2){
for(TNum in 1:TraceNumber3){
TraceDirectory <- paste0(",Trace",TNum)
TraceNum1<- paste0(",Trace",TTNum)
TraceDirectory <- paste0(TraceNum1,TraceDirectory)
TraceNum2 <- paste0(",Trace",TTTNum)
TraceDirectory <- paste0(TraceNum2,TraceDirectory)
TraceNum3 <- paste0("Trace",TTTTNum)
TraceDirectory <- paste0(TraceNum3,TraceDirectory)
Trace_Notation[i] <-  TraceDirectory
i=i+1
}
}
}
}
Trace_Notation_Data<- rep(Trace_Notation,359)
######## - A -   Compiling Annual Demands  ########
setwd("~/GitHub/WeberBasinVulnerability/WeberBasinVulnerability/1 - Scenario Processing/Annual Service Area Demand Scenarios/Output")
setwd("../1 - Scenario Processing/Annual Service Area Demand Scenarios/Output")
######## - A -   Compiling Annual Demands  ########
setwd("~/GitHub/WeberBasinVulnerability/WeberBasinVulnerability/1 - Scenario Processing/Annual Service Area Demand Scenarios/Output")
library(readxl)
DemandSelections <- read_excel("DemandSelections.xlsx")
DemandSelections <- read_excel("DemandSelections.xlsx")
Tot_Annual_Demand <- read.csv("SumMIandAG.csv")
Tot_Annual_Demand[,2] <- DemandSelections$MI...AG
Tot_Annual_Demand
Tot_Demand <- data.frame(c(1:324))
i=1
j=1
while (i<=6) {
Tot_Demand[j:(j+53),] <- rep(Tot_Annual_Demand[i,2],(54))
i=i+1
j=j+18
}
#View(Tot_Demand)
colnames(Tot_Demand) <- "Demand"
rownames(Tot_Demand) <- Trace_Notation
Tot_Mnthly_Demand<-data.frame(rep(Tot_Demand$Demand,359))
colnames(Tot_Mnthly_Demand) <- "Demand"
# Switch into local directory
setwd("~/GitHub/WeberBasinVulnerability/WeberBasinVulnerability/2 - RiverWare Modeling/With Evaporation Modeling/Scenario")
#Input Monthly data from RiverSmart Analysis
Tot_Mnthly_Inflow <-read.csv("Trace1,Trace1,Trace1,Trace1/Total Inflows.csv")
i=1
for(TTTTNum in 1:TraceNumber){
for(TTTNum in 1:TraceNumber1){
for(TTNum in 1:TraceNumber2){
for(TNum in 1:TraceNumber3){
TraceDirectory <- paste0(",Trace",TNum)
TraceDirectory <-paste0 (TraceDirectory,"/Total Inflows.csv")
TraceNum1<- paste0(",Trace",TTNum)
TraceDirectory <- paste0(TraceNum1,TraceDirectory)
TraceNum2 <- paste0(",Trace",TTTNum)
TraceDirectory <- paste0(TraceNum2,TraceDirectory)
TraceNum3 <- paste0("Trace",TTTTNum)
TraceDirectory <- paste0(TraceNum3,TraceDirectory)
Location <- TraceDirectory
Temp_Storage <- read.csv(Location)
Tot_Mnthly_Inflow[,i] <- Temp_Storage[,5]
colnames(Tot_Mnthly_Inflow)[i] <-  TraceDirectory
i=i+1
}
}
}
}
Tot_Mnthly_Inflow <- data.frame(Tot_Mnthly_Inflow)
Months <- rep(c(1:12),31)
Months<- Months[(11:369)]
Tot_Mnthly_Inflow$Months <- Months
#Create Years
Years <- c(0:372)
i=1
j=1
while (j<=31) {
Years[(i:(i+11))] <- rep((j-1),12)
i=i+12
j=j+1
}
Years<- Years[(11:369)]
#Add months and Years column
#Tot_Mnthly_Inflow$Months <-Months
Tot_Mnthly_Inflow$Years <- Years
#Add a Water year - The water year is designated by the calendar year in which it ends, so the 2010 water year (USGS) started on October 1, 2009 and ended on September 30, 2010
Tot_Mnthly_Inflow$WaterYear <- ifelse(Tot_Mnthly_Inflow$Months>= 10,Tot_Mnthly_Inflow$Years + 1, Tot_Mnthly_Inflow$Years)
WaterYear<-ifelse(Tot_Mnthly_Inflow$Months>= 10,Tot_Mnthly_Inflow$Years + 1, Tot_Mnthly_Inflow$Years)
#Transpose Data
Tot_Mnthly_Inflow_Transposed <- t(Tot_Mnthly_Inflow)
Tot_Mnthly_Inflow_Transposed <- data.frame(Tot_Mnthly_Inflow_Transposed)
#View(Tot_Mnthly_Inflow_Transposed)
#Stack Columns
Tot_Mnthly_Inflow_Stacked <- stack(Tot_Mnthly_Inflow_Transposed[1:324,1:359])
Tot_Mnthly_Inflow <- Tot_Mnthly_Inflow_Stacked$values
##Total Sedimentation Changes on Reservoir
#Move back to code directory
setwd(startWD)
#Move into the local input directory
#setwd("../3 - Post Processing")
setwd("~/GitHub/WeberBasinVulnerability/WeberBasinVulnerability/3 - Post Processing")
Tot_Sed <- read.csv("Sedimentation.csv")
Tot_Sed <- Tot_Sed[,2]
Tot_Mnthly_Sed <- rep(Tot_Sed,359)
#### Time Columns: Mnths, Years and Water Years #####
Mnths<-c(1:38772)
i=1
j=1
while (i<=359) {
Mnths[j:(i*324)]<-Months[i]
i=i+1
j=j+324
}
Yrs<-c(1:38772)
i=1
j=1
while (i<=359) {
Yrs[j:(i*324)]<-Years[i]
i=i+1
j=j+324
}
Wtr_Yrs<-c(1:38772)
i=1
j=1
while (i<=359) {
Wtr_Yrs[j:(i*324)]<-WaterYear[i]
i=i+1
j=j+324
}
##################   Compile Mnthly Input data    ##################################
#Create Data Frame
Inputs<- data.frame(Tot_Mnthly_Demand)
Inputs$Inflow <- Tot_Mnthly_Inflow
Inputs$Sedimentation <- Tot_Mnthly_Sed
Inputs$Trace_Notation <- Trace_Notation
Inputs$Month<-Mnths
Inputs$Years<-Yrs
Inputs$WaterYear<-Wtr_Yrs
#Number
Inputs$Number<-c(1:38772)
Inputs <- data.frame(Inputs)
##################################  - 2 - Output data ########################################################
#Set Local Directory
setwd(startWD)
setwd("../2 - RiverWare Modeling/Scenario")
setwd("~/GitHub/WeberBasinVulnerability/WeberBasinVulnerability/2 - RiverWare Modeling/Scenario")
Tot_Mnthly_Stor <- read.csv("Trace1,Trace1,Trace1/Total Storage_NO EVAP.csv")
Tot_Mnthly_Short <-read.csv("Trace1,Trace1,Trace1/Total Shortages.csv")
##### Total Storage #####
i=1
for(TTTTNum in 1:TraceNumber)
for(TTTNum in 1:TraceNumber1){
for(TTNum in 1:TraceNumber2){
for(TNum in 1:TraceNumber3){
TraceDirectory <- paste0(",Trace",TNum)
TraceDirectory <-paste0 (TraceDirectory,"/Total Storage_NO EVAP.csv")
TraceNum1<- paste0(",Trace",TTNum)
TraceDirectory <- paste0(TraceNum1,TraceDirectory)
TraceNum2 <- paste0(",Trace",TTTNum)
TraceDirectory <- paste0(TraceNum2,TraceDirectory)
TraceNum2 <- paste0("Trace",TTTTNum)
TraceDirectory <- paste0(TraceNum3,TraceDirectory)
Location <- TraceDirectory
Temp_Storage <- read.csv(Location)
Tot_Mnthly_Stor[,i] <- Temp_Storage[,5]
colnames(Tot_Mnthly_Stor)[i] <-  TraceDirectory
i=i+1
}
}
}
Tot_Mnthly_Stor <- data.frame(Tot_Mnthly_Stor)
#Transpose Data
Tot_Mnthly_Stor_Transposed <- t(Tot_Mnthly_Stor)
Tot_Mnthly_Stor_Transposed <- data.frame(Tot_Mnthly_Stor_Transposed)
#View(Tot_Mnthly_Inflow_Transposed)
#Stack Columns
Tot_Mnthly_Stor_Stacked <- stack(Tot_Mnthly_Stor_Transposed[1:324,1:359])
Tot_Mnthly_Stor <- Tot_Mnthly_Stor_Stacked$values
Tot_Mnthly_Stor <- data.frame(Tot_Mnthly_Stor)
##### Total Shortages #####
i=1
for(TTTTNum in 1:TraceNumber )
for(TTTNum in 1:TraceNumber1){
for(TTNum in 1:TraceNumber2){
for(TNum in 1:TraceNumber3){
TraceDirectory <- paste0(",Trace",TNum)
TraceDirectory <-paste0 (TraceDirectory,"/Total Shortages.csv")
TraceNum1<- paste0(",Trace",TTNum)
TraceDirectory <- paste0(TraceNum1,TraceDirectory)
TraceNum2 <- paste0(",Trace",TTTNum)
TraceDirectory <- paste0(TraceNum2,TraceDirectory)
TraceNum2 <- paste0("Trace",TTTTNum)
TraceDirectory <- paste0(TraceNum2,TraceDirectory)
Location <- TraceDirectory
Temp_Storage <- read.csv(Location)
Tot_Mnthly_Short[,i] <- Temp_Storage[,5]
colnames(Tot_Mnthly_Short)[i] <-  TraceDirectory
i=i+1
}
}
}
Tot_Mnthly_Short <- data.frame(Tot_Mnthly_Short)
#Transpose Data
Tot_Mnthly_Short_Transposed <- t(Tot_Mnthly_Short)
Tot_Mnthly_Short_Transposed <- data.frame(Tot_Mnthly_Short_Transposed)
#View(Tot_Mnthly_Inflow_Transposed)
#Stack Columns
Tot_Mnthly_Short_Stacked <- stack(Tot_Mnthly_Short_Transposed[1:324,1:359])
Tot_Mnthly_Short <- Tot_Mnthly_Short_Stacked$values
########################   Compile Output data   ###############################
Outputs <- Tot_Mnthly_Stor
Outputs$Shortage <- Tot_Mnthly_Short
# Add Trace Notation
#Outputs$Trace_Notation <-Trace_Notation
#Number
Outputs$Number<-c(1:38772)
Outputs<-data.frame(Outputs)
#########################  Merge  ---- Data Dataframe########################
Data <- merge(Inputs,Outputs,by="Number")
#From Monthly Streamflows to Annual Streamflows
Annual_Inflows <-Data %>%
group_by(WaterYear,Trace_Notation) %>%
summarise_all(funs(sum(Inflow)))
#add Inflow name column
Annual_Inflows$Scenario <-rep(c(rep('Hot Dry Flows',3),rep('Base Flows (1940-1970)',3),rep('Duration & Intensity Droughts (1930-1960)',3),rep('Duration Droughts (1610-1640)',3),rep('Intensity Drought (1520-1550)',3),rep('Intensity Drought (1570-1600)',3)),60)
### PLOT ANNUAL INFLOWS
#BAR PLOT
#fix order of bar plot by trace order
xcategoryorder<-list(categoryorder ="array",
categoryarray =c(Annual_Inflows$Scenario))
#Simplify data
SimpAI<-Annual_Inflows %>% distinct(Scenario,.keep_all = TRUE)
#Summed Total Inflows
plot_ly(SimpAI,x=SimpAI$Scenario,y=SimpAI$Inflow,
type = 'bar',color = SimpAI$Scenario,colors = "Set1")%>%
layout(title='Summed Inflow Scenarios',xaxis=xcategoryorder,yaxis = list(title='Total Inflow by Scenario (Acre-Feet)'))
#Scatter plots
plot_ly(Annual_Inflows,x=Annual_Inflows$Scenario,y=Annual_Inflows$Inflow,
type = 'scatter',color = Annual_Inflows$Scenario,colors = "Set1")%>%
layout(title='Summed Inflow Scenarios',xaxis=xcategoryorder,yaxis = list(title='Total Inflow by Scenario (Acre-Feet)'))
plot_ly(Annual_Inflows,x=Annual_Inflows$WaterYear,y=Annual_Inflows$Inflow,
type = 'scatter',mode='line',color = Annual_Inflows$Scenario,colors = "Set1")%>%
layout(title='Summed Inflow Scenarios',xaxis=list(title='Water Year'),yaxis = list(title='Total Inflow by Scenario (Acre-Feet)'))
