#Stack Columns
Tot_Mnthly_Stor_Stacked <- stack(Tot_Mnthly_Stor_Transposed[1:108,1:359])
Tot_Mnthly_Stor <- Tot_Mnthly_Stor_Stacked$values
Tot_Mnthly_Stor <- data.frame(Tot_Mnthly_Stor)
##### Total Shortages #####
i=1
for(TTTNum in 1:TraceNumber){
for(TTNum in 1:TraceNumber1){
for(TNum in 1:TraceNumber2){
TraceDirectory <- paste0(",Trace",TNum)
TraceDirectory <-paste0 (TraceDirectory,"/Total Shortages.csv")
TraceNum1<- paste0(",Trace",TTNum)
TraceDirectory <- paste0(TraceNum1,TraceDirectory)
TraceNum2 <- paste0("Trace",TTTNum)
TraceDirectory <- paste0(TraceNum2,TraceDirectory)
Location <- TraceDirectory
Temp_Storage <- read.csv(Location)
Tot_Mnthly_Short[,i] <- Temp_Storage[,5]
colnames(Tot_Mnthly_Short)[i] <-  TraceDirectory
i=i+1
}
}
}
Tot_Mnthly_Short <- data.frame(Tot_Mnthly_Short)
#Transpose Data
Tot_Mnthly_Short_Transposed <- t(Tot_Mnthly_Short)
Tot_Mnthly_Short_Transposed <- data.frame(Tot_Mnthly_Short_Transposed)
#View(Tot_Mnthly_Inflow_Transposed)
#Stack Columns
Tot_Mnthly_Short_Stacked <- stack(Tot_Mnthly_Short_Transposed[1:108,1:359])
Tot_Mnthly_Short <- Tot_Mnthly_Short_Stacked$values
########################   Compile Output data   ###############################
Outputs <- Tot_Mnthly_Stor
Outputs$Shortage <- Tot_Mnthly_Short
# Add Trace Notation
#Outputs$Trace_Notation <-Trace_Notation
#Number
Outputs$Number<-c(1:38772)
Outputs<-data.frame(Outputs)
#########################  Merge  ---- Data Dataframe########################
Data <- merge(Inputs,Outputs,by="Number")
#From Monthly Streamflows to Annual Streamflows
Annual_Inflows <-Data %>%
group_by(WaterYear,Trace_Notation) %>%
summarise_all(funs(sum(Inflow)))
Avg_Annual_Inflows <- Annual_Inflows %>%
group_by(Trace_Notation) %>%
summarise_all(funs(mean(Inflow)))
Avg_Annual_Inflow<-data.frame(Avg_Annual_Inflows$Inflow)
colnames(Avg_Annual_Inflow)<-"Annual Avg Inflow"
Avg_Annual_Inflow$Trace_Notation <-Trace_Notation
colnames(Avg_Annual_Inflow)[2]<-"Trace_Notation"
#Repeat Calculation from monthly shortage to total annual shortage by water year
Annual_Shortage <-Data %>%
group_by(WaterYear,Trace_Notation) %>%
summarise_all(funs(sum(Shortage)))
Avg_Annual_Shortage <- Annual_Shortage %>%
group_by(Trace_Notation) %>%
summarise_all(funs(mean(Shortage)))
Avg_Annual_Shortage<-data.frame(Avg_Annual_Shortage$Shortage)
colnames(Avg_Annual_Shortage)<-"Annual Avg Shortage"
Avg_Annual_Shortage$Trace_Notation <- Trace_Notation
colnames(Avg_Annual_Shortage)[2]<-"Trace_Notation"
Data <- full_join(Data,Avg_Annual_Inflow,by="Trace_Notation")
Data <- full_join(Data,Avg_Annual_Shortage,by ="Trace_Notation")
# Define reservoir levels as arrays: Moderate -> Severe -> Extreme
cStoreNames <- c("Moderate", "Severe", "Extreme")
cStorLevels <- c(380000,340000,280000)
cColors <- c("Yellow", "Orange", "Red")
ModerateLevel<- 380000
SevereLevel <- 340000
ExtremeLevel<-280000
#Calculate the number of storage levels
nLevels <- length(cStorLevels)
#Pull out the monthly storage values
#Storage_Metrics <- data.frame(Data$Tot_Mnthly_Stor)
Storage_Metrics <- data.frame(Data[,c("Month","Tot_Mnthly_Stor")])
#Create more duplicate columns
Storage_Metrics <- cbind(Storage_Metrics, replicate(nLevels-1,Storage_Metrics$Tot_Mnthly_Stor))
#Rename the columns
colnames(Storage_Metrics)[2:(nLevels+1)] <- cStoreNames
#Record the last data column
cLastDataCol <- ncol(Data)
#Loop through columns. In each column convert the storage values to a binary: 1 if greater or equal to target. 0 if below
for (i in 1:nLevels) {
#Is the storage criteria met?
Storage_Metrics[,1+i] <- ifelse(Storage_Metrics[,1+i] > cStorLevels[i],1,0) #1 Greater than or equal
#Storage_Metrics[,1+i] <- ifelse(Storage_Metrics[,1+i] < cStorLevels[i],1,0)   #1 Less than or equal
#Save the result back to the Data datafrom
Data[,cLastDataCol + i] <- Storage_Metrics[,1+i]
#Rename the column
colnames(Data)[cLastDataCol +i] <- cStoreNames[i]
}
cRelColNames <- paste0("Rel", cStoreNames)
#Calculate the average (fraction) for each combination of traces for each column. This represents
#the reliability
dfStorageReliability <-Data[,c("Trace_Notation","Month",cStoreNames)] %>%
filter(Month == 6) %>%  #Filter on the June month because that is when we care about storage at criteria
group_by(Trace_Notation) %>%
summarise_all(funs(mean))
#Multiply by 100 to get a percent
#dfStorageReliability[,cStoreNames] <- dfStorageReliability[,cStoreNames]*100
dfStorageReliability[,cStoreNames] <- 100-(dfStorageReliability[,cStoreNames]*100)  #Reliability -- How often is metric in below storage specified value
# Rename columns
colnames(dfStorageReliability)[3:5] <- c("Mod Reliability", "Sev Reliability","Ext Reliability")
##### Join the Reservoir storage reliability back with the big data set
AllData<-right_join(Data,dfStorageReliability,by='Trace_Notation')
##################################################################################################
###PLOTS###
##################################################################################################
library(plotly)
#Create Label/Settings Dataframe for multiple plots  ------>>>> In progress ====
Titles <- c("June 1st Storage Levels Reliability
Moderate Storage Level (380,000 Acre-Feet)",
"June 1st Storage Levels Reliability
Severe Storage Level (340,000 Acre-Feet)",
"June 1st Storage Levels Reliability
Extreme Storage Level (280,000 Acre-Feet)",
"June 1st Storage Levels Reliability")
Titles <-data.frame(Titles)
Axises <-c("Demand (Acre-Feet/Year)","Inflows (Acre-Feet/Year)")
Axises<- data.frame(Axises)
Data_NoSed <- filter(AllData,Sedimentation==0)
Data_10Perc <- filter(AllData,Sedimentation==10)
Data_30Perc <- filter(AllData,Sedimentation==30)
#Select Data frame to do Calculation on.
PlotData<- Data_NoSed
PlotData10 <- Data_10Perc
PlotData30 <- Data_30Perc
#No Sedimentation
#########Individual PLOTS############
x<-PlotData$Demand
y<-PlotData$`Annual Avg Inflow`
TorF <- FALSE
# Moderate Demand Level
z=PlotData$`Mod Reliability`
p1 <- plot_ly(
x = x,
y = y,
z = z , type = "contour",contours = list(showlabels = TRUE),showscale = TorF, colors = c("white","yellow"))%>%
colorbar(title = "Percent of\n Years below \n Storage Level")%>%
layout(title = "June 1st Storage Levels Reliability
Moderate Storage Level (380,000 Acre-Feet)",
xaxis = list(title ="Demand (Acre-Feet/Year)", showticklabels = FALSE),
yaxis = list(title = "Inflows (Acre-Feet/Year)") ,
annotations = list(text = "Moderate Storage
Level (380,000 Acre-Feet)",
x = 475000,
y = 950000,
yref = "y",
xref = "x",
xanchor = "middle",
yanchor = "top",
showarrow = FALSE,
font = list(size = 15))
)
p1
#Severe Demand Level
z=PlotData$`Sev Reliability`
p2 <- plot_ly(
x = x,
y = y,
z = z, type = "contour",contours = list(showlabels = TRUE),showscale = TorF, colors = c("white","orange"))%>%
colorbar(title = "Percent of\n Years below \n Storage Level")%>%
layout(title = "June 1st Storage Levels Reliability
Severe Storage Level (340,000 Acre-Feet)",
xaxis = list(title ="Demand (Acre-Feet/Year)"),
yaxis = list(title = "Inflows (Acre-Feet/Year)")  ,
annotations = list(text = "Severe Storage
Level (340,000 Acre-Feet)",
x = 475000,
y = 950000,
yref = "y",
xref = "x",
xanchor = "middle",
yanchor = "top",
showarrow = FALSE,
font = list(size = 15))
)
p2
#Extreme Demand Level
z=PlotData$`Ext Reliability`
p3 <- plot_ly(
x = x,
y = y,
z = z, type = "contour",contours = list(showlabels = TRUE),showscale = TorF,colors = c("white","red"))%>%
colorbar(title = "Percent of\n Years below \n Storage Level")%>%
layout(title = "June 1st Storage Levels Reliability
Extreme Storage Level (280,000 Acre-Feet)",
xaxis = list(title ="Demand (Acre-Feet/Year)"),
yaxis = list(title = "Inflows (Acre-Feet/Year)")  ,
annotations = list(text = "Extreme Storage
Level (280,000 Acre-Feet)",
x = 475000,
y = 950000,
yref = "y",
xref = "x",
xanchor = "middle",
yanchor = "top",
showarrow = FALSE,
font = list(size = 15))
)
p3
s1 <- subplot(p1,p2,p3,nrows = 1, shareY = TRUE)
#10% Sedimentation
#########Individual PLOTS############
x<-PlotData10$Demand
y<-PlotData10$`Annual Avg Inflow`
# Moderate Demand Level
z=PlotData10$`Mod Reliability`
p1 <- plot_ly(
x = x,
y = y,
z = z , type = "contour",contours = list(showlabels = TRUE),showscale = TorF,colors = c("white","yellow"))%>%
colorbar(title = "Percent of\n Years below \n Storage Level")%>%
layout(title = "June 1st Storage Levels Reliability
Moderate Storage Level (380,000 Acre-Feet)",
xaxis = list(title ="Demand (Acre-Feet/Year)"),
yaxis = list(title = "Inflows (Acre-Feet/Year)"))
p1
#Severe Demand Level
z=PlotData10$`Sev Reliability`
p2 <- plot_ly(
x = x,
y = y,
z = z, type = "contour",contours = list(showlabels = TRUE),showscale = TorF,colors = c("white","orange"))%>%
colorbar(title = "Percent of\n Years below \n Storage Level")%>%
layout(title = "June 1st Storage Levels Reliability
Severe Storage Level (340,000 Acre-Feet)",
xaxis = list(title ="Demand (Acre-Feet/Year)"),
yaxis = list(title = "Inflows (Acre-Feet/Year)"))
p2
#Extreme Demand Level
z=PlotData10$`Ext Reliability`
p3 <- plot_ly(
x = x,
y = y,
z = z, type = "contour",contours = list(showlabels = TRUE),showscale = TorF,colors = c("white","red"))%>%
colorbar(title = "Percent of\n Years below \n Storage Level")%>%
layout(title = "June 1st Storage Levels Reliability
Extreme Storage Level (280,000 Acre-Feet)",
xaxis = list(title ="Demand (Acre-Feet/Year)"),
yaxis = list(title = "Inflows (Acre-Feet/Year)"))
p3
s2 <- subplot(p1,p2,p3,nrows = 1, shareY = TRUE)
#30% Sedimentation
#########Individual PLOTS############
x<-PlotData30$Demand
y<-PlotData30$`Annual Avg Inflow`
# Moderate Demand Level
z=PlotData30$`Mod Reliability`
p1 <- plot_ly(
x = x,
y = y,
z = z , type = "contour",contours = list(showlabels = TRUE),showscale = TorF,colors = c("white","yellow"))%>%
colorbar(title = "Percent of\n Years below \n Storage Level")%>%
layout(title = "June 1st Storage Levels Reliability
Moderate Storage Level (380,000 Acre-Feet)",
xaxis = list(title ="Demand (Acre-Feet/Year)"),
yaxis = list(title = "Inflows (Acre-Feet/Year)"))
p1
#Severe Demand Level
z=PlotData30$`Sev Reliability`
p2 <- plot_ly(
x = x,
y = y,
z = z, type = "contour",contours = list(showlabels = TRUE),showscale = TorF,colors = c("white","orange"))%>%
colorbar(title = "Percent of\n Years below \n Storage Level")%>%
layout(title = "June 1st Storage Levels Reliability
Severe Storage Level (340,000 Acre-Feet)",
xaxis = list(title ="Demand (Acre-Feet/Year)"),
yaxis = list(title = "Inflows (Acre-Feet/Year)"))
p2
#Extreme Demand Level
z=PlotData30$`Ext Reliability`
p3 <- plot_ly(
x = x,
y = y,
z = z, type = "contour",contours = list(showlabels = TRUE),showscale = TorF,colors = c("white","red"))%>%
colorbar(title = "Percent of\n Years below \n Storage Level")%>%
layout(title = "June 1st Storage Levels Reliability
Extreme Storage Level (280,000 Acre-Feet)",
xaxis = list(title ="Demand (Acre-Feet/Year)"),
yaxis = list(title = "Inflows (Acre-Feet/Year)"))
p3
s3 <- subplot(p1,p2,p3,nrows = 1, shareY = TRUE)
# Create a 3x3 Matrix Plot -- Subplots
y2 <- list(
tickfont = list(color = "Black"),
overlaying = "y",
side = "right",
title = "Inflow Scenarios"
)
p3x3 <- subplot(s1,s2,s3,nrows = 3, shareX = TRUE)%>%
layout(title = "June 1st Storage Levels -- Reliability", showlegend = FALSE,
#yaxis2 = y2,
yaxis = list(title="0% Reservoir Sed"),
yaxis2 = list(title="Demand (Acre-Ft/Year)
10% Reservoir Sed"),
yaxis3 = list(title="30% Reservoir Sed"),
xaxis2 = list(title= "Inflow (Acre-Ft/Year)")  #,
#yaxis2 = list(title= "Demand (Acre-Ft/Year)",side="right")
)
p3x3
# |  Part 0:
# |  PART 1:
# |  PART 2:
# |  PART 3:
# *-----------------------------------------------------------------
# | UPDATES:
# |
# |
# *------------------------------------------------------------------
### Clear any existing data or functions.
rm(list=ls())
library(readxl)
#Set Working Directory
#setwd("~/GitHub/WeberBasinVulnerability/WeberBasinVulnerability/1 - Scenario Processing/Annual Service Area Demand Scenarios/Input_Data")
#Store the current code directory so we can later return to it (0 - Code)
fCodeDir <- getwd()
#Move into the local input directory
#setwd("../1 - Scenario Processing/Annual Service Area Demand Scenarios/Input_Data")
setwd("~/GitHub/WeberBasinVulnerability/WeberBasinVulnerability/1 - Scenario Processing/Annual Service Area Demand Scenarios/Input_Data")
DWRSA_Table <- read_excel("DWRSA_Table.xlsx")
#Set New Working Directory
#Return to code directory
setwd(fCodeDir)
#Move into the local output directory
#setwd("../1 - Scenario Processing/Annual Service Area Demand Scenarios/Output")
setwd("~/GitHub/WeberBasinVulnerability/WeberBasinVulnerability/1 - Scenario Processing/Annual Service Area Demand Scenarios/Output")
##Possible package installation necessary
#install.packages("RColorBrewer")
#install.packages("plotly")
#install.packages("readxl")
#install.packages("openxlsx")
library(readxl)
library(plotly)
library(RColorBrewer)
##Possible package installation necessary
#install.packages("RColorBrewer")
#install.packages("plotly")
#install.packages("readxl")
#install.packages("openxlsx")
library(readxl)
library(plotly)
library(RColorBrewer)
library(openxlsx)
library("tibble", lib.loc="~/R/win-library/3.5")
##Input Data###############
setwd("~/GitHub/WeberBasinVulnerability/WeberBasinVulnerability/1 - Scenario Processing/Annual Service Area Demand Scenarios/Output")
## Municipal and Industrial water Calculated from 2a_Demand Calc_byServiceArea--Municipal
MI <- read_excel("MI.xlsx")
#View(MI)
MIAll_Factors <- read_excel("MI_AllFactors.xlsx")
##Calculation##############
AGtoMI_CF <- c(0.65,0.72,0.78) #Agriculture to Municipal Water Use Conversion Factor
#MI2070_SamePerCap - MI2015_SamePerCap = Changein_MI
Changein_MI_2070to2015 = MI$MI_SA_2070 - MI$MI_SA_2015
Changein_MI_2150to2015 = MI$MI_SA_2150 - MI$MI_SA_2015
#Conversion factor of  0.65
Changein_AG_2070to2015 = data.frame(Changein_MI_2070to2015/AGtoMI_CF[1])  #**put in while loop for differing conversion factors ?
Changein_AG_2150to2015 = data.frame(Changein_MI_2150to2015/AGtoMI_CF[1])
#Conversion factor of  0.72
Changein_AG_2070to2015[,2] = Changein_MI_2070to2015/AGtoMI_CF[2]  #output notation for 0.72 is a ".1" at the end of the column name i.e.MI_SA_2070.1
Changein_AG_2150to2015[,2] = Changein_MI_2150to2015/AGtoMI_CF[2]
#Conversion factor of 0.78
Changein_AG_2070to2015[,3] = Changein_MI_2070to2015/AGtoMI_CF[3]  #output notation for 0.78 is a ".2" at the end of the column name i.e.MI_SA_2070.2
Changein_AG_2150to2015[,3] = Changein_MI_2150to2015/AGtoMI_CF[3]
#BaseDemand <- data.frame(DWRSA_Table$MAX) #MAX AG WATER USE
BaseDemand <- data.frame(DWRSA_Table$AVG)    #OR AVG AG WATER USE
BaseDemand[20,] <- 0
#The amount of Agricultural Water Used found by looking at the recorded Total Base 2015 water demands and subtracting the calculated
#2015 Municipal and Industrial water usage
AgBase2015 <- BaseDemand - MI$MI_SA_2015
i=1
AG_2015 <- AgBase2015
AG_2070 <- data.frame(rep(1:20))
AG_2150 <- data.frame(rep(1:20))
while (i<=3) {
AG_2070[,i] <- data.frame(AgBase2015 - Changein_AG_2070to2015[,i])
AG_2150[,i] <- data.frame(AgBase2015 - Changein_AG_2150to2015[,i])
i=i+1
}
AG_2070[,1:3] <- replace(AG_2070[,1:3], AG_2070[,1:3] < 0, 0)
AG_2150[,1:3] <- replace(AG_2150[,1:3], AG_2150[,1:3] < 0, 0)
colnames(AG_2070)<-c("_65% Conversion Factor","_72% Conversion Factor","_78% Conversion Factor")
colnames(AG_2150)<-c("_65% Conversion Factor","_72% Conversion Factor","_78% Conversion Factor")
AG_2070<- AG_2070*1.05
AG_2150<- AG_2150*1.08
MIandAg_Demand <- data.frame(AG_2015[,1] + MI$MI_SA_2015)
i=1
j=1
while (i<=9) {
MIandAg_Demand[,j] <- AG_2015[,1] + MI[,i]
i=i+1
j=j+1
}
colnames(MIandAg_Demand)[1]<-"MI_SA_2015"
#2070
k=1
while (k<=3) {
while (i<=18) {
MIandAg_Demand[,j] <- AG_2070[,k] + MI[,i]
colnames(MIandAg_Demand)[j]<-paste0(colnames(MI)[i],colnames(AG_2070)[k])
i=i+1
j=j+1
}
k=k+1
i=10
}
#2150
i=19
k=1
while (k<=3) {
while (i<=27) {
MIandAg_Demand[,j] <- AG_2150[,k] + MI[,i]
colnames(MIandAg_Demand)[j]<-paste0(colnames(MI)[i],colnames(AG_2150)[k])
i=i+1
j=j+1
}
k=k+1
i=19
}
#write.xlsx(MIandAg_Demand,"MI_with_AG.xlsx")
write.csv(MIandAg_Demand,"MI_with_AG.csv")
#Tab---- Create Workbook-----------
#Input How Many Scenarios                  #### Nine 2015 Scenarios, Twenty-Seven 2070 Scenarios, and Twenty-Seven 2150 Scenarios
#### 63 Total MI plus Ag Scenarios ########
RunNumber <- 63
#Create Workbook
wb <- createWorkbook("Data")
#Create Worksheet for each Run
for(Num in 1:(RunNumber)) {
RunsString <- paste0("Trace",Num)
addWorksheet(wb, RunsString)
}
#Input Data
SAs<- c('SA1','SA2','SA3','SA4','SA5','SA6','SA7','SA8','SA9','SA10','SA11','SA12','SA13','SA14','SA15','SA16','SA17','SA18','SA19','SA20')
i=1
while (i<=RunNumber) {
writeData(wb,sheet = i, SAs,startCol = 1,startRow = 3)
i=i+1
}
i=1
while (i<=RunNumber) {
writeData(wb,sheet = i, MIandAg_Demand[,i],startCol = 2,startRow = 3)
i=i+1
}
saveWorkbook(wb,"MI+AG.xlsx",overwrite = TRUE)
#################################################################################################################################################################################################################################################################################################################################################################################################################################################
### Sum Data for plots ###
#################################################################################################################################################################################################################################################################################################################################################################################################################################################
#MIandAg_Demand Sums
#Create Data frame
MIandAG_Sums <- t(colnames(MIandAg_Demand))
i=1
while (i<=63) {
MIandAG_Sums[,i] <- sum(MIandAg_Demand[,i])
i=i+1
}
MIandAG_Sums<- data.frame(MIandAG_Sums)
Nms<-t(colnames(MIandAg_Demand))
names(MIandAG_Sums) <- c(Nms)
#Transpose Data
DemandData <- data.frame(t(MIandAG_Sums))
#Name Column
names(DemandData)[1] <- paste("MI + AG")
#Year Column
Year <- c(rep(2015,9),rep(2070,27),rep(2150,27))
DemandData$Year<-Year
#AgConversion Column
AGCF<-c(rep(0,9),rep(c(rep(65,9), rep(72,9), rep(78,9)),2))
DemandData$AG_Conversion.Factor <-AGCF
#Scenario Name Column
DemandData$Scenario_Name<-rownames(DemandData)
rownames(MIAll_Factors)[1]<-"Potable PerCapita % Change"
rownames(MIAll_Factors)[2]<-"Secondary PerCapita % Change"
rownames(MIAll_Factors)[3]<-"Avg Reduced PerCapita % Change"
rownames(MIAll_Factors)[4] <-"PerCapita Change by Scenario"
rownames(MIAll_Factors)[5]<-"ET Change by %"
rownames(MIAll_Factors)[6]<-"ET Change by Scenario"
Transposed_MIAllFactors <-t(MIAll_Factors)
MI_Factors_2015<-Transposed_MIAllFactors[1:9,]
MI_Factors_2070<-Transposed_MIAllFactors
rownames(MI_Factors_2070) <- rownames(DemandData)[10:36]
MI_Factors_2150<-Transposed_MIAllFactors
rownames(MI_Factors_2070) <- rownames(DemandData)[37:63]
MI_Factors<- rbind(MI_Factors_2015,MI_Factors_2070,MI_Factors_2150)
rownames(MI_Factors)<-rownames(DemandData)
colnames(MI_Factors)<-colnames(Transposed_MIAllFactors)
AllDemandData <- cbind(DemandData,MI_Factors)
#View(AllDemandData)
Data<-AllDemandData
plot_ly(data =Data , x=Data$Year, y=Data$`MI + AG`,type='scatter',mode='markers',
size = Data$AG_Conversion.Factor,color = Data$`ET Change by %`,colors = blues9) %>%
#add_trace(x='Year 2070', y=MIAG$MIAG2070_Sums,name = MIAG$Names_2070)%>%
#add_trace(x= 'Year 2150',y=MIAG$MIAG2150_Sums,name = MIAG$Names_2150)%>%
layout(yaxis = list(title ='M&I + AG Demand (acre-feet)',tickformat = '.1f',showticklabels=FALSE),showlegend = FALSE)
plot_ly(data =Data , x=Data$Year, y=Data$`MI + AG`,type='scatter',mode='markers',
size = Data$AG_Conversion.Factor,color = Data$`ET Change by %`,colors = blues9) %>%
#add_trace(x='Year 2070', y=MIAG$MIAG2070_Sums,name = MIAG$Names_2070)%>%
#add_trace(x= 'Year 2150',y=MIAG$MIAG2150_Sums,name = MIAG$Names_2150)%>%
layout(yaxis = list(title ='M&I + AG Demand (acre-feet)',tickformat = '.1f',showticklabels=FALSE),showlegend =T)
View(AllDemandData)
s <- subplot(
plot_ly(PlotData30, x = x, y = y,name = 'J1', type = 'scatter', mode = 'markers'),
plot_ly( x = x, y = y,  z = z , type = "contour",contours = list(showlabels = TRUE),showscale = TorF,colors = c("white","yellow"))%>%
colorbar(title = "Percent of\n Years below \n Storage Level")%>%
layout(title = "June 1st Storage Levels Reliability
Moderate Storage Level (380,000 Acre-Feet)",
xaxis = list(title ="Demand (Acre-Feet/Year)"),
yaxis = list(title = "Inflows (Acre-Feet/Year)")))
