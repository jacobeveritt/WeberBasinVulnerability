Annual_Shortages<-data.frame(Annual_Shortages)
colnames(Avg_Annual_Inflow)<-"Annual Shortages"
Annual_Shortages$Trace_Notation <-Trace_Notation
AllData <- full_join(AllDataDF,Avg_Annual_Inflow,by="Trace_Notation")
View(AllData)
View(Avg_Annual_Inflow)
colnames(Avg_Annual_Inflow)[2]<-"Trace_Notation"
View(Avg_Annual_Inflow)
#From Monthly Shortages to  Annual Shortages
Annual_Shortages <-AllDataDF %>%
group_by(WaterYear,Trace_Notation) %>%
summarise_all(funs(sum(Shortage)))
#From Monthly Shortages to  Annual Shortages
Annual_Shortages <-AllDataDF %>%
group_by(WaterYear,Trace_Notation) %>%
summarise_all(funs(sum(Shortage)))
Annual_Shortages<-data.frame(Annual_Shortages)
colnames(Avg_Annual_Inflow)<-"Annual Shortages"
Annual_Shortages$Trace_Notation <-Trace_Notation
View(Annual_Shortages)
#From Monthly Shortages to  Annual Shortages
Annual_Shortages <-AllDataDF %>%
group_by(WaterYear,Trace_Notation) %>%
summarise_all(funs(sum(Shortage)))
Annual_Shortages<-data.frame(Annual_Shortages)
colnames(Avg_Annual_Inflow)<-"Annual Shortages"
Annual_Shortages$Trace_Notation <-Trace_Notation
AllData <- full_join(AllDataDF,Avg_Annual_Inflow,by="Trace_Notation")
View(AllDataDF)
#From Monthly Streamflows to Annual Streamflows
Annual_Inflows <-AllDataDF %>%
group_by(WaterYear,Trace_Notation) %>%
summarise_all(funs(sum(Inflow)))
Avg_Annual_Inflows <- Annual_Inflows %>%
group_by(Trace_Notation) %>%
summarise_all(funs(mean(Inflow)))
Avg_Annual_Inflow<-data.frame(Avg_Annual_Inflows$Inflow)
colnames(Avg_Annual_Inflow)<-"Annual Avg Inflow"
Avg_Annual_Inflow$Trace_Notation <-Trace_Notation
colnames(Avg_Annual_Inflow)[2]<-"Trace_Notation"
View(Avg_Annual_Inflow)
#From Monthly Shortages to  Annual Shortages
Annual_Shortages <-AllDataDF %>%
group_by(WaterYear,Trace_Notation) %>%
summarise_all(funs(sum(Shortage)))
AllData <- full_join(AllDataDF,Avg_Annual_Inflow,by="Trace_Notation")
View(AllData)
Data_J1<- filter(AllDataDF,Month == 6)
Data_NoSed <- filter(Data_J1,Sedimentation==0)
Data_10Perc <- filter(Data_J1,Sedimentation==10)
Data_30Perc <- filter(AllData_J1,Sedimentation==30)
Data_30Perc <- filter(Data_J1,Sedimentation==30)
#Select Data frame to do Calculation on.
Data<- Data_NoSed
###########################################################################################################
#################### Reliability  Metric for Storage ########################
###########################################################################################################
#  -- Metrics based on WBWCD - Drought Contigency Plan Drought Levels --  #
# See Table 3-2 : Hot/Dry Projected Drought for Drought Levels
# Moderate Total Basin Storage Drought Level 340K to 380K -- Yellow  ("Less than 380K")
# Severe Total Basin Storage Drought Level 280K to 340K -- Orange    ("Less than 340K")
# Extreme Total Basin Storage Drought Level less than 280K -- Red    ("Less than 280K")
ModerateLevel<- 380000
SevereLevel <- 340000
ExtremeLevel<-280000
View(Data)
AllData <- full_join(AllDataDF,Avg_Annual_Inflow,by="Trace_Notation")
Data_J1<- filter(AllData,Month == 6)
Data_NoSed <- filter(Data_J1,Sedimentation==0)
Data_10Perc <- filter(Data_J1,Sedimentation==10)
Data_30Perc <- filter(Data_J1,Sedimentation==30)
#Select Data frame to do Calculation on.
Data<- Data_NoSed
###########################################################################################################
#################### Reliability  Metric for Storage ########################
###########################################################################################################
#  -- Metrics based on WBWCD - Drought Contigency Plan Drought Levels --  #
# See Table 3-2 : Hot/Dry Projected Drought for Drought Levels
# Moderate Total Basin Storage Drought Level 340K to 380K -- Yellow  ("Less than 380K")
# Severe Total Basin Storage Drought Level 280K to 340K -- Orange    ("Less than 340K")
# Extreme Total Basin Storage Drought Level less than 280K -- Red    ("Less than 280K")
ModerateLevel<- 380000
SevereLevel <- 340000
ExtremeLevel<-280000
Storage_Metrics <- data.frame(Data$Storage)
Storage_Rel_Metrics_Moderate <- data.frame(Data$Storage)
Storage_Rel_Metrics_Severe <- data.frame(Data$Storage)
Storage_Rel_Metrics_Extreme <- data.frame(Data$Storage)
#Moderate
i=1
while (i<=1080) {
Storage_Rel_Metrics_Moderate[i,] <- ifelse(Data[i,6]>ModerateLevel,1,0)
i=i+1
}
#Severe
i=1
while (i<=1080) {
Storage_Rel_Metrics_Severe[i,] <- ifelse(Data[i,6]>SevereLevel,1,0)
i=i+1
}
#Extreme
i=1
while (i<=1080) {
Storage_Rel_Metrics_Extreme[i,] <- ifelse(Data[i,6]>ExtremeLevel,1,0)
i=i+1
}
Data$ModerateStorageR <-Storage_Rel_Metrics_Moderate$Data.Storage
Data$SevereStorageR <- Storage_Rel_Metrics_Severe$Data.Storage
Data$ExtremeStorageR<- Storage_Rel_Metrics_Extreme$Data.Storage
#Monthly Storage Column Number (MSCN)
MSCN <-9
#Moderate
i=1
while (i<=1080) {
Storage_Rel_Metrics_Moderate[i,] <- ifelse(Data[i,MSCN]>ModerateLevel,1,0)
i=i+1
}
#Severe
i=1
while (i<=1080) {
Storage_Rel_Metrics_Severe[i,] <- ifelse(Data[i,MSCN]>SevereLevel,1,0)
i=i+1
}
#Extreme
i=1
while (i<=1080) {
Storage_Rel_Metrics_Extreme[i,] <- ifelse(Data[i,MSCN]>ExtremeLevel,1,0)
i=i+1
}
Data$ModerateStorageR <-Storage_Rel_Metrics_Moderate$Data.Storage
Data$SevereStorageR <- Storage_Rel_Metrics_Severe$Data.Storage
Data$ExtremeStorageR<- Storage_Rel_Metrics_Extreme$Data.Storage
View(Data)
Data$ModerateStorageR <-Storage_Rel_Metrics_Moderate$Data.Storage
Data$SevereStorageR <- Storage_Rel_Metrics_Severe$Data.Storage
Data$ExtremeStorageR<- Storage_Rel_Metrics_Extreme$Data.Storage
View(Data)
Storage_Rel_Metrics_Moderate
#Moderate
i=1
while (i<=1080) {
Storage_Rel_Metrics_Moderate[i,] <- ifelse(Data[i,MSCN]>ModerateLevel,1,0)
i=i+1
}
Storage_Rel_Metrics_Moderate
Storage_Metrics <- data.frame(Data$Tot_Mnthly_Stor)
Storage_Rel_Metrics_Moderate <- data.frame(Data$Tot_Mnthly_Stor)
Storage_Rel_Metrics_Severe <- data.frame(Data$Tot_Mnthly_Stor)
Storage_Rel_Metrics_Extreme <- data.frame(Data$Tot_Mnthly_Stor)
#Monthly Storage Column Number (MSCN)
MSCN <-9
#Moderate
i=1
while (i<=1080) {
Storage_Rel_Metrics_Moderate[i,] <- ifelse(Data[i,MSCN]>ModerateLevel,1,0)
i=i+1
}
View(Storage_Rel_Metrics_Moderate)
#Moderate
i=1
while (i<=1080) {
Storage_Rel_Metrics_Moderate[i,] <- ifelse(Data[i,MSCN]>ModerateLevel,1,0)
i=i+1
}
#Severe
i=1
while (i<=1080) {
Storage_Rel_Metrics_Severe[i,] <- ifelse(Data[i,MSCN]>SevereLevel,1,0)
i=i+1
}
#Extreme
i=1
while (i<=1080) {
Storage_Rel_Metrics_Extreme[i,] <- ifelse(Data[i,MSCN]>ExtremeLevel,1,0)
i=i+1
}
Data$ModerateStorageR <-Storage_Rel_Metrics_Moderate$Data.Storage
Data$SevereStorageR <- Storage_Rel_Metrics_Severe$Data.Storage
Data$ExtremeStorageR<- Storage_Rel_Metrics_Extreme$Data.Storage
## Calculate Reliability
Stor_Rel_Moderate <- data.frame(1:36)
Stor_Rel_Severe <- data.frame(c(1:36))
Stor_Rel_Extreme <- data.frame(1:36)
Data2<-Data
Data2 <-Data %>%
group_by(Data$Trace_Notation) %>%                             ############## Has issues ########
summarise(ModSum = sum(Data$ModerateStorageR))
View(Data2)
Reliability_Data<-Data
Reliability_Data <-Data %>%
group_by(Data$Trace_Notation) %>%                             ############## Has issues ########
summarise(ModSum = sum(Data$ModerateStorageR))
View(Reliability_Data)
Reliability_Data <-Data %>%
group_by(Trace_Notation) %>%                             ############## Has issues ########
summarise(ModSum = sum(ModerateStorageR))
View(Data)
Data$ModerateStorageR <-Storage_Rel_Metrics_Moderate$Data.Tot_Mnthly_Stor
Data$SevereStorageR <- Storage_Rel_Metrics_Severe$Data.Tot_Mnthly_Stor
Data$ExtremeStorageR<- Storage_Rel_Metrics_Extreme$Data.Tot_Mnthly_Stor
## Calculate Reliability
Stor_Rel_Moderate <- data.frame(1:36)
Stor_Rel_Severe <- data.frame(c(1:36))
Stor_Rel_Extreme <- data.frame(1:36)
Reliability_Data<-Data
Reliability_Data <-Data %>%
group_by(Trace_Notation) %>%                             ############## Has issues ########
summarise(ModSum = sum(ModerateStorageR))
View(Reliability_Data)
Reliability_Data <-Data %>%
group_by(Trace_Notation) %>%                             ############## Has issues ########
summarise(ModSum = mean(ModerateStorageR)*100)
Reliability_Data_Moderate <-Data %>%
group_by(Trace_Notation) %>%
summarise(ModSum = mean(ModerateStorageR)*100)
View(Reliability_Data_Moderate)
Reliability_Data_Moderate <-Data %>%
group_by(Trace_Notation) %>%
summarise(ModSum = mean(ModerateStorageR)*100)
View(Reliability_Data_Moderate)
#Moderate
Reliability_Data_Moderate <-Data %>%
group_by(Trace_Notation) %>%
summarise(ModSum = mean(ModerateStorageR)*100)
#Severe
Reliability_Data_Severe <-Data %>%
group_by(Trace_Notation) %>%
summarise(ModSum = mean(ModerateStorageR)*100)
#Extreme
Reliability_Data_Extreme <-Data %>%
group_by(Trace_Notation) %>%
summarise(ModSum = mean(ModerateStorageR)*100)
PlotData <- Data %>%
group_by(Trace_Notation) %>%
summarise(n_distinct)
PlotData <- Data %>%
group_by(Trace_Notation) %>%
summarise(n_distinct(Trace_Notation))
PlotData <- Data %>%
group_by(Trace_Notation) %>%
summarise(n_distinct(Trace_Notation))
View(PlotData)
PlotData <- Data %>%
group_by(Trace_Notation) %>%
summarise(n_distinct(`Annual Avg Inflow`))
View(PlotData)
PlotData <- Data %>%
group_by(Trace_Notation) %>%
summarise(`Annual Avg Inflow`)
PlotData <- filter(Data == Trace_Notation)
PlotData <- filter(Data, Trace_Notation)
PlotData <- filter(Data, Trace_Notation==Trace_Notation)
View(PlotData)
PlotData <- Avg_Annual_Inflow
PlotData <- Avg_Annual_Inflow
PlotData <- full_join(Avg_Annual_Inflow,Reliability_Data_Moderate,by = 'Trace_Notation')
PlotData <- right_join(Avg_Annual_Inflow,Reliability_Data_Moderate,by = 'Trace_Notation')
#Severe
Reliability_Data_Severe <-Data %>%
group_by(Trace_Notation) %>%
summarise(SevSum = mean(ModerateStorageR)*100)
#Extreme
Reliability_Data_Extreme <-Data %>%
group_by(Trace_Notation) %>%
summarise(ExtSum = mean(ModerateStorageR)*100)
PlotData <- Avg_Annual_Inflow
PlotData <- right_join(Avg_Annual_Inflow,Reliability_Data_Moderate,by = 'Trace_Notation')
PlotData <- right_join(PlotData,Reliability_Data_Severe,by = 'Trace_Notation')
PlotData <- right_join(PlotData,Reliability_Data_Extreme,by = 'Trace_Notation')
View(PlotData)
#Severe
Reliability_Data_Severe <-Data %>%
group_by(Trace_Notation) %>%
summarise(SevSum = mean(SevereStorageR)*100)
#Extreme
Reliability_Data_Extreme <-Data %>%
group_by(Trace_Notation) %>%
summarise(ExtSum = mean(ExtremeStorageR)*100)
PlotData <- right_join(Avg_Annual_Inflow,Reliability_Data_Moderate,by = 'Trace_Notation')
PlotData <- right_join(PlotData,Reliability_Data_Severe,by = 'Trace_Notation')
PlotData <- right_join(PlotData,Reliability_Data_Extreme,by = 'Trace_Notation')
View(PlotData)
PlotData <- right_join((PlotData,Data$Demand,by ='Trace_Notation'))
PlotData <- right_join((PlotData,Data,by ='Trace_Notation'))
PlotData <- right_join(PlotData,Data,by ='Trace_Notation')
View(PlotData)
PlotData <- right_join(Reliability_Data_Moderate,Reliability_Data_Severe,by = 'Trace_Notation')
##################################################################################################
###PLOT Data###
##################################################################################################
PlotData<-1
PlotData <- right_join(Reliability_Data_Moderate,Reliability_Data_Severe,by = 'Trace_Notation')
PlotData <- right_join(PlotData,Reliability_Data_Extreme,by = 'Trace_Notation')
PlotData <- right_join(PlotData,Data,by ='Trace_Notation')
PlotData <- right_join(Reliability_Data_Moderate,Reliability_Data_Severe,by = 'Trace_Notation')
PlotData <- right_join(PlotData,Reliability_Data_Extreme,by = 'Trace_Notation')
PlotData <- left_join(PlotData,Data,by ='Trace_Notation')
PlotData <- right_join(Reliability_Data_Moderate,Reliability_Data_Severe,by = 'Trace_Notation')
PlotData <- right_join(PlotData,Reliability_Data_Extreme,by = 'Trace_Notation')
PlotData <- left_join(PlotData,Data,by ='Trace_Notation')
Data <- PlotData
##################################################################################################
###PLOTS###
##################################################################################################
library(plotly)
#Axis assignment
x=Data$Demand
y=Data$Inflow
y=Data$`Annual Avg Inflow`
setwd("~/GitHub/WeberBasinVulnerability/WeberBasinVulnerability/3 - Post Processing/Output")
# Moderate Demand Level
z=Data$ModerateStorageR
# Moderate Demand Level
z=Data$ModSum
p <- plot_ly(
x = x,
y = y$Inflow,
z = z$Data.Storage , type = "contour",colors = c("yellow","white","snow"),autocontour = F,contours = list(
start = 0,end = 1 , size =1))%>%
colorbar(title = "Fraction of\n Simulated Years")%>%
layout(title = "June 1st Storage Levels that Exceed Moderate Storage Level (380,000 Acre-Feet)",
xaxis = list(title ="Demand (Acre-Feet)"),
yaxis = list(title = "Inflows (Acre-Feet)"))
p <- plot_ly(
x = x,
y = y,
z = z, type = "contour",colors = c("yellow","white","snow"),autocontour = F,contours = list(
start = 0,end = 1 , size =1))%>%
colorbar(title = "Fraction of\n Simulated Years")%>%
layout(title = "June 1st Storage Levels that Exceed Moderate Storage Level (380,000 Acre-Feet)",
xaxis = list(title ="Demand (Acre-Feet)"),
yaxis = list(title = "Inflows (Acre-Feet)"))
p
p <- plot_ly(
x = x,
y = y,
z = z, type = "contour",colors = c("yellow","white","snow"),autocontour = F,contours = list(
start = 0,end = 100 , size =1))%>%
colorbar(title = "Fraction of\n Simulated Years")%>%
layout(title = "June 1st Storage Levels that Exceed Moderate Storage Level (380,000 Acre-Feet)",
xaxis = list(title ="Demand (Acre-Feet)"),
yaxis = list(title = "Inflows (Acre-Feet)"))
p
x = x,
y = y,
z = z, type = "contour",#colors = c("yellow","white","snow"),autocontour = F,contours = list(
#start = 0,end = 100 , size =1))%>%
colorbar(title = "Fraction of\n Simulated Years")%>%
layout(title = "June 1st Storage Levels that Exceed Moderate Storage Level (380,000 Acre-Feet)",
xaxis = list(title ="Demand (Acre-Feet)"),
yaxis = list(title = "Inflows (Acre-Feet)"))
p <- plot_ly(
x = x,
y = y,
z = z, type = "contour"%>%
colorbar(title = "Fraction of\n Simulated Years")%>%
layout(title = "June 1st Storage Levels that Exceed Moderate Storage Level (380,000 Acre-Feet)",
xaxis = list(title ="Demand (Acre-Feet)"),
yaxis = list(title = "Inflows (Acre-Feet)")))
p
p <- plot_ly(
x = x,
y = y,
z = z, type = "contour"#,colors = c("yellow","white","snow"),autocontour = F,contours = list(
#start = 0,end = 100 , size =1))
%>%
colorbar(title = "Fraction of\n Simulated Years")%>%
layout(title = "June 1st Storage Levels that Exceed Moderate Storage Level (380,000 Acre-Feet)",
xaxis = list(title ="Demand (Acre-Feet)"),
yaxis = list(title = "Inflows (Acre-Feet)")))
#Moderate
Reliability_Data_Moderate <-Data %>%
group_by(Trace_Notation) %>%
summarise(ModPercent = mean(ModerateStorageR)*100)
#Severe
Reliability_Data_Severe <-Data %>%
group_by(Trace_Notation) %>%
summarise(SevPercent = mean(SevereStorageR)*100)
#Extreme
Reliability_Data_Extreme <-Data %>%
group_by(Trace_Notation) %>%
summarise(ExtPercent = mean(ExtremeStorageR)*100)
PlotData <- right_join(Reliability_Data_Moderate,Reliability_Data_Severe,by = 'Trace_Notation')
PlotData <- right_join(PlotData,Reliability_Data_Extreme,by = 'Trace_Notation')
PlotData <- left_join(PlotData,Data,by ='Trace_Notation') ####################### -- ISSUES  #############
Data <- PlotData
##################################################################################################
###PLOTS###
##################################################################################################
library(plotly)
#Axis assignment
x=Data$Demand
y=Data$`Annual Avg Inflow`
setwd("~/GitHub/WeberBasinVulnerability/WeberBasinVulnerability/3 - Post Processing/Output")
# Moderate Demand Level
z=Data$ModSum
# Moderate Demand Level
z=Data$ModPercent
p <- plot_ly(
x = x,
y = y,
z = z , type = "contour",colors = c("yellow","white","snow"),autocontour = F,contours = list(
start = 0,end = 100 , size =1))%>%
colorbar(title = "Fraction of\n Simulated Years")%>%
layout(title = "June 1st Storage Levels that Exceed Moderate Storage Level (380,000 Acre-Feet)",
xaxis = list(title ="Demand (Acre-Feet)"),
yaxis = list(title = "Inflows (Acre-Feet)"))
p
#Severe Demand Level
z=Data$SevPercent
p <- plot_ly(
x = x,
y = y$Inflow,
z = z$Data.Storage, type = "contour",colors = c("orange","white","snow"),autocontour = F,contours = list(
start = 0,end = 1 , size =1))%>%
colorbar(title = "Fraction of\n Simulated Years")%>%
layout(title = "June 1st Storage Levels that Exceed Severe Storage Level (340,000 Acre-Feet)",
xaxis = list(title ="Demand (Acre-Feet)"),
yaxis = list(title = "Inflows (Acre-Feet)"))
p <- plot_ly(
x = x,
y = y,
z = z, type = "contour",colors = c("orange","white","snow"),autocontour = F,contours = list(
start = 0,end = 1 , size =1))%>%
colorbar(title = "Fraction of\n Simulated Years")%>%
layout(title = "June 1st Storage Levels that Exceed Severe Storage Level (340,000 Acre-Feet)",
xaxis = list(title ="Demand (Acre-Feet)"),
yaxis = list(title = "Inflows (Acre-Feet)"))
p
p <- plot_ly(
x = x,
y = y,
z = z, type = "contour",colors = c("orange","white","snow"),autocontour = F,contours = list(
start = 0,end = 100 , size =1))%>%
colorbar(title = "Fraction of\n Simulated Years")%>%
layout(title = "June 1st Storage Levels that Exceed Severe Storage Level (340,000 Acre-Feet)",
xaxis = list(title ="Demand (Acre-Feet)"),
yaxis = list(title = "Inflows (Acre-Feet)"))
p
#Extreme Demand Level
z=Data$ExtremeStorageR
p <- plot_ly(
x = x,
y = y,
z = z, type = "contour",colors = c("red","white","snow"),autocontour = F,contours = list(
start = 0,end = 1 , size =1))%>%
colorbar(title = "Fraction of\n Simulated Years")%>%
layout(title = "June 1st Storage Levels that Exceed Extreme Storage Level (280,000 Acre-Feet)",
xaxis = list(title ="Demand (Acre-Feet)"),
yaxis = list(title = "Inflows (Acre-Feet)"))
p
#Extreme Demand Level
z=Data$ExtPercent
p <- plot_ly(
x = x,
y = y,
z = z, type = "contour",colors = c("red","white","snow"),autocontour = F,contours = list(
start = 0,end = 1 , size =1))%>%
colorbar(title = "Fraction of\n Simulated Years")%>%
layout(title = "June 1st Storage Levels that Exceed Extreme Storage Level (280,000 Acre-Feet)",
xaxis = list(title ="Demand (Acre-Feet)"),
yaxis = list(title = "Inflows (Acre-Feet)"))
p
p <- plot_ly(
x = x,
y = y,
z = z, type = "contour",colors = c("red","white","snow"),autocontour = F,contours = list(
start = 0,end = 100 , size =1))%>%
colorbar(title = "Fraction of\n Simulated Years")%>%
layout(title = "June 1st Storage Levels that Exceed Extreme Storage Level (280,000 Acre-Feet)",
xaxis = list(title ="Demand (Acre-Feet)"),
yaxis = list(title = "Inflows (Acre-Feet)"))
p
# Moderate Demand Level
z=Data$ModPercent
p <- plot_ly(
x = x,
y = y,
z = z , type = "contour",colors = c("yellow","white","snow"),autocontour = F,contours = list(
start = 0,end = 100 , size =1))%>%
colorbar(title = "Fraction of\n Simulated Years")%>%
layout(title = "June 1st Storage Levels Reliability
Moderate Storage Level (380,000 Acre-Feet)",
xaxis = list(title ="Demand (Acre-Feet/Year)"),
yaxis = list(title = "Inflows (Acre-Feet/Year)"))
p
#Severe Demand Level
z=Data$SevPercent
p <- plot_ly(
x = x,
y = y,
z = z, type = "contour",colors = c("orange","white","snow"),autocontour = F,contours = list(
start = 0,end = 100 , size =1))%>%
colorbar(title = "Fraction of\n Simulated Years")%>%
layout(title = "June 1st Storage Levels Reliability
Severe Storage Level (340,000 Acre-Feet)",
xaxis = list(title ="Demand (Acre-Feet/Year)"),
yaxis = list(title = "Inflows (Acre-Feet/Year)"))
p
#Extreme Demand Level
z=Data$ExtPercent
p <- plot_ly(
x = x,
y = y,
z = z, type = "contour",colors = c("red","white","snow"),autocontour = F,contours = list(
start = 0,end = 100 , size =1))%>%
colorbar(title = "Fraction of\n Simulated Years")%>%
layout(title = "June 1st Storage Levels Reliability
Extreme Storage Level (280,000 Acre-Feet)",
xaxis = list(title ="Demand (Acre-Feet/Year)"),
yaxis = list(title = "Inflows (Acre-Feet/Year)"))
p
