while (i<=9) {
MIandAg_Demand[,j] <- AG_2015[,1] + MI[,i]
i=i+1
j=j+1
}
colnames(MIandAg_Demand)[1]<-"MI_SA_2015"
#2070
k=1
while (k<=3) {
while (i<=18) {
MIandAg_Demand[,j] <- AG_2070[,k] + MI[,i]
colnames(MIandAg_Demand)[j]<-paste0(colnames(MI)[i],colnames(AG_2070)[k])
i=i+1
j=j+1
}
k=k+1
i=10
}
#2150
i=19
k=1
while (k<=3) {
while (i<=27) {
MIandAg_Demand[,j] <- AG_2150[,k] + MI[,i]
colnames(MIandAg_Demand)[j]<-paste0(colnames(MI)[i],colnames(AG_2150)[k])
i=i+1
j=j+1
}
k=k+1
i=19
}
#write.xlsx(MIandAg_Demand,"MI_with_AG.xlsx")
write.csv(MIandAg_Demand,"MI_with_AG.csv")
#Tab---- Create Workbook-----------
#Input How Many Scenarios                  #### Nine 2015 Scenarios, Twenty-Seven 2070 Scenarios, and Twenty-Seven 2150 Scenarios
#### 63 Total MI plus Ag Scenarios ########
RunNumber <- 63
#Create Workbook
wb <- createWorkbook("Data")
#Create Worksheet for each Run
for(Num in 1:(RunNumber)) {
RunsString <- paste0("Trace",Num)
addWorksheet(wb, RunsString)
}
#Input Data
SAs<- c('SA1','SA2','SA3','SA4','SA5','SA6','SA7','SA8','SA9','SA10','SA11','SA12','SA13','SA14','SA15','SA16','SA17','SA18','SA19','SA20')
i=1
while (i<=RunNumber) {
writeData(wb,sheet = i, SAs,startCol = 1,startRow = 3)
i=i+1
}
i=1
while (i<=RunNumber) {
writeData(wb,sheet = i, MIandAg_Demand[,i],startCol = 2,startRow = 3)
i=i+1
}
##Save workbook
saveWorkbook(wb,"MI+AG.xlsx",overwrite = TRUE)
#################################################################################################################################################################################################################################################################################################################################################################################################################################################
### Sum Data for plots ###
#################################################################################################################################################################################################################################################################################################################################################################################################################################################
#MIandAg_Demand Sums
#Create Data frame
MIandAG_Sums <- t(colnames(MIandAg_Demand))
i=1
while (i<=63) {
MIandAG_Sums[,i] <- sum(MIandAg_Demand[,i])
i=i+1
}
MIandAG_Sums<- data.frame(MIandAG_Sums)
Nms<-t(colnames(MIandAg_Demand))
names(MIandAG_Sums) <- c(Nms)
#Transpose Data
DemandData <- data.frame(t(MIandAG_Sums))
#Name Column
names(DemandData)[1] <- paste("MI + AG")
#Year Column
Year <- c(rep(2015,9),rep(2070,27),rep(2150,27))
DemandData$Year<-Year
#AgConversion Column
AGCF<-c(rep(0,9),rep(c(rep(0,9), rep(71,9), rep(63,9)),2))
DemandData$AG_ConversionFactor <-AGCF
#AgConversion Column
AGCF<-c(rep(100,9),rep(c(rep(100,9), rep(71,9), rep(63,9)),2))
DemandData$AG_ConversionFactor <-AGCF
#Scenario Name Column
DemandData$Scenario_Name<-rownames(DemandData)
#Add MI Factors
rownames(MIAll_Factors)[1]<-"Potable PerCapita % Change"
rownames(MIAll_Factors)[2]<-"Secondary PerCapita % Change"
rownames(MIAll_Factors)[3]<-"Avg Reduced PerCapita % Change"
rownames(MIAll_Factors)[4] <-"Avg Reduced PerCapita GPCD Change"
rownames(MIAll_Factors)[5] <-"PerCapita Change by Scenario"
rownames(MIAll_Factors)[6]<-"ET Change by %"
rownames(MIAll_Factors)[7]<-"ET Change by Scenario"
rownames(MIAll_Factors)[8]<-"ET Change by Acre-Feet/Year"
rownames(MIAll_Factors)[9]<-"Population"
Transposed_MIAllFactors <-t(MIAll_Factors)
Transposed_MIAllFactors<-data.frame(Transposed_MIAllFactors)
MI_Factors_2015<-Transposed_MIAllFactors[1:9,]
MI_Factors_2070<-Transposed_MIAllFactors%>% filter(Population==5109197)
MI_Factors_2070[10:27,]<-MI_Factors_2070
rownames(MI_Factors_2070) <- rownames(DemandData)[10:36]
MI_Factors_2150<-Transposed_MIAllFactors%>% filter(Population==6965058)
MI_Factors_2150[10:27,]<-MI_Factors_2150
rownames(MI_Factors_2150) <- rownames(DemandData)[37:63]
MI_Factors<- rbind(MI_Factors_2015,MI_Factors_2070,MI_Factors_2150)
rownames(MI_Factors)<-rownames(DemandData)
colnames(MI_Factors)<-c("Potable_PerCapita_%_Change","Secondary_PerCapita_%_Change","Average_PerCapita_%_Change","Average_GPCD","PerCapita_Scenario","ET_%_Change","ET_Scenario","ET_Changes","Population")
AllDemandData <- cbind(DemandData,MI_Factors)
#Print to pdf
library(gridExtra)
pdf("AllDemandData.pdf", height=18, width=33)
grid.table(AllDemandData)
dev.off()
write.xlsx(AllDemandData,"AllDemandData.xlsx")
Data <-read.xlsx("AllDemandData.xlsx")
##########Fix numeric issues #######
Data<-  data.matrix(Data, rownames.force = NA)
#View(AllDemandData)
Data<-data.frame(Data[,c(1:3,5:7,8,10,12,13)])
##MIandAG_Sums Plots##################################################################
##4d plots
#text format
t <- list(
family = "sans serif",
size = 10,
color ='grey')
#Add row names to Data dataframe
rwnms<-(rownames(AllDemandData))
rwnms<-gsub("MI_SA_","",rwnms)
rwnms<-gsub(' Conversion Factor','AG CF',rwnms)
#take out years
#rwnms<-gsub("_2015","",rwnms)
#rwnms<-gsub("_2070","",rwnms)
#rwnms<-gsub("_2150","",rwnms)
rownames(Data)<-rwnms
#plots
p<-plot_ly(data =Data , x=Data$Year, y=Data$MI...AG,type='scatter',mode='markers',
size = Data$Average_PerCapita_._Change,color = Data$ET_._Change,colors = c("lightblue","skyblue","midnightblue"),
mode = 'markers',symbol = factor(Data$AG_ConversionFactor),legendtitle='AG CF',
symbols = c('square-open','x-open','circle-open','diamond-open')
)%>%
add_text(text = rownames(Data),textfont = t, textposition = "top right") %>%
layout(yaxis = list(title ='M&I + AG Demand (acre-feet)'),
showlegend =T,title='Demand Scenarios',
xaxis=list(title='Year',tickvals=list(2015,2070,2150),
ticktext=list('2015','2070','2150'),tickmode="array"))
Data$DemandScenarios <-rownames(Data)
#Min and max of each year
x2015<-Data %>% filter(Year==2015)
x2015_min <- x2015 %>% filter(MI...AG==min(x2015$MI...AG))
x2015_max <- x2015 %>% filter(MI...AG==max(x2015$MI...AG))
x2070<-Data %>% filter(Year==2070)
x2070_min <- x2070 %>% filter(MI...AG==min(x2070$MI...AG))
x2070_max <- x2070 %>% filter(MI...AG==max(x2070$MI...AG))
x2150<-Data %>% filter(Year==2150)
x2150_min <- x2150 %>% filter(MI...AG==min(x2150$MI...AG))
x2150_max <- x2150 %>% filter(MI...AG==max(x2150$MI...AG))
x2015<-full_join(x2015_min,x2015_max)
x2070<-full_join(x2070_min,x2070_max)
x2150<-full_join(x2150_min,x2150_max)
tempx<-full_join(x2015,x2070)
DD_MIN_MAX<- full_join(tempx,x2150)
Data2<-DD_MIN_MAX
write.xlsx(DD_MIN_MAX,"DemandSelections.xlsx")
#Minimums and Maximum seperate
tempmin<-full_join(x2015_min,x2070_min)
DD_MIN<-full_join(tempmin,x2150_min)
tempmax<-full_join(x2015_max,x2070_max)
DD_MAX<-full_join(tempmax,x2150_max)
#Scatter points   ###################### PLOTs FOR WEBER PRESENTATION ########################
BaseCase<-Data[1,1]
plot_ly(data =Data2 , x=Data2$Year, y=Data2$MI...AG,type='scatter', name = '6 Selected Demand Scenarios'
,mode='markers',marker = list(size = 12,color = 'red'))%>%
add_trace(x=Data$Year,y=Data$MI...AG,type='scatter', name='57 Demand Scenarios',
marker = list(size = 6,color = ' rgba(0, 210, 255, 1)'))%>%
add_text(text = c("
Average  GPCD Average
Base PET (Increased 0 (AF/Yr))
0% Ag. Conv. Factor","
Average 0 GPCD
High PET (Increased 9,142 (AF/Yr))
0% Ag. Conv. Factor","
Average 17 GPCD
Base PET (Increased 0 (AF/Yr))
0% Ag. Conv. Factor","
Average 0 GPCD
High PET (Increased 16,237 (AF/Yr))
63% Ag. Conv. Factor","
Average 0 GPCD
High PET (Increased 22,331 (AF/Yr))
0% Ag. Conv. Factor","
Average  0 GPCD
Base PET (Increased 0 (AF/Yr))
63% Ag. Conv. Factor")
,textfont = t, textposition = "right",showlegend = FALSE) %>%
add_trace(y=BaseCase,x='2015',type='scatter', mode='markers',name = 'Base Case',
marker = list(size = 10,color = 'rgba(0, 0, 0, 1)'))%>%
layout(yaxis = list(title ='Municipal, Industrial, & Agricultural Demand (acre-feet/year)'),
showlegend =T,title='Selected Demand Scenarios',
xaxis=list(title='Year',tickvals=list(2015,2070,2150),
ticktext=list('2015 (Population: 2.5 Million)','2070 (Population: 5.1 Million)','2150 (Population: 6.9 Million)'),tickmode="array"))
##Parallel plot
plot_ly(data=Data,width = 900, height = 600) %>%
add_trace(type = 'parcoords',
line = list(color = Data$MI...AG,
colorscale = 'Blues',
showscale = TRUE,
reversescale = TRUE,
cmin = 350000,
cmax = 950000),
dimensions = list(
list(range = c(~round(min(Data$MI...AG)),~round(max(Data$MI...AG))),
# constraintrange = c(100000,150000),
label = 'Demand (AF/Yr)', values = round(Data$MI...AG)),
list(range = c((~min(Data$Population)-1000),(~max(Data$Population)+1000)),
label = 'Population', values = Data$Population),
list(range = c(~min(Data$AG_ConversionFactor),~max(Data$AG_ConversionFactor)),
label = 'Ag Conversion', values = Data$AG_ConversionFactor),
list(range = c(~min(Data$Average_GPCD),~max(Data$Average_GPCD)),
label = 'Average GPCD', values = Data$Average_GPCD),
list(range = c(~min(Data$ET_Changes),~max(Data$ET_Changes)),
label = 'ET Impact (AF/Yr)', values = Data$ET_Changes)  #,
#list(range = c(~min(Data$Potable_PerCapita_._Change),~max(Data$Potable_PerCapita_._Change)),
#     label = 'Average Potable PerCapita % Change', values = Data$Potable_PerCapita_._Change),
#list(range = c(~min(Data$Secondary_PerCapita_._Change),~max(Data$Secondary_PerCapita_._Change)),
#    label = 'Average Secondary PerCapita % Change', values = Data$Secondary_PerCapita_._Change)
)  )%>%
layout(yaxis = list(title ='M&I + AG Demand (acre-feet)'),
xaxis=list(title='FACTORS'))
DemandScenarios
View(DemandData)
View(SelectedDemands)
colnames(MIandAg_Demand)<-rownames(Data)
SelectedDemands<-MIandAg_Demand %>% select(c(DD_MIN_MAX$DemandScenarios))
RunNumber <- 6
#Create Workbook
wb <- createWorkbook("Data")
#Create Worksheet for each Run
for(Num in 1:(RunNumber)) {
RunsString <- paste0("Trace",Num)
addWorksheet(wb, RunsString)
}
#Input Data
SAs<- c('SA1','SA2','SA3','SA4','SA5','SA6','SA7','SA8','SA9','SA10','SA11','SA12','SA13','SA14','SA15','SA16','SA17','SA18','SA19','SA20')
#Trace 1-6
i=1
while (i<=RunNumber) {
writeData(wb,sheet = i, SAs,startCol = 1,startRow = 3)
writeData(wb,sheet = i,c("Demand Data.AnnualDemands","AnnDmnd"),startCol = 2,startRow = 1)
i=i+1
}
#Loop through Traces 1-6
i=1
while (i<=6) {
writeData(wb,sheet = i, SelectedDemands[,i],startCol = 2,startRow = 3)
i=i+1
}
#Output
saveWorkbook(wb,"MI+AG_Values.xlsx",overwrite = TRUE)
#Return to code directory
setwd("~/GitHub/WeberBasinVulnerability/WeberBasinVulnerability/2 - RiverWare Modeling/Hydrology")
setwd(fCodeDir)
#Move into the local output directory
setwd("../2 - RiverWare Modeling/Hydrology")
# Output file (MI+AG.xlsx)
saveWorkbook(wb,"MI+AG_Values.xlsx",overwrite = TRUE)
#Return to the code directory
setwd(fCodeDir)
#RunNumber <- 6
#RunNumber <- 6
#Create Workbook
#RunNumber <- 6
#Create Workbook
#wb <- createWorkbook("Data")
#RunNumber <- 6
#Create Workbook
#wb <- createWorkbook("Data")
#Create Worksheet for each Run
#RunNumber <- 6
#Create Workbook
#wb <- createWorkbook("Data")
#Create Worksheet for each Run
#for(Num in 1:(RunNumber)) {
#RunNumber <- 6
#Create Workbook
#wb <- createWorkbook("Data")
#Create Worksheet for each Run
#for(Num in 1:(RunNumber)) {
#RunsString <- paste0("Trace",Num)
#RunNumber <- 6
#Create Workbook
#wb <- createWorkbook("Data")
#Create Worksheet for each Run
#for(Num in 1:(RunNumber)) {
#RunsString <- paste0("Trace",Num)
#addWorksheet(wb, RunsString)
#RunNumber <- 6
#Create Workbook
#wb <- createWorkbook("Data")
#Create Worksheet for each Run
#for(Num in 1:(RunNumber)) {
#RunsString <- paste0("Trace",Num)
#addWorksheet(wb, RunsString)
#}
#RunNumber <- 6
#Create Workbook
#wb <- createWorkbook("Data")
#Create Worksheet for each Run
#for(Num in 1:(RunNumber)) {
#RunsString <- paste0("Trace",Num)
#addWorksheet(wb, RunsString)
#}
#Input Data
#Trace 1-6
#Trace 1-6
#i=1
Trace 1-6
#i=1
#while (i<=RunNumber) {
#Trace 1-6
#i=1
#while (i<=RunNumber) {
# writeData(wb,sheet = i, SAs,startCol = 1,startRow = 3)
Trace 1-6
#i=1
#while (i<=RunNumber) {
# writeData(wb,sheet = i, SAs,startCol = 1,startRow = 3)
#  writeData(wb,sheet = i,c("Demand Data.AnnualDemands","AnnDmnd"),startCol = 2,startRow = 1)
race 1-6
#i=1
#while (i<=RunNumber) {
# writeData(wb,sheet = i, SAs,startCol = 1,startRow = 3)
#  writeData(wb,sheet = i,c("Demand Data.AnnualDemands","AnnDmnd"),startCol = 2,startRow = 1)
# i=i+1
race 1
#Trace 1
#writeData(wb,sheet = 1, MIandAg_Demand[,4],startCol = 2,startRow = 3)
race 1
#writeData(wb,sheet = 1, MIandAg_Demand[,4],startCol = 2,startRow = 3)
#Trace 2
#Trace 1
#writeData(wb,sheet = 1, MIandAg_Demand[,4],startCol = 2,startRow = 3)
#Trace 2
#writeData(wb,sheet = 2, MIandAg_Demand[,31],startCol = 2,startRow = 3)
#Trace 1
#writeData(wb,sheet = 1, MIandAg_Demand[,4],startCol = 2,startRow = 3)
#Trace 2
#writeData(wb,sheet = 2, MIandAg_Demand[,31],startCol = 2,startRow = 3)
#Trace 3
#writeData(wb,sheet = 3, MIandAg_Demand[,58],startCol = 2,startRow = 3)
race 1
#writeData(wb,sheet = 1, MIandAg_Demand[,4],startCol = 2,startRow = 3)
#Trace 2
#writeData(wb,sheet = 2, MIandAg_Demand[,31],startCol = 2,startRow = 3)
#Trace 3
race 1
#writeData(wb,sheet = 1, MIandAg_Demand[,4],startCol = 2,startRow = 3)
#Trace 2
#writeData(wb,sheet = 2, MIandAg_Demand[,31],startCol = 2,startRow = 3)
#Trace 3
#writeData(wb,sheet = 3, MIandAg_Demand[,58],startCol = 2,startRow = 3)
#Trace 4
#Trace 1
#writeData(wb,sheet = 1, MIandAg_Demand[,4],startCol = 2,startRow = 3)
#Trace 2
#writeData(wb,sheet = 2, MIandAg_Demand[,31],startCol = 2,startRow = 3)
#Trace 3
#writeData(wb,sheet = 3, MIandAg_Demand[,58],startCol = 2,startRow = 3)
#Trace 4
#writeData(wb,sheet = 4, MIandAg_Demand[,9],startCol = 2,startRow = 3)
race 1
#writeData(wb,sheet = 1, MIandAg_Demand[,4],startCol = 2,startRow = 3)
#Trace 2
#writeData(wb,sheet = 2, MIandAg_Demand[,31],startCol = 2,startRow = 3)
#Trace 3
#writeData(wb,sheet = 3, MIandAg_Demand[,58],startCol = 2,startRow = 3)
#Trace 4
#writeData(wb,sheet = 4, MIandAg_Demand[,9],startCol = 2,startRow = 3)
#Trace 5
#Trace 1
#writeData(wb,sheet = 1, MIandAg_Demand[,4],startCol = 2,startRow = 3)
#Trace 2
#writeData(wb,sheet = 2, MIandAg_Demand[,31],startCol = 2,startRow = 3)
#Trace 3
#writeData(wb,sheet = 3, MIandAg_Demand[,58],startCol = 2,startRow = 3)
#Trace 4
#writeData(wb,sheet = 4, MIandAg_Demand[,9],startCol = 2,startRow = 3)
#Trace 5
#writeData(wb,sheet = 5, MIandAg_Demand[,33],startCol = 2,startRow = 3)
#writeData(wb,sheet = 1, MIandAg_Demand[,4],startCol = 2,startRow = 3)
#Trace 2
#writeData(wb,sheet = 2, MIandAg_Demand[,31],startCol = 2,startRow = 3)
#Trace 3
#writeData(wb,sheet = 3, MIandAg_Demand[,58],startCol = 2,startRow = 3)
#Trace 4
#writeData(wb,sheet = 4, MIandAg_Demand[,9],startCol = 2,startRow = 3)
#Trace 5
#writeData(wb,sheet = 5, MIandAg_Demand[,33],startCol = 2,startRow = 3)
#Trace 6
DD_MIN_MAX
View(DD_MIN_MAX)
##Parallel plot With Selected Demands
plot_ly(data=Data,width = 900, height = 600) %>%
add_trace(type = 'parcoords',
line = list(color = Data$MI...AG,
colorscale = 'Blues',
showscale = TRUE,
reversescale = TRUE,
cmin = 350000,
cmax = 950000),
dimensions = list(
list(range = c(~round(min(Data$MI...AG)),~round(max(Data$MI...AG))),
constraintrange = c(DD_MIN_MAX$MI...AG),
label = 'Demand (AF/Yr)', values = round(Data$MI...AG)),
list(range = c((~min(Data$Population)-1000),(~max(Data$Population)+1000)),
label = 'Population', values = Data$Population),
list(range = c(~min(Data$AG_ConversionFactor),~max(Data$AG_ConversionFactor)),
label = 'Ag Conversion', values = Data$AG_ConversionFactor),
list(range = c(~min(Data$Average_GPCD),~max(Data$Average_GPCD)),
label = 'Average GPCD', values = Data$Average_GPCD),
list(range = c(~min(Data$ET_Changes),~max(Data$ET_Changes)),
label = 'ET Impact (AF/Yr)', values = Data$ET_Changes)  #,
#list(range = c(~min(Data$Secondary_PerCapita_._Change),~max(Data$Secondary_PerCapita_._Change)),
#    label = 'Average Secondary PerCapita % Change', values = Data$Secondary_PerCapita_._Change)
)  )%>%
layout(yaxis = list(title ='M&I + AG Demand (acre-feet)'),
xaxis=list(title='FACTORS'))
DD_MIN_MAX
DD_MIN_MAX$MI...AG
##Parallel plot With Selected Demands
plot_ly(data=Data,width = 900, height = 600) %>%
add_trace(type = 'parcoords',
line = list(color = Data$MI...AG,
colorscale = 'Blues',
showscale = TRUE,
reversescale = TRUE,
cmin = 350000,
cmax = 950000),
dimensions = list(
list(range = c(~round(min(Data$MI...AG)),~round(max(Data$MI...AG))),
constraintrange = c(492119,492139,557831,557851,733424,733444),
label = 'Demand (AF/Yr)', values = round(Data$MI...AG)),
list(range = c((~min(Data$Population)-1000),(~max(Data$Population)+1000)),
label = 'Population', values = Data$Population),
list(range = c(~min(Data$AG_ConversionFactor),~max(Data$AG_ConversionFactor)),
label = 'Ag Conversion', values = Data$AG_ConversionFactor),
list(range = c(~min(Data$Average_GPCD),~max(Data$Average_GPCD)),
label = 'Average GPCD', values = Data$Average_GPCD),
list(range = c(~min(Data$ET_Changes),~max(Data$ET_Changes)),
label = 'ET Impact (AF/Yr)', values = Data$ET_Changes)  #,
#list(range = c(~min(Data$Secondary_PerCapita_._Change),~max(Data$Secondary_PerCapita_._Change)),
#    label = 'Average Secondary PerCapita % Change', values = Data$Secondary_PerCapita_._Change)
)  )%>%
layout(yaxis = list(title ='M&I + AG Demand (acre-feet)'),
xaxis=list(title='FACTORS'))
DD_MIN_MAX$MI...AG
##Parallel plot With Selected Demands
plot_ly(data=Data,width = 900, height = 600) %>%
add_trace(type = 'parcoords',
line = list(color = Data$MI...AG,
colorscale = 'Blues',
showscale = TRUE,
reversescale = TRUE,
cmin = 350000,
cmax = 950000),
dimensions = list(
list(range = c(~round(min(Data$MI...AG)),~round(max(Data$MI...AG))),
constraintrange = c(492119,492139,557831,557851,733424,733444,366428,366448,883840,883860),
label = 'Demand (AF/Yr)', values = round(Data$MI...AG)),
list(range = c((~min(Data$Population)-1000),(~max(Data$Population)+1000)),
label = 'Population', values = Data$Population),
list(range = c(~min(Data$AG_ConversionFactor),~max(Data$AG_ConversionFactor)),
label = 'Ag Conversion', values = Data$AG_ConversionFactor),
list(range = c(~min(Data$Average_GPCD),~max(Data$Average_GPCD)),
label = 'Average GPCD', values = Data$Average_GPCD),
list(range = c(~min(Data$ET_Changes),~max(Data$ET_Changes)),
label = 'ET Impact (AF/Yr)', values = Data$ET_Changes)  #,
#list(range = c(~min(Data$Secondary_PerCapita_._Change),~max(Data$Secondary_PerCapita_._Change)),
#    label = 'Average Secondary PerCapita % Change', values = Data$Secondary_PerCapita_._Change)
)  )%>%
layout(yaxis = list(title ='M&I + AG Demand (acre-feet)'),
xaxis=list(title='FACTORS'))
##Parallel plot With Selected Demands
plot_ly(data=Data,width = 900, height = 600) %>%
add_trace(type = 'parcoords',
line = list(color = Data$MI...AG,
colorscale = 'Blues',
showscale = TRUE,
reversescale = TRUE,
cmin = 350000,
cmax = 950000),
dimensions = list(
list(range = c(~round(min(Data$MI...AG)),~round(max(Data$MI...AG))),
constraintrange = c(c(492119,492139),c(557831,557851),c(733424,733444),c(366428,366448),c(883840,883860)),
label = 'Demand (AF/Yr)', values = round(Data$MI...AG)),
list(range = c((~min(Data$Population)-1000),(~max(Data$Population)+1000)),
label = 'Population', values = Data$Population),
list(range = c(~min(Data$AG_ConversionFactor),~max(Data$AG_ConversionFactor)),
label = 'Ag Conversion', values = Data$AG_ConversionFactor),
list(range = c(~min(Data$Average_GPCD),~max(Data$Average_GPCD)),
label = 'Average GPCD', values = Data$Average_GPCD),
list(range = c(~min(Data$ET_Changes),~max(Data$ET_Changes)),
label = 'ET Impact (AF/Yr)', values = Data$ET_Changes)  #,
#list(range = c(~min(Data$Secondary_PerCapita_._Change),~max(Data$Secondary_PerCapita_._Change)),
#    label = 'Average Secondary PerCapita % Change', values = Data$Secondary_PerCapita_._Change)
)  )%>%
layout(yaxis = list(title ='M&I + AG Demand (acre-feet)'),
xaxis=list(title='FACTORS'))
DD_MIN_MAX
DD_MIN_MAX$MI...AG
