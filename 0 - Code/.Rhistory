colnames(Data)[cLastDataCol +i] <- cStoreNames[i]
}
#Monthly Storage Column Number (MSCN)
MSCN <-9
Data$ModerateStorageR <-Storage_Rel_Metrics_Moderate$Data.Tot_Mnthly_Stor
View(Data)
# ## Calculate Reliability
Stor_Rel_Moderate <- data.frame(1:36)
Stor_Rel_Severe <- data.frame(c(1:36))
Stor_Rel_Extreme <- data.frame(1:36)
cRelColNames <- paste0("Rel", cStoreNames)
#Calculate the average (fraction) for each combination of traces for each column. This represents
#the reliability
dfStorageReliability <-Data[,c("Trace_Notation","Month",cStoreNames)] %>%
filter(Month == 6) %>%  #Filter on the June month because that is when we care about storage at criteria
group_by(Trace_Notation) %>%
summarise_all(funs(mean))
#Multiply by 100 to get a percent
dfStorageReliability[,cStoreNames] <- dfStorageReliability[,cStoreNames]*100
colnames(dfStorageReliability)[3:5] <- c("Mod Reliability", "Sev Reliability","Ext Reliability")
##### Join the Reservoir storage reliability back with the big data set
AllData<-right_join(Data,dfStorageReliability,by='Trace_Notation')
View(AllData)
#Create Label Dataframe
Titles <- c("June 1st Storage Levels Reliability
Moderate Storage Level (380,000 Acre-Feet)",
"June 1st Storage Levels Reliability
Severe Storage Level (340,000 Acre-Feet)",
"June 1st Storage Levels Reliability
Extreme Storage Level (280,000 Acre-Feet)",
"June 1st Storage Levels Reliability")
Titles <-data.frame(Titles)
Axises <-c("Demand (Acre-Feet/Year)","Inflows (Acre-Feet/Year)")
Axises<- data.frame(Axises)
#Axis assignment
x=AllData$Demand
y=Data$`Annual Avg Inflow.x`
setwd(startWD)
setwd("../3 - Post Processing/Output")
# Moderate Demand Level
z=AllData$`Mod Reliability`
p <- plot_ly(
x = x,
y = y,
z = z , type = "contour",colors = c("yellow","white"))%>%
colorbar(title = "Percent of\n Simulated Years")%>%
layout(title = "June 1st Storage Levels Reliability
Moderate Storage Level (380,000 Acre-Feet)",
xaxis = list(title ="Demand (Acre-Feet/Year)"),
yaxis = list(title = "Inflows (Acre-Feet/Year)"))
p
p <- plot_ly(
x = x,
y = y,
z = z , type = "contour",colors = c("yellow","white"))%>%
#colorbar(title = "Percent of\n Simulated Years")%>%
layout(title = "June 1st Storage Levels Reliability
Moderate Storage Level (380,000 Acre-Feet)",
xaxis = list(title ="Demand (Acre-Feet/Year)"),
yaxis = list(title = "Inflows (Acre-Feet/Year)"))
p
Data_NoSed <- filter(AllData,Sedimentation==0)
#Select Data frame to do Calculation on.
Data<- Data_NoSed
# Moderate Demand Level
z=AllData$`Mod Reliability`
# Moderate Demand Level
z=Data$`Mod Reliability`
p <- plot_ly(
x = x,
y = y,
z = z , type = "contour",colors = c("yellow","white"))%>%
colorbar(title = "Percent of\n Simulated Years")%>%
layout(title = "June 1st Storage Levels Reliability
Moderate Storage Level (380,000 Acre-Feet)",
xaxis = list(title ="Demand (Acre-Feet/Year)"),
yaxis = list(title = "Inflows (Acre-Feet/Year)"))
p
View(Data)
#Select Data frame to do Calculation on.
PlotData<- Data_NoSed
#########Individual PLOTS############
x<-PlotData
y<-PlotData$`Annual Avg Inflow.x`
# Moderate Demand Level
z=Data$`Mod Reliability`
p <- plot_ly(
x = x,
y = y,
z = z , type = "contour",colors = c("yellow","white"))%>%
colorbar(title = "Percent of\n Simulated Years")%>%
layout(title = "June 1st Storage Levels Reliability
Moderate Storage Level (380,000 Acre-Feet)",
xaxis = list(title ="Demand (Acre-Feet/Year)"),
yaxis = list(title = "Inflows (Acre-Feet/Year)"))
p
# Moderate Demand Level
z=PlotData$`Mod Reliability`
p <- plot_ly(
x = x,
y = y,
z = z , type = "contour",colors = c("yellow","white"))%>%
colorbar(title = "Percent of\n Simulated Years")%>%
layout(title = "June 1st Storage Levels Reliability
Moderate Storage Level (380,000 Acre-Feet)",
xaxis = list(title ="Demand (Acre-Feet/Year)"),
yaxis = list(title = "Inflows (Acre-Feet/Year)"))
p
### Clear any existing data or functions.
rm(list=ls())
library("dplyr", lib.loc="~/R/win-library/3.5")
#Record the current directory (0 - Code) for later recall
startWD <- getwd()
###Total Storage Compilation#--------------------------------------------------------------------------------#
#Store the current code directory so we can later return to it (0 - Code)
### Load the package or install if not present
if (!require("RColorBrewer")) {
install.packages("RColorBrewer")
library(RColorBrewer)
}
library(readr)
#install.packages("reshape")
library(reshape) #For Melt
library(lubridate) #For month
library(plotly) # For Plots
library(data.table)
library(dplyr)
####-----------------------------Trace Notation--------------------------------------------------
# Build names of folders output by RiverSmart
TraceNumber <- 6
TraceNumber1 <-6
TraceNumber2 <-3
Tot_TraceNum <- TraceNumber*TraceNumber1*TraceNumber2
Trace_Notation <-c(1:Tot_TraceNum)
i=1
for(TTTNum in 1:TraceNumber){
for(TTNum in 1:TraceNumber1){
for(TNum in 1:TraceNumber2){
TraceDirectory <- paste0(",Trace",TNum)
TraceNum1<- paste0(",Trace",TTNum)
TraceDirectory <- paste0(TraceNum1,TraceDirectory)
TraceNum2 <- paste0("Trace",TTTNum)
TraceDirectory <- paste0(TraceNum2,TraceDirectory)
Trace_Notation[i] <-  TraceDirectory
i=i+1
}
}
}
Trace_Notation_Data<- rep(Trace_Notation,359)
######## - A -   Compiling Annual Demands  ########
setwd("../1 - Scenario Processing/Annual Service Area Demand Scenarios/Output")
Tot_Annual_Demand <- read.csv("SumMIandAG.csv")
######## - A -   Compiling Annual Demands  ########
setwd("../1 - Scenario Processing/Annual Service Area Demand Scenarios/Output")
#Record the current directory (0 - Code) for later recall
startWD <- getwd()
# Switch into local directory
setwd("~/GitHub/WeberBasinVulnerability/WeberBasinVulnerability/2 - RiverWare Modeling/Scenario")
setwd("../1 - Scenario Processing/Annual Service Area Demand Scenarios/Output")
setwd("~/GitHub/WeberBasinVulnerability/WeberBasinVulnerability/0 - Code")
######## - A -   Compiling Annual Demands  ########
setwd("~/GitHub/WeberBasinVulnerability/WeberBasinVulnerability/0 - Code")
setwd("~/GitHub/WeberBasinVulnerability/WeberBasinVulnerability/1 - Scenario Processing/Annual Service Area Demand Scenarios/Output")
Tot_Annual_Demand <- read.csv("SumMIandAG.csv")
Tot_Demand <- data.frame(c(1:108))
i=1
j=1
while (i<=6) {
Tot_Demand[j:(j+17),] <- rep(Tot_Annual_Demand[i,2],(18))
i=i+1
j=j+18
}
#View(Tot_Demand)
colnames(Tot_Demand) <- "Demand"
rownames(Tot_Demand) <- Trace_Notation
Tot_Mnthly_Demand<-data.frame(rep(Tot_Demand$Demand,359))
colnames(Tot_Mnthly_Demand) <- "Demand"
# Switch into local directory
setwd("~/GitHub/WeberBasinVulnerability/WeberBasinVulnerability/2 - RiverWare Modeling/Scenario")
#Input Monthly data from RiverSmart Analysis
Tot_Mnthly_Inflow <-read.csv("Trace1,Trace1,Trace1/Total Inflows.csv")
i=1
for(TTTNum in 1:TraceNumber){
for(TTNum in 1:TraceNumber1){
for(TNum in 1:TraceNumber2){
TraceDirectory <- paste0(",Trace",TNum)
TraceDirectory <-paste0 (TraceDirectory,"/Total Inflows.csv")
TraceNum1<- paste0(",Trace",TTNum)
TraceDirectory <- paste0(TraceNum1,TraceDirectory)
TraceNum2 <- paste0("Trace",TTTNum)
TraceDirectory <- paste0(TraceNum2,TraceDirectory)
Location <- TraceDirectory
Temp_Storage <- read.csv(Location)
Tot_Mnthly_Inflow[,i] <- Temp_Storage[,5]
colnames(Tot_Mnthly_Inflow)[i] <-  TraceDirectory
i=i+1
}
}
}
Tot_Mnthly_Inflow <- data.frame(Tot_Mnthly_Inflow)
Months <- rep(c(1:12),31)
Months<- Months[(11:369)]
Tot_Mnthly_Inflow$Months <- Months
#Create Years
Years <- c(0:372)
i=1
j=1
while (j<=31) {
Years[(i:(i+11))] <- rep((j-1),12)
i=i+12
j=j+1
}
Years<- Years[(11:369)]
#Add months and Years column
#Tot_Mnthly_Inflow$Months <-Months
Tot_Mnthly_Inflow$Years <- Years
#Add a Water year - The water year is designated by the calendar year in which it ends, so the 2010 water year (USGS) started on October 1, 2009 and ended on September 30, 2010
Tot_Mnthly_Inflow$WaterYear <- ifelse(Tot_Mnthly_Inflow$Months>= 10,Tot_Mnthly_Inflow$Years + 1, Tot_Mnthly_Inflow$Years)
WaterYear<-ifelse(Tot_Mnthly_Inflow$Months>= 10,Tot_Mnthly_Inflow$Years + 1, Tot_Mnthly_Inflow$Years)
#Transpose Data
Tot_Mnthly_Inflow_Transposed <- t(Tot_Mnthly_Inflow)
Tot_Mnthly_Inflow_Transposed <- data.frame(Tot_Mnthly_Inflow_Transposed)
#View(Tot_Mnthly_Inflow_Transposed)
#Stack Columns
Tot_Mnthly_Inflow_Stacked <- stack(Tot_Mnthly_Inflow_Transposed[1:108,1:359])
Tot_Mnthly_Inflow <- Tot_Mnthly_Inflow_Stacked$values
##Total Sedimentation Changes on Reservoir
#Move back to code directory
setwd(startWD)
#Move into the local input directory
setwd("../3 - Post Processing")
setwd("~/GitHub/WeberBasinVulnerability/WeberBasinVulnerability/3 - Post Processing")
Tot_Sed <- read.csv("Sedimentation.csv")
Tot_Sed <- Tot_Sed[,2]
Tot_Mnthly_Sed <- rep(Tot_Sed,359)
#### Time Columns: Mnths, Years and Water Years #####
Mnths<-c(1:38772)
i=1
j=1
while (i<=359) {
Mnths[j:(i*108)]<-Months[i]
i=i+1
j=j+108
}
Yrs<-c(1:38772)
i=1
j=1
while (i<=359) {
Yrs[j:(i*108)]<-Years[i]
i=i+1
j=j+108
}
Wtr_Yrs<-c(1:38772)
i=1
j=1
while (i<=359) {
Wtr_Yrs[j:(i*108)]<-WaterYear[i]
i=i+1
j=j+108
}
##################   Compile Mnthly Input data    ##################################
#Create Data Frame
Inputs<- data.frame(Tot_Mnthly_Demand)
Inputs$Inflow <- Tot_Mnthly_Inflow
Inputs$Sedimentation <- Tot_Mnthly_Sed
Inputs$Trace_Notation <- Trace_Notation
Inputs$Month<-Mnths
Inputs$Years<-Yrs
Inputs$WaterYear<-Wtr_Yrs
#Number
Inputs$Number<-c(1:38772)
Inputs <- data.frame(Inputs)
##################################  - 2 - Output data ########################################################
#Set Local Directory
setwd(startWD)
setwd("../2 - RiverWare Modeling/Scenario")
setwd("~/GitHub/WeberBasinVulnerability/WeberBasinVulnerability/2 - RiverWare Modeling/Scenario")
Tot_Mnthly_Stor <- read.csv("Trace1,Trace1,Trace1/Total Storage_NO EVAP.csv")
Tot_Mnthly_Short <-read.csv("Trace1,Trace1,Trace1/Total Shortages.csv")
##### Total Storage #####
i=1
for(TTTNum in 1:TraceNumber){
for(TTNum in 1:TraceNumber1){
for(TNum in 1:TraceNumber2){
TraceDirectory <- paste0(",Trace",TNum)
TraceDirectory <-paste0 (TraceDirectory,"/Total Storage_NO EVAP.csv")
TraceNum1<- paste0(",Trace",TTNum)
TraceDirectory <- paste0(TraceNum1,TraceDirectory)
TraceNum2 <- paste0("Trace",TTTNum)
TraceDirectory <- paste0(TraceNum2,TraceDirectory)
Location <- TraceDirectory
Temp_Storage <- read.csv(Location)
Tot_Mnthly_Stor[,i] <- Temp_Storage[,5]
colnames(Tot_Mnthly_Stor)[i] <-  TraceDirectory
i=i+1
}
}
}
Tot_Mnthly_Stor <- data.frame(Tot_Mnthly_Stor)
#Transpose Data
Tot_Mnthly_Stor_Transposed <- t(Tot_Mnthly_Stor)
Tot_Mnthly_Stor_Transposed <- data.frame(Tot_Mnthly_Stor_Transposed)
#View(Tot_Mnthly_Inflow_Transposed)
#Stack Columns
Tot_Mnthly_Stor_Stacked <- stack(Tot_Mnthly_Stor_Transposed[1:108,1:359])
Tot_Mnthly_Stor <- Tot_Mnthly_Stor_Stacked$values
Tot_Mnthly_Stor <- data.frame(Tot_Mnthly_Stor)
##### Total Shortages #####
i=1
for(TTTNum in 1:TraceNumber){
for(TTNum in 1:TraceNumber1){
for(TNum in 1:TraceNumber2){
TraceDirectory <- paste0(",Trace",TNum)
TraceDirectory <-paste0 (TraceDirectory,"/Total Shortages.csv")
TraceNum1<- paste0(",Trace",TTNum)
TraceDirectory <- paste0(TraceNum1,TraceDirectory)
TraceNum2 <- paste0("Trace",TTTNum)
TraceDirectory <- paste0(TraceNum2,TraceDirectory)
Location <- TraceDirectory
Temp_Storage <- read.csv(Location)
Tot_Mnthly_Short[,i] <- Temp_Storage[,5]
colnames(Tot_Mnthly_Short)[i] <-  TraceDirectory
i=i+1
}
}
}
Tot_Mnthly_Short <- data.frame(Tot_Mnthly_Short)
#Transpose Data
Tot_Mnthly_Short_Transposed <- t(Tot_Mnthly_Short)
Tot_Mnthly_Short_Transposed <- data.frame(Tot_Mnthly_Short_Transposed)
#View(Tot_Mnthly_Inflow_Transposed)
#Stack Columns
Tot_Mnthly_Short_Stacked <- stack(Tot_Mnthly_Short_Transposed[1:108,1:359])
Tot_Mnthly_Short <- Tot_Mnthly_Short_Stacked$values
########################   Compile Output data   ###############################
Outputs <- Tot_Mnthly_Stor
Outputs$Shortage <- Tot_Mnthly_Short
# Add Trace Notation
#Outputs$Trace_Notation <-Trace_Notation
#Number
Outputs$Number<-c(1:38772)
Outputs<-data.frame(Outputs)
#########################  Merge  ---- Data Dataframe########################
Data <- merge(Inputs,Outputs,by="Number")
Data_Monthly <- DataDF
Data_Monthly <- Data
#From Monthly Streamflows to Annual Streamflows
Annual_Inflows <-Data %>%
group_by(WaterYear,Trace_Notation) %>%
summarise_all(funs(sum(Inflow)))
Avg_Annual_Inflows <- Annual_Inflows %>%
group_by(Trace_Notation) %>%
summarise_all(funs(mean(Inflow)))
Avg_Annual_Inflow<-data.frame(Avg_Annual_Inflows$Inflow)
colnames(Avg_Annual_Inflow)<-"Annual Avg Inflow"
Avg_Annual_Inflow$Trace_Notation <-Trace_Notation
colnames(Avg_Annual_Inflow)[2]<-"Trace_Notation"
#Repeat Calculation from monthly shortage to total annual shortage by water year
Annual_Shortage <-Data %>%
group_by(WaterYear,Trace_Notation) %>%
summarise_all(funs(sum(Shortage)))
Avg_Annual_Shortage <- Annual_Shortage %>%
group_by(Trace_Notation) %>%
summarise_all(funs(mean(Shortage)))
Avg_Annual_Shortage<-data.frame(Avg_Annual_Shortage$Shortage)
colnames(Avg_Annual_Shortage)<-"Annual Avg Shortage"
Avg_Annual_Shortage$Trace_Notation <- Trace_Notation
colnames(Avg_Annual_Shortage)[2]<-"Trace_Notation"
Data <- full_join(Data,Avg_Annual_Inflow,by="Trace_Notation")
Data <- full_join(Data,Avg_Annual_Shortage,by ="Trace_Notation")
# Define reservoir levels as arrays: Moderate -> Severe -> Extreme
cStoreNames <- c("Moderate", "Severe", "Extreme")
cStorLevels <- c(380000,340000,280000)
cColors <- c("Yellow", "Orange", "Red")
ModerateLevel<- 380000
SevereLevel <- 340000
ExtremeLevel<-280000
#Calculate the number of storage levels
nLevels <- length(cStorLevels)
#Pull out the monthly storage values
#Storage_Metrics <- data.frame(Data$Tot_Mnthly_Stor)
Storage_Metrics <- data.frame(Data[,c("Month","Tot_Mnthly_Stor")])
#Create more duplicate columns
Storage_Metrics <- cbind(Storage_Metrics, replicate(nLevels-1,Storage_Metrics$Tot_Mnthly_Stor))
#Rename the columns
colnames(Storage_Metrics)[2:(nLevels+1)] <- cStoreNames
#Record the last data column
cLastDataCol <- ncol(Data)
#Loop through columns. In each column convert the storage values to a binary: 1 if greater or equal to target. 0 if below
for (i in 1:nLevels) {
#Is the storage criteria met?
Storage_Metrics[,1+i] <- ifelse(Storage_Metrics[,1+i] > cStorLevels[i],1,0)
#Save the result back to the Data datafrom
Data[,cLastDataCol + i] <- Storage_Metrics[,1+i]
#Rename the column
colnames(Data)[cLastDataCol +i] <- cStoreNames[i]
}
cRelColNames <- paste0("Rel", cStoreNames)
#Calculate the average (fraction) for each combination of traces for each column. This represents
#the reliability
dfStorageReliability <-Data[,c("Trace_Notation","Month",cStoreNames)] %>%
filter(Month == 6) %>%  #Filter on the June month because that is when we care about storage at criteria
group_by(Trace_Notation) %>%
summarise_all(funs(mean))
#Multiply by 100 to get a percent
dfStorageReliability[,cStoreNames] <- dfStorageReliability[,cStoreNames]*100
colnames(dfStorageReliability)[3:5] <- c("Mod Reliability", "Sev Reliability","Ext Reliability")
##### Join the Reservoir storage reliability back with the big data set
AllData<-right_join(Data,dfStorageReliability,by='Trace_Notation')
##################################################################################################
###PLOTS###
##################################################################################################
library(plotly)
#Create Label/Settings Dataframe for multiple plots  ------>>>> In progress ====
Titles <- c("June 1st Storage Levels Reliability
Moderate Storage Level (380,000 Acre-Feet)",
"June 1st Storage Levels Reliability
Severe Storage Level (340,000 Acre-Feet)",
"June 1st Storage Levels Reliability
Extreme Storage Level (280,000 Acre-Feet)",
"June 1st Storage Levels Reliability")
Titles <-data.frame(Titles)
Axises <-c("Demand (Acre-Feet/Year)","Inflows (Acre-Feet/Year)")
Axises<- data.frame(Axises)
Data_NoSed <- filter(AllData,Sedimentation==0)
#Select Data frame to do Calculation on.
PlotData<- Data_NoSed
#########Individual PLOTS############
x<-PlotData$Demand
y<-PlotData$`Annual Avg Inflow`
# Moderate Demand Level
z=PlotData$`Mod Reliability`
p <- plot_ly(
x = x,
y = y,
z = z , type = "contour",colors = c("yellow","white"))%>%
colorbar(title = "Percent of\n Simulated Years")%>%
layout(title = "June 1st Storage Levels Reliability
Moderate Storage Level (380,000 Acre-Feet)",
xaxis = list(title ="Demand (Acre-Feet/Year)"),
yaxis = list(title = "Inflows (Acre-Feet/Year)"))
p
#Severe Demand Level
z=PlotData$`Sev Reliability`
p <- plot_ly(
x = x,
y = y,
z = z, type = "contour",colors = c("orange","white"))%>%
colorbar(title = "Fraction of\n Simulated Years")%>%
layout(title = "June 1st Storage Levels Reliability
Severe Storage Level (340,000 Acre-Feet)",
xaxis = list(title ="Demand (Acre-Feet/Year)"),
yaxis = list(title = "Inflows (Acre-Feet/Year)"))
p
#Extreme Demand Level
z=PlotData$`Ext Reliability`
p <- plot_ly(
x = x,
y = y,
z = z, type = "contour",colors = c("red","white"))%>%
colorbar(title = "Fraction of\n Simulated Years")%>%
layout(title = "June 1st Storage Levels Reliability
Extreme Storage Level (280,000 Acre-Feet)",
xaxis = list(title ="Demand (Acre-Feet/Year)"),
yaxis = list(title = "Inflows (Acre-Feet/Year)"))
p
# Moderate Demand Level
z=PlotData$`Mod Reliability`
p <- plot_ly(
x = x,
y = y,
z = z , type = "contour",contours = list(showlabels = TRUE),colors = c("yellow","white"))%>%
colorbar(title = "Percent of\n Simulated Years")%>%
layout(title = "June 1st Storage Levels Reliability
Moderate Storage Level (380,000 Acre-Feet)",
xaxis = list(title ="Demand (Acre-Feet/Year)"),
yaxis = list(title = "Inflows (Acre-Feet/Year)"))
p
#Severe Demand Level
z=PlotData$`Sev Reliability`
p <- plot_ly(
x = x,
y = y,
z = z, type = "contour",contours = list(showlabels = TRUE),colors = c("orange","white"))%>%
colorbar(title = "Fraction of\n Simulated Years")%>%
layout(title = "June 1st Storage Levels Reliability
Severe Storage Level (340,000 Acre-Feet)",
xaxis = list(title ="Demand (Acre-Feet/Year)"),
yaxis = list(title = "Inflows (Acre-Feet/Year)"))
p
#Extreme Demand Level
z=PlotData$`Ext Reliability`
p <- plot_ly(
x = x,
y = y,
z = z, type = "contour",contours = list(showlabels = TRUE),colors = c("red","white"))%>%
colorbar(title = "Fraction of\n Simulated Years")%>%
layout(title = "June 1st Storage Levels Reliability
Extreme Storage Level (280,000 Acre-Feet)",
xaxis = list(title ="Demand (Acre-Feet/Year)"),
yaxis = list(title = "Inflows (Acre-Feet/Year)"))
p
Data_10Perc <- filter(AllData,Sedimentation==10)
Data_NoSed <- filter(AllData,Sedimentation==0)
View(AllData)
Data_NoSed <- filter(AllData,Sedimentation==0)
Data_NoSed <- filter(AllData,Sedimentation==0)
Data_NoSed <- filter(AllData,Sedimentation==0)
dlaksdjf<-filter(AllData,Sedimentation==0)
dlaksdjf<-filter(AllData,Sedimentation==0)
AllData$Sedimentation
dlaksdjf<-filter(AllData,AllData$Sedimentation==0)
