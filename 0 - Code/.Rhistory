layout(title='20 Year Annual Averages')
ph
ph <- plot_ly(acft_import,y= acft_import$`Lengths of Years 30`,x=acft_import$years,type = 'histogram2dcontour',name = '30 Year Annual Average')%>%
layout(title='30 Year Annual Averages')
ph
ph <- plot_ly(acft_import,y= acft_import$`Lengths of Years 40`,x=acft_import$years,type = 'histogram2dcontour',name = '40 Year Annual Average')%>%
layout(title='40 Year Annual Averages')
ph
ph <- plot_ly(acft_import,y= acft_import$`Lengths of Years 50`,x=acft_import$years,type = 'histogram2dcontour',name = '50 Year Annual Average')%>%
layout(title='50 Year Annual Averages')
ph
ph <- plot_ly(acft_import,y= acft_import$`Lengths of Years 60`,x=acft_import$years,type = 'histogram2dcontour',name = '60 Year Annual Average')%>%
layout(title='60 Year Annual Averages')
ph
ps3 <- plot_ly(acft_import,z = 30,y= acft_import$`Lengths of Years 30`,x=acft_import$years,type = 'scatter3d',name = '30 Year Annual Average')%>%
add_trace(z=10,y=acft_import$`Lengths of Years 10`,x=acft_import$years, name = '10 YearAnnual Average' )%>%
layout(title='Annual Averages',yaxis =y, xaxis =x)
ps3
ps <- plot_ly(acft_import,y= acft_import$`Lengths of Years 10`,x=acft_import$years,type = 'pointcloud',name = '10 Year Annual Average')%>%
add_trace(y=acft_import$`Lengths of Years 20`,x=acft_import$years,name = '20 Year Annual Average')%>%
add_trace(y=acft_import$`Lengths of Years 30`,x=acft_import$years,name = '30 Year Annual Average')%>%
add_trace(y=acft_import$`Lengths of Years 40`,x=acft_import$years,name = '40 Year Annual Average')%>%
layout(title='Annual Averages')
ps
#Set output file by resetting the work directory
setwd("~/GitHub/WeberBasinVulnerability/WeberBasinVulnerability/2 - RiverWare Modeling/Hydrology")
setwd("~/GitHub/WeberBasinVulnerability/WeberBasinVulnerability/4 - Plots/All_Graphs")
#  Output/print PLOTS TO PNG
#Set output file by resetting the work directory
setwd("~/GitHub/WeberBasinVulnerability/WeberBasinVulnerability/4 - Plots/All_Graphs")
plots.png.detials <- file.info(plots.png.paths)
plots.png.detials <- plots.png.detials[order(plots.png.detials$mtime),]
plots.png.details <- file.info(plots.png.paths)
#AllPLOTS TO PNG
plots.dir.path <- list.files(tempdir(), pattern="rs-graphics", full.names = TRUE);
plots.dir.path <- list.files(tempdir(), pattern="rs-graphics", full.names = TRUE);
plots.png.paths <- list.files(plots.dir.path, pattern=".png", full.names = TRUE)
plots.png.details <- file.info(plots.png.paths)
plots.png.details <- plots.png.details[order(plots.png.details$mtime),]
sorted.png.names <- gsub(plots.dir.path, "path_to_your_dir", row.names(plots.png.details), fixed=TRUE)
numbered.png.names <- paste0("path_to_your_dir/", 1:length(sorted.png.names), ".png")
# Rename all the .png files as: 1.png, 2.png, 3.png, and so on.
file.rename(from=sorted.png.names, to=numbered.png.names)
plots.dir.path <- list.files(tempdir(), pattern="rs-graphics", full.names = TRUE);
plots.png.paths <- list.files(plots.dir.path, pattern=".png", full.names = TRUE)
plots.png.details <- file.info(plots.png.paths)
plots.png.details <- plots.png.details[order(plots.png.details$mtime),]
sorted.png.names <- gsub(plots.dir.path, "path_to_your_dir", row.names(plots.png.details), fixed=TRUE)
numbered.png.names <- paste0("All_Graphs/", 1:length(sorted.png.names), ".png")
# Rename all the .png files as: 1.png, 2.png, 3.png, and so on.
file.rename(from=sorted.png.names, to=numbered.png.names)
file.copy(from=plots.png.paths, to="path_to_your_dir")
file.copy(from=plots.png.paths, to="~/GitHub/WeberBasinVulnerability/WeberBasinVulnerability/4 - Plots/All_Graph")
plots.dir.path <- list.files(tempdir(), pattern="rs-graphics", full.names = TRUE);
plots.png.paths <- list.files(plots.dir.path, pattern=".png", full.names = TRUE)
file.copy(from=plots.png.paths, to="~/GitHub/WeberBasinVulnerability/WeberBasinVulnerability/4 - Plots/All_Graph")
file.copy(from=plots.png.paths, to="~/GitHub/WeberBasinVulnerability/WeberBasinVulnerability/4 - Plots/All_Graphs")
plots.png.details <- file.info(plots.png.paths)
plots.png.details <- plots.png.details[order(plots.png.details$mtime),]
sorted.png.names <- gsub(plots.dir.path, "path_to_your_dir", row.names(plots.png.details), fixed=TRUE)
numbered.png.names <- paste0("All_Graphs/", 1:length(sorted.png.names), ".png")
# Rename all the .png files as: 1.png, 2.png, 3.png, and so on.
file.rename(from=sorted.png.names, to=numbered.png.names)
plots.png.details <- file.info(plots.png.paths)
plots.png.details <- plots.png.details[order(plots.png.details$mtime),]
sorted.png.names <- gsub(plots.dir.path, "path_to_your_dir", row.names(plots.png.details), fixed=TRUE)
numbered.png.names <- paste0("All_Graphs", 1:length(sorted.png.names), ".png")
# Rename all the .png files as: 1.png, 2.png, 3.png, and so on.
file.rename(from=sorted.png.names, to=numbered.png.names)
numbered.png.names <- paste0("~/GitHub/WeberBasinVulnerability/WeberBasinVulnerability/4 - Plots/All_Graphs", 1:length(sorted.png.names), ".png")
# Rename all the .png files as: 1.png, 2.png, 3.png, and so on.
file.rename(from=sorted.png.names, to=numbered.png.names)
#PRINT PNG FILES BY NUMBER CREATED PNG1, PNG2, PNG3...
plots.png.details <- file.info(plots.png.paths)
plots.png.details <- plots.png.details[order(plots.png.details$mtime),]
sorted.png.names <- gsub(plots.dir.path, "path_to_your_dir", row.names(plots.png.details), fixed=TRUE)
#PRINT PNG FILES BY NUMBER CREATED PNG1, PNG2, PNG3...
plots.png.details <- file.info(plots.png.paths)
plots.png.details <- plots.png.details[order(plots.png.details$mtime),]
sorted.png.names <- gsub(plots.dir.path, "~/GitHub/WeberBasinVulnerability/WeberBasinVulnerability/4 - Plots/All_Graphs", row.names(plots.png.details), fixed=TRUE)
numbered.png.names <- paste0("HydrologyPLOTS", 1:length(sorted.png.names), ".png")
# Rename all the .png files as: 1.png, 2.png, 3.png, and so on.
file.rename(from=sorted.png.names, to=numbered.png.names)
list.files(tempdir(),pattern = NULL,full.names = TRUE)
###  pattern="rs-graphics"  --- For Plots only not found in Viewer and other temp data
###AllPLOTS TO PNG
plots.dir.path <- list.files(tempdir(),pattern = NULL , full.names = TRUE);
plots.png.paths <- list.files(plots.dir.path, pattern=".png", full.names = TRUE)
file.copy(from=plots.png.paths, to="~/GitHub/WeberBasinVulnerability/WeberBasinVulnerability/4 - Plots/All_Graphs")
#PRINT PNG FILES BY NUMBER CREATED PNG1, PNG2, PNG3...
plots.png.details <- file.info(plots.png.paths)
plots.png.details <- plots.png.details[order(plots.png.details$mtime),]
sorted.png.names <- gsub(plots.dir.path, "~/GitHub/WeberBasinVulnerability/WeberBasinVulnerability/4 - Plots/All_Graphs", row.names(plots.png.details), fixed=TRUE)
numbered.png.names <- paste0("HydrologyPLOTS", 1:length(sorted.png.names), ".png")
# Rename all the .png files as: 1.png, 2.png, 3.png, and so on.
file.rename(from=sorted.png.names, to=numbered.png.names)
#Outputting Excel is currently manly done because riverware is finicy
#Use the code below to output to the excelsheet and then copy and paste
#the numbers only. Anything else copied and pasted will mess up the
#RiverWare input formation needed.
#################################################################################################################################
#Outputting 6 Runs into an excel file, ensure correct format!!
#################################################################################################################################
#Set output file by resetting the work directory
setwd("~/GitHub/WeberBasinVulnerability/WeberBasinVulnerability/2 - RiverWare Modeling/Hydrology")
###  pattern="rs-graphics"  --- For Plots only not found in Viewer and other temp data
###AllPLOTS TO PNG
plots.dir.path <- list.files(tempdir(),pattern = NULL , full.names = TRUE);
plots.png.paths <- list.files(plots.dir.path, pattern=".png", full.names = TRUE)
#PRINT PNG FILES BY NUMBER CREATED PNG1, PNG2, PNG3...
plots.png.details <- file.info(plots.png.paths)
plots.png.details <- plots.png.details[order(plots.png.details$mtime),]
sorted.png.names <- gsub(plots.dir.path, "~/GitHub/WeberBasinVulnerability/WeberBasinVulnerability/4 - Plots/All_Graphs", row.names(plots.png.details), fixed=TRUE)
numbered.png.names <- paste0("HydrologyPLOTS", 1:length(sorted.png.names), ".png")
# Rename all the .png files as: 1.png, 2.png, 3.png, and so on.
file.rename(from=sorted.png.names, to=numbered.png.names)
numbered.png.names <- paste0("HydrologyPLOTS", 1:length(sorted.png.names), ".png")
sorted.png.names <- gsub(plots.dir.path, "~/GitHub/WeberBasinVulnerability/WeberBasinVulnerability/4 - Plots/All_Graphs", row.names(plots.png.details), fixed=TRUE)
#  Output/print PLOTS TO PNG
#Set output file by resetting the work directory
setwd("~/GitHub/WeberBasinVulnerability/WeberBasinVulnerability/4 - Plots/All_Graphs")
###  pattern="rs-graphics"  --- For Plots only not found in Viewer and other temp data
###AllPLOTS TO PNG
plots.dir.path <- list.files(tempdir(),pattern = NULL , full.names = TRUE);
plots.png.paths <- list.files(plots.dir.path, pattern=".png", full.names = TRUE)
file.copy(from=plots.png.paths, to="~/GitHub/WeberBasinVulnerability/WeberBasinVulnerability/4 - Plots/All_Graphs")
#PRINT PNG FILES BY NUMBER CREATED PNG1, PNG2, PNG3...
plots.png.details <- file.info(plots.png.paths)
plots.png.details <- plots.png.details[order(plots.png.details$mtime),]
sorted.png.names <- gsub(plots.dir.path, "~/GitHub/WeberBasinVulnerability/WeberBasinVulnerability/4 - Plots/All_Graphs", row.names(plots.png.details), fixed=TRUE)
###  pattern="rs-graphics"  --- For Plots only not found in Viewer and other temp data
###AllPLOTS TO PNG
plots.dir.path <- list.files(tempdir(),pattern = "rs-graphics" , full.names = TRUE);
plots.png.paths <- list.files(plots.dir.path, pattern=".png", full.names = TRUE)
file.copy(from=plots.png.paths, to="~/GitHub/WeberBasinVulnerability/WeberBasinVulnerability/4 - Plots/All_Graphs")
#PRINT PNG FILES BY NUMBER CREATED PNG1, PNG2, PNG3...
plots.png.details <- file.info(plots.png.paths)
plots.png.details <- plots.png.details[order(plots.png.details$mtime),]
sorted.png.names <- gsub(plots.dir.path, "~/GitHub/WeberBasinVulnerability/WeberBasinVulnerability/4 - Plots/All_Graphs", row.names(plots.png.details), fixed=TRUE)
numbered.png.names <- paste0("HydrologyPLOTS", 1:length(sorted.png.names), ".png")
# Rename all the .png files as: 1.png, 2.png, 3.png, and so on.
file.rename(from=sorted.png.names, to=numbered.png.names)
install.packages(orca)
install.packages("orca")
library("orca", lib.loc="~/R/win-library/3.5")
##Output/print Plotly plots
#install.packages("orca")
library("orca", lib.loc="~/R/win-library/3.5")
if (!require("processx")) install.packages("processx")
pnum=1
orca(p, paste0(if (!require("processx")) install.packages("processx"),".svg"))
pnum=pnum+1
#Plot all plots on one Graph
library(plotly)
p<- plot_ly(Annual_Flows, x = Annual_Flows$Date, name = 'Year', type = 'scatter', mode = 'lines',
line = list(color = colors(distinct = F), width = 2)) %>%
layout(#title = "Title",
xaxis = list(title ="Time"),
yaxis = list(title = "Streamflow (Acre-Ft/Yr)"))
for(trace in colnames(Annual_Flows)){
p <- p %>% plotly::add_trace(y = as.formula(paste0("~`",trace,"`")),name = trace)
}
p
pnum=1
orca(p, paste0(if (!require("processx")) install.packages("processx"),".svg"))
# |  Part 0:
# |  PART 1:
# |  PART 2:
# |  PART 3:
# *-----------------------------------------------------------------
# | UPDATES:
# |
# |
# *------------------------------------------------------------------
### Clear any existing data or functions.
rm(list=ls())
library(readxl)
#Set Working Directory
#setwd("~/GitHub/WeberBasinVulnerability/WeberBasinVulnerability/1 - Scenario Processing/Annual Service Area Demand Scenarios/Input_Data")
#Store the current code directory so we can later return to it (0 - Code)
fCodeDir <- getwd()
#Move into the local input directory
#setwd("../1 - Scenario Processing/Annual Service Area Demand Scenarios/Input_Data")
setwd("~/GitHub/WeberBasinVulnerability/WeberBasinVulnerability/1 - Scenario Processing/Annual Service Area Demand Scenarios/Input_Data")
DWRSA_Table <- read_excel("DWRSA_Table.xlsx")
#Set New Working Directory
#Return to code directory
setwd(fCodeDir)
#Move into the local output directory
#setwd("../1 - Scenario Processing/Annual Service Area Demand Scenarios/Output")
setwd("~/GitHub/WeberBasinVulnerability/WeberBasinVulnerability/1 - Scenario Processing/Annual Service Area Demand Scenarios/Output")
##Possible package installation necessary
#install.packages("RColorBrewer")
#install.packages("plotly")
#install.packages("readxl")
#install.packages("openxlsx")
library(readxl)
library(plotly)
library(RColorBrewer)
library(openxlsx)
library("tibble", lib.loc="~/R/win-library/3.5")
##Input Data###############
setwd("~/GitHub/WeberBasinVulnerability/WeberBasinVulnerability/1 - Scenario Processing/Annual Service Area Demand Scenarios/Output")
## Municipal and Industrial water Calculated from 2a_Demand Calc_byServiceArea--Municipal
MI <- read_excel("MI.xlsx")
#View(MI)
MIAll_Factors <- read_excel("MI_AllFactors.xlsx")
##Calculation##############
AGtoMI_CF <- c(0.65,0.72,0.78) #Agriculture to Municipal Water Use Conversion Factor
#MI2070_SamePerCap - MI2015_SamePerCap = Changein_MI
Changein_MI_2070to2015 = MI$MI_SA_2070 - MI$MI_SA_2015
Changein_MI_2150to2015 = MI$MI_SA_2150 - MI$MI_SA_2015
#Conversion factor of  0.65
Changein_AG_2070to2015 = data.frame(Changein_MI_2070to2015/AGtoMI_CF[1])  #**put in while loop for differing conversion factors ?
Changein_AG_2150to2015 = data.frame(Changein_MI_2150to2015/AGtoMI_CF[1])
#Conversion factor of  0.72
Changein_AG_2070to2015[,2] = Changein_MI_2070to2015/AGtoMI_CF[2]  #output notation for 0.72 is a ".1" at the end of the column name i.e.MI_SA_2070.1
Changein_AG_2150to2015[,2] = Changein_MI_2150to2015/AGtoMI_CF[2]
#Conversion factor of 0.78
Changein_AG_2070to2015[,3] = Changein_MI_2070to2015/AGtoMI_CF[3]  #output notation for 0.78 is a ".2" at the end of the column name i.e.MI_SA_2070.2
Changein_AG_2150to2015[,3] = Changein_MI_2150to2015/AGtoMI_CF[3]
#BaseDemand <- data.frame(DWRSA_Table$MAX) #MAX AG WATER USE
BaseDemand <- data.frame(DWRSA_Table$AVG)    #OR AVG AG WATER USE
BaseDemand[20,] <- 0
#The amount of Agricultural Water Used found by looking at the recorded Total Base 2015 water demands and subtracting the calculated
#2015 Municipal and Industrial water usage
AgBase2015 <- BaseDemand - MI$MI_SA_2015
i=1
AG_2015 <- AgBase2015
AG_2070 <- data.frame(rep(1:20))
AG_2150 <- data.frame(rep(1:20))
while (i<=3) {
AG_2070[,i] <- data.frame(AgBase2015 - Changein_AG_2070to2015[,i])
AG_2150[,i] <- data.frame(AgBase2015 - Changein_AG_2150to2015[,i])
i=i+1
}
AG_2070[,1:3] <- replace(AG_2070[,1:3], AG_2070[,1:3] < 0, 0)
AG_2150[,1:3] <- replace(AG_2150[,1:3], AG_2150[,1:3] < 0, 0)
colnames(AG_2070)<-c("_65% Conversion Factor","_72% Conversion Factor","_78% Conversion Factor")
colnames(AG_2150)<-c("_65% Conversion Factor","_72% Conversion Factor","_78% Conversion Factor")
AG_2070<- AG_2070*1.05
AG_2150<- AG_2150*1.08
MIandAg_Demand <- data.frame(AG_2015[,1] + MI$MI_SA_2015)
i=1
j=1
while (i<=9) {
MIandAg_Demand[,j] <- AG_2015[,1] + MI[,i]
i=i+1
j=j+1
}
colnames(MIandAg_Demand)[1]<-"MI_SA_2015"
#2070
k=1
while (k<=3) {
while (i<=18) {
MIandAg_Demand[,j] <- AG_2070[,k] + MI[,i]
colnames(MIandAg_Demand)[j]<-paste0(colnames(MI)[i],colnames(AG_2070)[k])
i=i+1
j=j+1
}
k=k+1
i=10
}
#2150
i=19
k=1
while (k<=3) {
while (i<=27) {
MIandAg_Demand[,j] <- AG_2150[,k] + MI[,i]
colnames(MIandAg_Demand)[j]<-paste0(colnames(MI)[i],colnames(AG_2150)[k])
i=i+1
j=j+1
}
k=k+1
i=19
}
#write.xlsx(MIandAg_Demand,"MI_with_AG.xlsx")
write.csv(MIandAg_Demand,"MI_with_AG.csv")
#Tab---- Create Workbook-----------
#Input How Many Scenarios                  #### Nine 2015 Scenarios, Twenty-Seven 2070 Scenarios, and Twenty-Seven 2150 Scenarios
#### 63 Total MI plus Ag Scenarios ########
RunNumber <- 63
#Create Workbook
wb <- createWorkbook("Data")
#Create Worksheet for each Run
for(Num in 1:(RunNumber)) {
RunsString <- paste0("Trace",Num)
addWorksheet(wb, RunsString)
}
#Input Data
SAs<- c('SA1','SA2','SA3','SA4','SA5','SA6','SA7','SA8','SA9','SA10','SA11','SA12','SA13','SA14','SA15','SA16','SA17','SA18','SA19','SA20')
i=1
while (i<=RunNumber) {
writeData(wb,sheet = i, SAs,startCol = 1,startRow = 3)
i=i+1
}
i=1
while (i<=RunNumber) {
writeData(wb,sheet = i, MIandAg_Demand[,i],startCol = 2,startRow = 3)
i=i+1
}
saveWorkbook(wb,"MI+AG.xlsx",overwrite = TRUE)
#################################################################################################################################################################################################################################################################################################################################################################################################################################################
### Sum Data for plots ###
#################################################################################################################################################################################################################################################################################################################################################################################################################################################
#MIandAg_Demand Sums
#Create Data frame
MIandAG_Sums <- t(colnames(MIandAg_Demand))
i=1
while (i<=63) {
MIandAG_Sums[,i] <- sum(MIandAg_Demand[,i])
i=i+1
}
MIandAG_Sums<- data.frame(MIandAG_Sums)
Nms<-t(colnames(MIandAg_Demand))
names(MIandAG_Sums) <- c(Nms)
#Transpose Data
DemandData <- data.frame(t(MIandAG_Sums))
#Name Column
names(DemandData)[1] <- paste("MI + AG")
#Year Column
Year <- c(rep(2015,9),rep(2070,27),rep(2150,27))
DemandData$Year<-Year
#AgConversion Column
AGCF<-c(rep(0,9),rep(c(rep(65,9), rep(72,9), rep(78,9)),2))
DemandData$AG_Conversion.Factor <-AGCF
#Scenario Name Column
DemandData$Scenario_Name<-rownames(DemandData)
rownames(MIAll_Factors)[1]<-"Potable PerCapita % Change"
rownames(MIAll_Factors)[2]<-"Secondary PerCapita % Change"
rownames(MIAll_Factors)[3]<-"Avg Reduced PerCapita % Change"
rownames(MIAll_Factors)[4] <-"PerCapita Change by Scenario"
rownames(MIAll_Factors)[5]<-"ET Change by %"
Transposed_MIAllFactors <-t(MIAll_Factors)
rownames(MIAll_Factors)[6]<-"ET Change by Scenario"
rownames(MIAll_Factors)[1]<-"Potable PerCapita % Change"
rownames(MIAll_Factors)[2]<-"Secondary PerCapita % Change"
rownames(MIAll_Factors)[3]<-"Avg Reduced PerCapita % Change"
rownames(MIAll_Factors)[4] <-"PerCapita Change by Scenario"
rownames(MIAll_Factors)[5]<-"ET Change by %"
rownames(MIAll_Factors)[6]<-"ET Change by Scenario"
Transposed_MIAllFactors <-t(MIAll_Factors)
MI_Factors_2015<-Transposed_MIAllFactors[1:9,]
MI_Factors_2070<-Transposed_MIAllFactors
rownames(MI_Factors_2070) <- rownames(DemandData)[10:36]
MI_Factors_2150<-Transposed_MIAllFactors
rownames(MI_Factors_2070) <- rownames(DemandData)[37:63]
MI_Factors<- rbind(MI_Factors_2015,MI_Factors_2070,MI_Factors_2150)
rownames(MI_Factors)<-rownames(DemandData)
colnames(MI_Factors)<-colnames(Transposed_MIAllFactors)
AllDemandData <- cbind(DemandData,MI_Factors)
#View(AllDemandData)
Data<-AllDemandData
plot_ly(data =Data , x=Data$Year, y=Data$`MI + AG`,type='scatter',mode='markers',
size = Data$AG_Conversion.Factor,color = Data$`ET Change by %`,colors = blues9) %>%
#add_trace(x='Year 2070', y=MIAG$MIAG2070_Sums,name = MIAG$Names_2070)%>%
#add_trace(x= 'Year 2150',y=MIAG$MIAG2150_Sums,name = MIAG$Names_2150)%>%
layout(yaxis = list(title ='M&I + AG Demand (acre-feet)',tickformat = '.1f',showticklabels=FALSE),showlegend = FALSE)
plot_ly(
x = Data$AG_Conversion.Factor,
y = Data$`Avg Reduced PerCapita % Change`,
z = Data$`MI + AG`, type = "contour",contours = list(showlabels = TRUE),showscale = T)%>%
#plot_ly(data = MIAG, x=MIAG$Ag_Conversion, y=MIAG$MIAG2015_Sums,type='scatter',mode='markers',name = MIAG$Names_2015)%>%
# add_trace(x=MIAG$Ag_Conversion, y=MIAG$MIAG2070_Sums,name = MIAG$Names_2070)%>%
#add_trace(x=MIAG$Ag_Conversion,y=MIAG$MIAG2150_Sums,name = MIAG$Names_2150)%>%
#layout(yaxis = list(title ='M&I + AG Demand (acre-feet)',tickformat = '.1f',showticklabels=FALSE),showlegend = FALSE)
#4 dimensions #########################################################################
# Fix/double check the quantities of and remove legend
#double check everything
plot_ly(data = MIAG2015_Sums,x = 'Year 2015',y= MIAG2015_Sums$MIAG2015_Sums ,type = 'scatter',
mode = 'markers',symbol = MIAG2015_Sums$ET,symbols = c('circle','x','o'), color = MIAG2015_Sums$AGConversionFactor,
colors = c("dark red","blue","purple"),name = '65 %',size = MIAG2015_Sums$NUMPC)%>%
add_trace(x = 'Year 2070',y= MIAG2070_Sums$MIAG2070_Sums ,type = 'scatter', mode = 'markers',
symbol = MIAG2070_Sums$ET,symbols = c('circle','x','o'), color = MIAG2070_Sums$AGConversionFactor,
colors = c("dark red","blue","purple"),name = '72 %',size = MIAG2070_Sums$NUMPC)%>%
add_trace(x = 'Year 2150',y= MIAG2150_Sums$MIAG2150_Sums ,type = 'scatter', mode = 'markers',
symbol = MIAG2150_Sums$ET,symbols = c('circle','x','o'), color = MIAG2150_Sums$AGConversionFactor,
colors = c("dark red","blue","purple"),name = '78 %',size = MIAG2150_Sums$NUMPC)%>%
layout( title = 'Municipal and Agricultural Demands',yaxis=list(title = 'M&I + AG Demand (acre-feet)',
barmode = 'group'),showlegend =FALSE)
plot_ly(
x = Data$AG_Conversion.Factor,
y = Data$`Avg Reduced PerCapita % Change`,
z = Data$`MI + AG`, type = "contour",contours = list(showlabels = TRUE),showscale = T)%>%
####END of FEB 11th code
#plot_ly(data = MIAG, x=MIAG$Ag_Conversion, y=MIAG$MIAG2015_Sums,type='scatter',mode='markers',name = MIAG$Names_2015)%>%
# add_trace(x=MIAG$Ag_Conversion, y=MIAG$MIAG2070_Sums,name = MIAG$Names_2070)%>%
#add_trace(x=MIAG$Ag_Conversion,y=MIAG$MIAG2150_Sums,name = MIAG$Names_2150)%>%
#layout(yaxis = list(title ='M&I + AG Demand (acre-feet)',tickformat = '.1f',showticklabels=FALSE),showlegend = FALSE)
#4 dimensions #########################################################################
# Fix/double check the quantities of and remove legend
#double check everything
plot_ly(data = MIAG2015_Sums,x = 'Year 2015',y= MIAG2015_Sums$MIAG2015_Sums ,type = 'scatter',
mode = 'markers',symbol = MIAG2015_Sums$ET,symbols = c('circle','x','o'), color = MIAG2015_Sums$AGConversionFactor,
colors = c("dark red","blue","purple"),name = '65 %',size = MIAG2015_Sums$NUMPC)%>%
add_trace(x = 'Year 2070',y= MIAG2070_Sums$MIAG2070_Sums ,type = 'scatter', mode = 'markers',
symbol = MIAG2070_Sums$ET,symbols = c('circle','x','o'), color = MIAG2070_Sums$AGConversionFactor,
colors = c("dark red","blue","purple"),name = '72 %',size = MIAG2070_Sums$NUMPC)%>%
add_trace(x = 'Year 2150',y= MIAG2150_Sums$MIAG2150_Sums ,type = 'scatter', mode = 'markers',
symbol = MIAG2150_Sums$ET,symbols = c('circle','x','o'), color = MIAG2150_Sums$AGConversionFactor,
colors = c("dark red","blue","purple"),name = '78 %',size = MIAG2150_Sums$NUMPC)%>%
layout( title = 'Municipal and Agricultural Demands',yaxis=list(title = 'M&I + AG Demand (acre-feet)',
barmode = 'group'),showlegend =FALSE)
plot_ly(
x = Data$AG_Conversion.Factor,
y = Data$`Avg Reduced PerCapita % Change`,
z = Data$`MI + AG`, type = "contour",contours = list(showlabels = TRUE),showscale = T)
plot_ly(
x = Data$AG_Conversion.Factor,
y = Data$`Avg Reduced PerCapita % Change`,
z = Data$`MI + AG`, type = "contour",contours = list(showlabels = TRUE),showscale = T)%>%
layout(yaxis = list(title ='M&I + AG Demand (acre-feet)',tickformat = '.1f',showticklabels=FALSE),showlegend = FALSE)
plot_ly(
x = Data$AG_Conversion.Factor,
y = Data$`Avg Reduced PerCapita % Change`,
z = Data$`MI + AG`, type = "contour",contours = list(showlabels = TRUE),showscale = T)%>%
layout(yaxis = list(title ='M&I + AG Demand (acre-feet)',tickformat = '.1f',showticklabels=T),showlegend = FALSE)
plot_ly(
x = Data$AG_Conversion.Factor,
y = Data$`Avg Reduced PerCapita % Change`,
z = Data$`MI + AG`, type = "contour",contours = list(showlabels = TRUE),showscale = T)%>%
layout(yaxis = list(title ='AG Conversion Factor',tickformat = '.1f',showticklabels=T),
showlegend = FALSE,name="M&I + AG Demand (acre-feet)")
plot_ly(
x = Data$AG_Conversion.Factor,
y = Data$`Avg Reduced PerCapita % Change`,
z = Data$`MI + AG`, type = "contour",contours = list(showlabels = TRUE),showscale = T)%>%
layout(yaxis = list(title ='AG Conversion Factor',tickformat = '.1f',showticklabels=T),
showlegend = FALSE,legendname="M&I + AG Demand (acre-feet)")
plot_ly(
x = Data$AG_Conversion.Factor,
y = Data$`Avg Reduced PerCapita % Change`,
z = Data$`MI + AG`, type = "contour",contours = list(showlabels = TRUE),showscale = T)%>%
layout(yaxis = list(title='Avg Reduced Per Capita % Change',tickformat = '.1f',showticklabels=T),
showlegend = FALSE,xaxis =list(title='AG Conversion Factor %'))
plot_ly(
x = Data$AG_Conversion.Factor,
y = Data$`Avg Reduced PerCapita % Change`,
z = Data$`MI + AG`, type = "contour",contours = list(showlabels = TRUE),showscale = T,colors = ("blues9"))%>%         ##axis labels are switched when they print for somereason
layout(yaxis = list(title='Avg Reduced Per Capita % Change',tickformat = '.1f',showticklabels=T),
showlegend = FALSE,xaxis =list(title='AG Conversion Factor %'))
plot_ly(
x = Data$AG_Conversion.Factor,
y = Data$`Avg Reduced PerCapita % Change`,
z = Data$`MI + AG`, type = "contour",contours = list(showlabels = TRUE),showscale = T,colors = blues9)%>%         ##axis labels are switched when they print for somereason
layout(yaxis = list(title='Avg Reduced Per Capita % Change',tickformat = '.1f',showticklabels=T),
showlegend = FALSE,xaxis =list(title='AG Conversion Factor %'))
plot_ly(
x = Data$AG_Conversion.Factor,
y = Data$`Avg Reduced PerCapita % Change`,
z = Data$`MI + AG`, type = "contour",contours = list(showlabels = TRUE),showscale = T,color = 'blue')%>%         ##axis labels are switched when they print for somereason
layout(yaxis = list(title='Avg Reduced Per Capita % Change',tickformat = '.1f',showticklabels=T),
showlegend = FALSE,xaxis =list(title='AG Conversion Factor %'))
plot_ly(
x = Data$AG_Conversion.Factor,
y = Data$`Avg Reduced PerCapita % Change`,
z = Data$`MI + AG`, type = "contour",contours = list(showlabels = TRUE),showscale = T,colorscale = c('white','blue','purple'))%>%         ##axis labels are switched when they print for somereason
layout(yaxis = list(title='Avg Reduced Per Capita % Change',tickformat = '.1f',showticklabels=T),
showlegend = FALSE,xaxis =list(title='AG Conversion Factor %'))
plot_ly(
x = Data$AG_Conversion.Factor,
y = Data$`Avg Reduced PerCapita % Change`,
z = Data$`MI + AG`, type = "contour",contours = list(showlabels = TRUE),showscale = T,colorscale = c('white','blue','purple'),title(main='Water Demand--AcreFeet'))%>%         ##axis labels are switched when they print for somereason
layout(yaxis = list(title='Avg Reduced Per Capita % Change',tickformat = '.1f',showticklabels=T),
showlegend = FALSE,xaxis =list(title='AG Conversion Factor %'))
plot_ly(
x = Data$AG_Conversion.Factor,
y = Data$`Avg Reduced PerCapita % Change`,
z = Data$`MI + AG`, type = "contour",contours = list(showlabels = TRUE),showscale = T,colorscale = c('white','blue','purple'),title(main='Water Demand--AcreFeet'))%>%         ##axis labels are switched when they print for somereason
layout(yaxis = list(title='Avg Reduced Per Capita % Change',tickformat = '.1f',showticklabels=T),
showlegend = FALSE,xaxis =list(title='AG Conversion Factor %'))
legendname="M&I + AG Demand (acre-feet)"
plot_ly(
x = Data$AG_Conversion.Factor,
y = Data$`Avg Reduced PerCapita % Change`,
z = Data$`MI + AG`, type = "contour",contours = list(showlabels = TRUE),showscale = T,colorscale = c('white','blue','purple'),title(main='Water Demand--AcreFeet'))%>%         ##axis labels are switched when they print for somereason
layout(yaxis = list(title='Avg Reduced Per Capita % Change',tickformat = '.1f',showticklabels=T),
showlegend = FALSE,xaxis =list(title='AG Conversion Factor %'))
plot_ly(
x = Data$AG_Conversion.Factor,
y = Data$`Avg Reduced PerCapita % Change`,
z = Data$`MI + AG`, type = "contour",contours = list(showlabels = TRUE),showscale = T,colorscale = c('white','blue','purple'))%>%         ##axis labels are switched when they print for somereason
layout(title(main='Total Water Demand-- (Acre Feet/Year)'),yaxis = list(title='Avg Reduced Per Capita % Change',tickformat = '.1f',showticklabels=T),
showlegend = FALSE,xaxis =list(title='AG Conversion Factor %'))
plot_ly(data =Data , x=Data$Year, y=Data$`MI + AG`,type='scatter',mode='markers',
size = Data$AG_Conversion.Factor,color = Data$`ET Change by %`,colors = blues9) %>%
#add_trace(x='Year 2070', y=MIAG$MIAG2070_Sums,name = MIAG$Names_2070)%>%
#add_trace(x= 'Year 2150',y=MIAG$MIAG2150_Sums,name = MIAG$Names_2150)%>%
layout(yaxis = list(title ='M&I + AG Demand (acre-feet)',tickformat = '.1f',showticklabels=FALSE),showlegend = FALSE)
plot_ly(data =Data , x=Data$Year, y=Data$`MI + AG`,type='scatter',mode='markers',
size = Data$`Avg Reduced PerCapita % Change`,color = Data$`ET Change by %`,colors = blues9) %>%
#add_trace(x='Year 2070', y=MIAG$MIAG2070_Sums,name = MIAG$Names_2070)%>%
#add_trace(x= 'Year 2150',y=MIAG$MIAG2150_Sums,name = MIAG$Names_2150)%>%
layout(yaxis = list(title ='M&I + AG Demand (acre-feet)',tickformat = '.1f',showticklabels=FALSE),showlegend = FALSE)
plot_ly(data =Data , x=Data$Year, y=Data$`MI + AG`,type='scatter',mode='markers',
size = Data$AG_Conversion.Factor,color = Data$`Avg Reduced PerCapita % Change`,colors = blues9)
plot_ly(data =Data , x=Data$Year, y=Data$`MI + AG`,type='scatter',mode='markers',
size = Data$`ET Change by %`,color = Data$`Avg Reduced PerCapita % Change`,colors = blues9)
plot_ly(data =Data , x=Data$Year, y=Data$`MI + AG`,type='scatter',mode='markers',
size = Data$`MI + AG`,color = Data$`Avg Reduced PerCapita % Change`,colors = blues9)
plot_ly(data =Data , x=Data$Year, y=Data$`MI + AG`,type='scatter',mode='markers',
size = Data$`PerCapita Change by Scenario`,color = Data$`Avg Reduced PerCapita % Change`,colors = blues9)
plot_ly(data =Data , x=Data$Year, y=Data$`MI + AG`,type='scatter',mode='markers',
size = Data$Year,color = Data$`Avg Reduced PerCapita % Change`,colors = blues9)
plot_ly(data =Data , x=Data$Year, y=Data$`MI + AG`,type='scatter',mode='markers',
size = Data$`ET Change by Scenario`,color = Data$`Avg Reduced PerCapita % Change`,colors = blues9)
plot_ly(data =Data , x=Data$Year, y=Data$`MI + AG`,type='scatter',mode='markers',
size = Data$`ET Change by Scenario`,color = Data$`Avg Reduced PerCapita % Change`,colors = blues9)
plot_ly(data =Data , x=Data$Year, y=Data$`MI + AG`,type='scatter',mode='markers',
size = Data$AG_Conversion.Factor,color = Data$`Avg Reduced PerCapita % Change`,colors = blues9)
plot_ly(data =Data , x=Data$`ET Change by %`, y=Data$`MI + AG`,type='scatter',mode='markers',
size = Data$AG_Conversion.Factor,color = Data$`Avg Reduced PerCapita % Change`,colors = blues9)
