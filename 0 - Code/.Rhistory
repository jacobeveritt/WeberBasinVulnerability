rownames(Tot_Demand) <- Trace_Notation
Tot_Mnthly_Demand<-data.frame(rep(Tot_Demand$Demand,359))
colnames(Tot_Mnthly_Demand) <- "Demand"
# Switch into local directory
setwd("~/GitHub/WeberBasinVulnerability/WeberBasinVulnerability/2 - RiverWare Modeling/With Evaporation Modeling/Scenario")
#Input Monthly data from RiverSmart Analysis
Tot_Mnthly_Inflow <-read.csv("Trace1,Trace1,Trace1,RiverWare MRM,Weber Basin RiverWare Model,RiverWare Policy/Total Inflows.csv")
i=1
for(TTTNum in 1:TraceNumber){
for(TTNum in 1:TraceNumber1){
for(TNum in 1:TraceNumber2){
TraceDirectory <- paste0(",Trace",TNum)
TraceDirectory <-paste0 (TraceDirectory,",RiverWare MRM,Weber Basin RiverWare Model,RiverWare Policy/Total Inflows.csv")
TraceNum1<- paste0(",Trace",TTNum)
TraceDirectory <- paste0(TraceNum1,TraceDirectory)
TraceNum2 <- paste0("Trace",TTTNum)
TraceDirectory <- paste0(TraceNum2,TraceDirectory)
Location <- TraceDirectory
Temp_Storage <- read.csv(Location)
Tot_Mnthly_Inflow[,i] <- Temp_Storage[,5]
colnames(Tot_Mnthly_Inflow)[i] <-  TraceDirectory
i=i+1
}
}
}
Tot_Mnthly_Inflow <- data.frame(Tot_Mnthly_Inflow)
Months <- rep(c(1:12),31)
Months<- Months[(11:369)]
Tot_Mnthly_Inflow$Months <- Months
#Create Years
Years <- c(0:372)
i=1
j=1
while (j<=31) {
Years[(i:(i+11))] <- rep((j-1),12)
i=i+12
j=j+1
}
Years<- Years[(11:369)]
#Add months and Years column
#Tot_Mnthly_Inflow$Months <-Months
Tot_Mnthly_Inflow$Years <- Years
#Add a Water year - The water year is designated by the calendar year in which it ends, so the 2010 water year (USGS) started on October 1, 2009 and ended on September 30, 2010
Tot_Mnthly_Inflow$WaterYear <- ifelse(Tot_Mnthly_Inflow$Months>= 10,Tot_Mnthly_Inflow$Years + 1, Tot_Mnthly_Inflow$Years)
WaterYear  <-                  ifelse(Tot_Mnthly_Inflow$Months>= 10,Tot_Mnthly_Inflow$Years + 1, Tot_Mnthly_Inflow$Years)
#Transpose Data
Tot_Mnthly_Inflow_Transposed <- t(Tot_Mnthly_Inflow)
Tot_Mnthly_Inflow_Transposed <- data.frame(Tot_Mnthly_Inflow_Transposed)
#View(Tot_Mnthly_Inflow_Transposed)
#Stack Columns
Tot_Mnthly_Inflow_Stacked <- stack(Tot_Mnthly_Inflow_Transposed[1:108,1:359])
Tot_Mnthly_Inflow <- Tot_Mnthly_Inflow_Stacked$values
##Total Sedimentation Changes on Reservoir
#Move back to code directory
setwd(startWD)
setwd("~/GitHub/WeberBasinVulnerability/WeberBasinVulnerability/3 - Post Processing")
Tot_Sed <- read.csv("Evaporation.csv")
Tot_Sed <- Tot_Sed[,2]
Tot_Mnthly_Sed <- rep(Tot_Sed,359)
#### Time Columns: Mnths, Years and Water Years #####
Mnths<-c(1:38772)
i=1
j=1
while (i<=359) {
Mnths[j:(i*108)]<-Months[i]
i=i+1
j=j+108
}
Yrs<-c(1:38772)
i=1
j=1
while (i<=359) {
Yrs[j:(i*108)]<-Years[i]
i=i+1
j=j+108
}
Wtr_Yrs<-c(1:38772)
i=1
j=1
while (i<=359) {
Wtr_Yrs[j:(i*108)]<-WaterYear[i]
i=i+1
j=j+108
}
##################   Compile Mnthly Input data    ##################################
#Create Data Frame
Inputs<- data.frame(Tot_Mnthly_Demand)
Inputs$Inflow <- Tot_Mnthly_Inflow
Inputs$Sedimentation <- Tot_Mnthly_Sed
Inputs$Trace_Notation <- Trace_Notation
Inputs$Month<-Mnths
Inputs$Years<-Yrs
Inputs$WaterYear<-Wtr_Yrs
#Number
Inputs$Number<-c(1:38772)
Inputs <- data.frame(Inputs)
##################################  - 2 - Output data ########################################################
#Set Local Directory
setwd(startWD)
setwd("../2 - RiverWare Modeling/With Evaporation Modeling/Scenario")
setwd("~/GitHub/WeberBasinVulnerability/WeberBasinVulnerability/2 - RiverWare Modeling/With Evaporation Modeling/Scenario")
Tot_Mnthly_Stor <- read.csv("Trace1,Trace1,Trace1,RiverWare MRM,Weber Basin RiverWare Model,RiverWare Policy/Total Storage_NO EVAP.csv")
Tot_Mnthly_Short <-read.csv("Trace1,Trace1,Trace1,RiverWare MRM,Weber Basin RiverWare Model,RiverWare Policy/Total Shortages.csv")
##### Total Storage #####
i=1
for(TTTNum in 1:TraceNumber){
for(TTNum in 1:TraceNumber1){
for(TNum in 1:TraceNumber2){
TraceDirectory <- paste0(",Trace",TNum)
TraceDirectory <-paste0 (TraceDirectory,",RiverWare MRM,Weber Basin RiverWare Model,RiverWare Policy/Total Storage_NO EVAP.csv")
TraceNum1<- paste0(",Trace",TTNum)
TraceDirectory <- paste0(TraceNum1,TraceDirectory)
TraceNum2 <- paste0("Trace",TTTNum)
TraceDirectory <- paste0(TraceNum2,TraceDirectory)
Location <- TraceDirectory
Temp_Storage <- read.csv(Location)
Tot_Mnthly_Stor[,i] <- Temp_Storage[,5]
colnames(Tot_Mnthly_Stor)[i] <-  TraceDirectory
i=i+1
}
}
}
Tot_Mnthly_Stor <- data.frame(Tot_Mnthly_Stor)
#Transpose Data
Tot_Mnthly_Stor_Transposed <- t(Tot_Mnthly_Stor)
Tot_Mnthly_Stor_Transposed <- data.frame(Tot_Mnthly_Stor_Transposed)
#View(Tot_Mnthly_Inflow_Transposed)
#Stack Columns
Tot_Mnthly_Stor_Stacked <- stack(Tot_Mnthly_Stor_Transposed[1:108,1:359])
Tot_Mnthly_Stor <- Tot_Mnthly_Stor_Stacked$values
Tot_Mnthly_Stor <- data.frame(Tot_Mnthly_Stor)
##### Total Shortages #####
i=1
for(TTTNum in 1:TraceNumber){
for(TTNum in 1:TraceNumber1){
for(TNum in 1:TraceNumber2){
TraceDirectory <- paste0(",Trace",TNum)
TraceDirectory <-paste0 (TraceDirectory,",RiverWare MRM,Weber Basin RiverWare Model,RiverWare Policy/Total Shortages.csv")
TraceNum1<- paste0(",Trace",TTNum)
TraceDirectory <- paste0(TraceNum1,TraceDirectory)
TraceNum2 <- paste0("Trace",TTTNum)
TraceDirectory <- paste0(TraceNum2,TraceDirectory)
Location <- TraceDirectory
Temp_Storage <- read.csv(Location)
Tot_Mnthly_Short[,i] <- Temp_Storage[,5]
colnames(Tot_Mnthly_Short)[i] <-  TraceDirectory
i=i+1
}
}
}
Tot_Mnthly_Short <- data.frame(Tot_Mnthly_Short)
#Transpose Data
Tot_Mnthly_Short_Transposed <- t(Tot_Mnthly_Short)
Tot_Mnthly_Short_Transposed <- data.frame(Tot_Mnthly_Short_Transposed)
#View(Tot_Mnthly_Inflow_Transposed)
#Stack Columns
Tot_Mnthly_Short_Stacked <- stack(Tot_Mnthly_Short_Transposed[1:108,1:359])
Tot_Mnthly_Short <- Tot_Mnthly_Short_Stacked$values
########################   Compile Output data   ###############################
Outputs <- Tot_Mnthly_Stor
Outputs$Shortage <- Tot_Mnthly_Short
# Add Trace Notation
#Outputs$Trace_Notation <-Trace_Notation
#Number
Outputs$Number<-c(1:38772)
Outputs<-data.frame(Outputs)
#########################  Merge  ---- Data Dataframe########################
Data <- merge(Inputs,Outputs,by="Number")
#From Monthly Streamflows to Annual Streamflows
Annual_Inflows <-Data %>%
group_by(WaterYear,Trace_Notation) %>%
summarise_all(funs(sum(Inflow)))
Avg_Annual_Inflows <- Annual_Inflows %>%
group_by(Trace_Notation) %>%
summarise_all(funs(mean(Inflow)))
Avg_Annual_Inflow<-data.frame(Avg_Annual_Inflows$Inflow)
colnames(Avg_Annual_Inflow)<-"Annual Avg Inflow"
Avg_Annual_Inflow$Trace_Notation <-Trace_Notation
colnames(Avg_Annual_Inflow)[2]<-"Trace_Notation"
#Repeat Calculation from monthly shortage to total annual shortage by water year
Annual_Shortage <-Data %>%
group_by(WaterYear,Trace_Notation) %>%
summarise_all(funs(sum(Shortage)))
Avg_Annual_Shortage <- Annual_Shortage %>%
group_by(Trace_Notation) %>%
summarise_all(funs(mean(Shortage)))
Avg_Annual_Shortage<-data.frame(Avg_Annual_Shortage$Shortage)
colnames(Avg_Annual_Shortage)<-"Annual Avg Shortage"
Avg_Annual_Shortage$Trace_Notation <- Trace_Notation
colnames(Avg_Annual_Shortage)[2]<-"Trace_Notation"
Data <- full_join(Data,Avg_Annual_Inflow,by="Trace_Notation")
Data <- full_join(Data,Avg_Annual_Shortage,by ="Trace_Notation")
# Define reservoir levels as arrays: Moderate -> Severe -> Extreme
cStoreNames <- c("Moderate", "Severe", "Extreme")
cStorLevels <- c(380000,340000,280000)
cColors <- c("Yellow", "Orange", "Red")
ModerateLevel<- 380000
SevereLevel <- 340000
ExtremeLevel<-280000
#Calculate the number of storage levels
nLevels <- length(cStorLevels)
#Pull out the monthly storage values
#Storage_Metrics <- data.frame(Data$Tot_Mnthly_Stor)
Storage_Metrics <- data.frame(Data[,c("Month","Tot_Mnthly_Stor")])
#Create more duplicate columns
Storage_Metrics <- cbind(Storage_Metrics, replicate(nLevels-1,Storage_Metrics$Tot_Mnthly_Stor))
#Rename the columns
colnames(Storage_Metrics)[2:(nLevels+1)] <- cStoreNames
#Record the last data column
cLastDataCol <- ncol(Data)
#Loop through columns. In each column convert the storage values to a binary: 1 if greater or equal to target. 0 if below
for (i in 1:nLevels) {
#Is the storage criteria met?
Storage_Metrics[,1+i] <- ifelse(Storage_Metrics[,1+i] > cStorLevels[i],1,0)
#Save the result back to the Data datafrom
Data[,cLastDataCol + i] <- Storage_Metrics[,1+i]
#Rename the column
colnames(Data)[cLastDataCol +i] <- cStoreNames[i]
}
cRelColNames <- paste0("Rel", cStoreNames)
#Calculate the average (fraction) for each combination of traces for each column. This represents
#the reliability
dfStorageReliability <-Data[,c("Trace_Notation","Month",cStoreNames)] %>%
filter(Month == 6) %>%  #Filter on the June month because that is when we care about storage at criteria
group_by(Trace_Notation) %>%
summarise_all(funs(mean))
#Multiply by 100 to get a percent
dfStorageReliability[,cStoreNames] <- dfStorageReliability[,cStoreNames]*100
# Rename columns
colnames(dfStorageReliability)[3:5] <- c("Mod Reliability", "Sev Reliability","Ext Reliability")
##### Join the Reservoir storage reliability back with the big data set
AllData<-right_join(Data,dfStorageReliability,by='Trace_Notation')
## Arrange the Demand and Inflow columns so they plot correctly
AllData <- AllData %>% arrange(Demand, -`Annual Avg Inflow`) ##%>% mutate(Demand=factor(Demand))
# Change into the plot folder
setwd(startWD)
setwd("~/GitHub/WeberBasinVulnerability/WeberBasinVulnerability/4 - Plots/ggPlot-StorageCriteria")
# Define the dataframes to populate cell values
#Storage Targets:
dfStorageTargets <- data.frame(Name = c("Moderate","Severe","Extreme"),
Color = c("Yellow","Orange","Red"),
Volume = c(380000,340000,280000),
ColumnNum = c(17:19))  #Variable/column number of reliability results in big data frame
#Calculate a column of different volumes
dfStorageTargets$VolDiff <- c(-diff(as.matrix(dfStorageTargets$Volume)),280000)
#Grab a lighter shade of color from color brewer
pReds <- brewer.pal(9,"Reds")
pOranges <- brewer.pal(9,"Oranges")
pYelGreen <- brewer.pal(9,"YlGn")
dfStorageTargets$ColorLite <- c(pYelGreen[1],pOranges[3],pReds[3])
#Calculate the subtitle
dfStorageTargets$Subtitle <- paste0(dfStorageTargets$Name, " (",comma(dfStorageTargets$Volume, digits = 0)," acre-feet)")
cSedValues <- unique(AllData$Sedimentation)
nTargets <- nrow(dfStorageTargets)
nSeds <- length(cSedValues)
AxisTitles <- c("Demand (1,000 acre-feet/year)","Inflows (1,000 acre-feet/year)")
#Filter AllData down to a single row per inflow/demand/sedimentation combination
dfScenResults <- AllData %>% filter(Month.x == 1, WaterYear == 1)
#Make a nice Sedimentation column
dfScenResults$Sed <- paste(dfScenResults$Sedimentation, "(FT/YR) Evaporation")
#Label each row with an Inflow scenario monicer
dfFlowScens <- data.frame(Trace = seq(1:6), StartYear=c(2030, 1940,1930,1610,1520,1570),
FlowLabel=c("Hot Dry","Historical\n(1940 to 1970)","","","",""))
#Create the year to year label
dfFlowScens$FlowLabel <- ifelse(dfFlowScens$FlowLabel=="",paste0(as.character(dfFlowScens$StartYear)," to ", as.character(dfFlowScens$StartYear+30),sep=""), as.character(dfFlowScens$FlowLabel))
dfFlowScens$TraceStr <- paste0("Trace",dfFlowScens$Trace)
#Link the Flow scenario name with the trace number
#Trace numbers are {Trace1,Trace2,Trace3} -- {Demand,Flow,Sedimentation}
#Split out the trace names. This is a list
lTraces <- strsplit(dfScenResults$Trace_Notation,",")
#Convert to a dataframe and transpose
dfTraces <- as.data.frame(t(as.data.frame(lTraces)))
#Assign names to the columns
colnames(dfTraces) <- c("DemTrace","FlowTrace","SedTrace")
dfTraces$TracesAll <- paste(sep=",",dfTraces$DemTrace,dfTraces$FlowTrace,dfTraces$SedTrace)
#Joint the flow names
dfTraces <- left_join(dfTraces,dfFlowScens,by = c("FlowTrace" = "TraceStr"))
#Join back in
dfScenResults <- full_join(dfScenResults,dfTraces,by =c("Trace_Notation" = "TracesAll"))
#Convert from reliability above target to failures below target
dfScenResults$`Mod Reliability` <- (100 - dfScenResults$`Mod Reliability`)
dfScenResults$`Sev Reliability` <-(100 - dfScenResults$`Sev Reliability`)
dfScenResults$`Ext Reliability` <- (100 - dfScenResults$`Ext Reliability`)
dfPlotData <- dfScenResults
# Add a column to define the point type
dfPlotData$DataType <- "Model"
#Define a new data frame that represents the historical point
#Grab the historical inflow
nHistoricalFlow <- dfPlotData %>% filter(FlowLabel == dfFlowScens$FlowLabel[2]) %>% select(`Annual Avg Inflow`)
dfHistoricalPoint <- data.frame(Demand = c(550000),
AnnualAvgFlow = nHistoricalFlow$`Annual Avg Inflow`[1] ,
DataType = "Historical")
dfHistoricalPoint$`Mod Reliability` <- 0
dfHistoricalPoint$`Sev Reliability` <- 0
dfHistoricalPoint$`Ext Reliability` <- 0
relBreaks <- c(seq(3.2,20,by=4),seq(4,100, by=10))
cFlowScens <- sort(unique(dfPlotData$`Annual Avg Inflow`))/1e3
dfFlowScenLabels <- dfPlotData %>% distinct(FlowTrace, `Annual Avg Inflow`,FlowLabel) %>% arrange(`Annual Avg Inflow`)
dfDemScenLabels <- dfPlotData %>% distinct(DemTrace, Demand) %>% arrange(Demand)
dfDemScenLabels$Demand <- dfDemScenLabels$Demand/1e3
#Grab the column names of the data frame
cColNames <- colnames(dfPlotData)
colplots <- list() #new empty list
#Loop over the storage target criteria to create column contour plots for each sedimentation levels
for (iTarget in (1:nTargets)) {
#Grab the column name for the current storage target
sCurrCol <- paste0("`",cColNames[iTarget+16],"`",sep="")
#Make three plots (facets) for the different sedimination levels for the storage target
colplots[[iTarget]] <-
ggplot(dfPlotData, aes_string(x="Demand/1e3",y= "`Annual Avg Inflow`/1e3", z = sCurrCol)) +
#ggplot(dfPlotData, aes_string(x="as.numeric(levels(DemandFac))/1e3",y= "`Annual Avg Inflow`/1e3", z = sCurrCol)) +
#ggplot(dfPlotData, aes_string(x="reorder(Demand,Demand)/1e3",y= "`Annual Avg Inflow`/1e3", z = sCurrCol)) +
#Fill Color
metR::geom_contour_fill(breaks = relBreaks ,na.fill = TRUE) +
#Contour lines
metR::geom_contour2( colour = "black", binwidth=4, size=0.75, breaks = relBreaks)   +
#Label contour lines (This is not working very well)
#metR::geom_text_contour(size=6, check_overlap = TRUE, parse = TRUE) +
geom_dl(aes(label=..level..),method=list("angled.boxes", cex=1), stat="contour", breaks = relBreaks) +
#Overplot points
#geom_point(size=4) +
#Fill the contours from white to the target color
scale_fill_gradientn(name = "Reliability",colours = c("White",as.character(dfStorageTargets$Color[iTarget])), na.value = "white") +
#Create the facets by sedimentation level
facet_wrap( ~Sed, nrow = nSeds) +
theme_bw() +
guides(fill= "none") +
scale_size(guide="none") +
labs(x=AxisTitles[1], y=AxisTitles[2]) +
theme(text = element_text(size=18),
legend.position = "none")
print(colplots[[iTarget]])
}
#Combine all the column plots
plot_grid(colplots[[1]], colplots[[2]], colplots[[3]],
labels = dfStorageTargets$Subtitle,vjust = 4,  #Position the labels inside the top facet plot
ncol = 3, nrow = 1)
colplots <- list() #new empty list
#Loop over the storage target criteria to create column contour plots for each sedimentation levels
for (iTarget in (1:nTargets)) {
#Grab the column name for the current storage target
sCurrCol <- paste0("`",cColNames[iTarget+16],"`",sep="")
#Make three plots (facets) for the different sedimination levels for the storage target
colplots[[iTarget]] <-
ggplot(dfPlotData, aes_string(x="Demand/1e3",y= "`Annual Avg Inflow`/1e3", z = sCurrCol)) +
#ggplot(dfPlotData, aes_string(x="as.numeric(levels(DemandFac))/1e3",y= "`Annual Avg Inflow`/1e3", z = sCurrCol)) +
#ggplot(dfPlotData, aes_string(x="reorder(Demand,Demand)/1e3",y= "`Annual Avg Inflow`/1e3", z = sCurrCol)) +
#Fill Color
metR::geom_contour_fill(breaks = relBreaks ,na.fill = TRUE) +
#Contour lines
metR::geom_contour2( colour = "black", binwidth=4, size=0.75, breaks = relBreaks)   +
#Label contour lines (This is not working very well)
#metR::geom_text_contour(size=6, check_overlap = TRUE, parse = TRUE) +
geom_dl(aes(label=..level..),method=list("angled.boxes", cex=1), stat="contour", breaks = relBreaks) +
#Overplot points
#geom_point(size=4) +
#Overplot historical point
geom_point(data= dfHistoricalPoint, aes(x = Demand/1e3, y = AnnualAvgFlow/1e3), shape = 15, color="Blue", size=6) +
#Fill the contours from white to the target color
scale_fill_gradientn(name = "Reliability",colours = c("White",as.character(dfStorageTargets$Color[iTarget])), na.value = "white") +
#Create the facets by sedimentation level
facet_wrap( ~Sed, nrow = nSeds) +
theme_bw() +
guides(fill= "none") +
scale_size(guide="none") +
labs(x=AxisTitles[1], y=AxisTitles[2]) +
theme(text = element_text(size=18),
legend.position = "none")
print(colplots[[iTarget]])
}
#Combine all the column plots
plot_grid(colplots[[1]], colplots[[2]], colplots[[3]],
labels = dfStorageTargets$Subtitle,vjust = 4,  #Position the labels inside the top facet plot
ncol = 3, nrow = 1)
#Save the plot to file
ggsave("StorageReliability_Evap.jpg",width = 12.5,
height = 7.5, units = "in",
dpi = 300)
dfPlotData1Frame <- dfPlotData %>% filter(Sedimentation == 3.2)
iTarget <- 1
sCurrCol <- paste0("`",cColNames[iTarget+16],"`",sep="")
pSingleLevel <- ggplot(dfPlotData1Frame, aes_string(x="Demand/1e3",y= "`Annual Avg Inflow`/1e3", z = sCurrCol)) +
#pSingleLevel <- ggplot(dfPlotData1Frame, aes(x=as.numeric(DemandFac)/1e3,y= `Annual Avg Inflow`/1e3, z = `Mod Reliability`)) +
#Fill Color
metR::geom_contour_fill(breaks = relBreaks ,na.fill = TRUE) +
#Contour lines
#metR::geom_contour2( colour = "black", binwidth=4, size=0.75, breaks = relBreaks)   +
metR::geom_contour2( colour = "black", size=0.75, breaks = relBreaks)   +
#Label contour lines (This is not working very well)
#metR::geom_text_contour(aes(label=..level..),size=6, check_overlap = TRUE, parse = TRUE) +
geom_dl(aes(label=..level..),method=list("angled.boxes", cex=2), stat="contour", breaks = relBreaks) +
#Overplot model scenario points
geom_point(size=4, color = "Black", shape = 19) +
#Overplot historical point
geom_point(data= dfHistoricalPoint, aes(x = Demand/1e3, y = AnnualAvgFlow/1e3), shape = 15, color="Blue", size=6) +
# Label the points with reliability. Take out on final.
#geom_text(label=sprintf("%.0f",dfPlotData1Frame$`Mod Reliability`), size=5) +
#Add secondary x and y axis to label scenarios
scale_y_continuous(sec.axis = sec_axis(~. +0, name = "", breaks = dfFlowScenLabels$`Annual Avg Inflow`/1e3, labels = dfFlowScenLabels$FlowLabel)) +
scale_x_continuous(sec.axis = sec_axis(~. +0, name = "", breaks = dfDemScenLabels$Demand,  labels = format(dfDemScenLabels$Demand,digits=0))) +
#Fill the contours from white to the target color
scale_fill_gradientn(name = "Reliability",colours = c("White",as.character(dfStorageTargets$Color[iTarget])), na.value = "white") +
#scale_shape_manual(values = c(19,15)) +
#scale_color_manual(values = c("Blue","Black")) +
#Create the facets by sedimentation level
#facet_wrap( ~Sed, nrow = nSeds) +
theme_bw() +
guides(fill= "none") +
guides(marker = guide_legend(title="", order=1)) +
scale_size(guide="none") +
labs(x=AxisTitles[1], y=AxisTitles[2]) +
theme(text = element_text(size=18),
legend.position = "none")
print(pSingleLevel)
#Save the plot to file
ggsave("SingleReliability_Evap.jpg",width = 7,
height = 5, units = "in",
dpi = 300)
#Join the scenario names
AllData <- full_join(AllData,dfTraces,by =c("Trace_Notation" = "TracesAll"))
#Specify the demand/flow scenario combos we want to plot
dfScenarioCombos <- data.frame(FlowScen = c("Trace4","Trace6","Trace1"),
DemScen = c("Trace5","Trace4","Trace3"))
#Filter on the supply, demand scenario combinations
dfTimePlotData <- inner_join(AllData,dfScenarioCombos,by = c("FlowTrace"= "FlowScen","DemTrace"="DemScen"))
#Filter out middle Sedimentation trace
dfTimePlotData <- dfTimePlotData %>% filter(SedTrace != "Trace2")
#Calculate a year-month-day
dfTimePlotData$Date <- as.Date(sprintf("%d-%d-%d",dfTimePlotData$Years, dfTimePlotData$Month.x,1))
#Make a nice Sedimentation column
dfTimePlotData$Sed <- paste(dfTimePlotData$Sedimentation, "(FT/YR) Evaporation")
#Calculate a Flow-Demand run name
dfTimePlotData$RunName <- paste(sprintf("%.0f",dfTimePlotData$Demand/1e3),dfTimePlotData$FlowLabel, sep = " / ")
#Construct the data frame for the storage criteria
cDateRange <- c(min(dfTimePlotData$Date),max(dfTimePlotData$Date))
dfStorageCriteria <- do.call("rbind", replicate(2, dfStorageTargets, simplify = FALSE))
dfStorageCriteria$Date <- c(rep(cDateRange[1],nTargets),rep(cDateRange[2],nTargets))
dfStorageCriteria <- dfStorageCriteria %>% arrange(-Volume)
#Get the colors we will need
# Light Red
# Blue scale for lines
pBlues <- brewer.pal(9,"Blues")
#http://www.sthda.com/english/articles/32-r-graphics-essentials/128-plot-time-series-data-using-ggplot/
ggplot(dfTimePlotData, aes(x = Date, y = Tot_Mnthly_Stor/1e3)) +
#Area plots of storage criteria
geom_area(data=dfStorageCriteria %>% filter(Name=="Moderate"), aes(x = Date, y= Volume/1e3, color = Name, fill = Name),
alpha = 1, position = "identity") +
geom_area(data=dfStorageCriteria %>% filter(Name=="Severe"), aes(x = Date, y= Volume/1e3, color = Name, fill = Name),
alpha = 1, position = "identity") +
geom_area(data=dfStorageCriteria %>% filter(Name=="Extreme"), aes(x = Date, y= Volume/1e3, color = Name, fill = Name),
alpha = 1, position = "identity") +
#geom_ribbon(data=dfStorageCriteria, aes(ymax = Volume/1e3, ymin=0, fill = Name)) +
#scale_color_manual(values = dfStorageTargets$Color) +
scale_fill_manual(values = c(dfStorageTargets$ColorLite[3],dfStorageTargets$ColorLite[1],dfStorageTargets$ColorLite[2]), breaks = c("Moderate","Severe","Extreme")) +
#Line plots of storage series
geom_line(aes(color = RunName), size = 1) +
scale_color_manual(values = c(pBlues[3],pBlues[5],pBlues[7], dfStorageTargets$ColorLite[3],dfStorageTargets$ColorLite[1],dfStorageTargets$ColorLite[2]), breaks = c("428 / 1610 to 1640", "492 / 1570 to 1600","544 / Hot Dry")) +
facet_wrap(~Sed, nrow = 2) +  # Set nrow to 1 to make the panels side by side
theme_bw() +
guides(fill= guide_legend(title="Storage Target", order=2), color = guide_legend(title="Run (Demand / Flow)", order=1)) +
scale_size(guide="none") +
labs(x="Model Year", y="Total Storage\n(1,000 acre-feet)") +
theme(text = element_text(size=18))
ggsave("StorageTimeSeries_Evap.jpg",width = 10,
height = 7, units = "in",
dpi = 300)
ggplot(dfTimePlotData, aes(x = Date, y = Shortage/1e3)) +
#Line plots of storage series
# Sed facets, runs ~ colors
#geom_line(aes(color = RunName), size = 1) +
#scale_color_manual(values = c(pBlues[5],pBlues[3],pBlues[7]), breaks = c("1610 to 1640 / 428", "1570 to 1600 / 492","Hot Dry / 544")) +
#facet_wrap(~Sed, nrow = 2) +  # Set nrow to 1 to make the panels side by side
#Seds as colors, runs ~ facets
geom_line(aes(color = Sed), size = 1) +
scale_color_manual(values = c(pBlues[3],pBlues[7]), breaks = c("RiverWare Evaporation (3.2 feet/year)", "Late Evaporation (4.0 feet/year)")) +
facet_wrap(~RunName, nrow = 3) +  # Set nrow to 1 to make the panels side by side
theme_bw() +
#guides(color = guide_legend(title="Run (Flow / Demand)", order=1)) +
guides(color = guide_legend(title="", order=1)) +
scale_size(guide="none") +
labs(x="Model Year", y="Shortage\n(1,000 acre-feet)") +
theme(text = element_text(size=18))
ggsave("ShortageTimeSeries_Evap.jpg",width = 10,
height = 7, units = "in",
dpi = 300)
ggplot(dfTimePlotData, aes(x = Date, y = Tot_Mnthly_Stor/1e3)) +
#Area plots of storage criteria
geom_area(data=dfStorageCriteria %>% filter(Name=="Moderate"), aes(x = Date, y= Volume/1e3, color = Name, fill = Name),
alpha = 1, position = "identity") +
geom_area(data=dfStorageCriteria %>% filter(Name=="Severe"), aes(x = Date, y= Volume/1e3, color = Name, fill = Name),
alpha = 1, position = "identity") +
geom_area(data=dfStorageCriteria %>% filter(Name=="Extreme"), aes(x = Date, y= Volume/1e3, color = Name, fill = Name),
alpha = 1, position = "identity") +
#geom_ribbon(data=dfStorageCriteria, aes(ymax = Volume/1e3, ymin=0, fill = Name)) +
#scale_color_manual(values = dfStorageTargets$Color) +
scale_fill_manual(values = c(dfStorageTargets$ColorLite[3],dfStorageTargets$ColorLite[1],dfStorageTargets$ColorLite[2]), breaks = c("Moderate","Severe","Extreme")) +
#Line plots of storage series
geom_line(aes(color = RunName, size=Shortage)) +
scale_color_manual(values = c(pBlues[3],pBlues[5],pBlues[7], dfStorageTargets$ColorLite[3],dfStorageTargets$ColorLite[1],dfStorageTargets$ColorLite[2]), breaks = c("428 / 1610 to 1640", "492 / 1570 to 1600","544 / Hot Dry")) +
facet_wrap(~Sed, nrow = 2) +  # Set nrow to 1 to make the panels side by side
theme_bw() +
guides(fill= guide_legend(title="Storage Target", order=2),
color = guide_legend(title="Run (Demand / Flow)", order=1),
size = guide_legend(title="Shortage (ac-ft per mon.)", order=3)) +
scale_size(guide="none") +
labs(x="Model Year", y="Total Storage\n(1,000 acre-feet)") +
theme(text = element_text(size=18))
ggsave("StorageShortageTimeSeries_Evap.jpg",width = 10,
height = 7, units = "in",
dpi = 300)
#Return to original folder
setwd(startWD)
