### For select runs (combinations of Flow and Demand)
### Figure 10
#Join the scenario names
AllData <- full_join(AllData,dfTraces,by =c("Trace_Notation" = "TracesAll"))
#Specify the demand/flow scenario combos we want to plot
dfScenarioCombos <- data.frame(FlowScen = c("Trace4","Trace6","Trace1"),
DemScen = c("Trace5","Trace4","Trace3"))
#Filter on the supply, demand scenario combinations
dfTimePlotData <- inner_join(AllData,dfScenarioCombos,by = c("FlowTrace"= "FlowScen","DemTrace"="DemScen"))
#Filter out middle Sedimentation trace
dfTimePlotData <- dfTimePlotData %>% filter(SedTrace != "Trace2")
#Calculate a year-month-day
dfTimePlotData$Date <- as.Date(sprintf("%d-%d-%d",dfTimePlotData$Years, dfTimePlotData$Month.x,1))
#Make a nice Sedimentation column
dfTimePlotData$Sed <- paste(dfTimePlotData$Sedimentation, "(FT/YR) Evaporation")
#Calculate a Flow-Demand run name
dfTimePlotData$RunName <- paste(sprintf("%.0f",dfTimePlotData$Demand/1e3),dfTimePlotData$FlowLabel, sep = " / ")
#Construct the data frame for the storage criteria
cDateRange <- c(min(dfTimePlotData$Date),max(dfTimePlotData$Date))
dfStorageCriteria <- do.call("rbind", replicate(2, dfStorageTargets, simplify = FALSE))
dfStorageCriteria$Date <- c(rep(cDateRange[1],nTargets),rep(cDateRange[2],nTargets))
dfStorageCriteria <- dfStorageCriteria %>% arrange(-Volume)
#Get the colors we will need
# Light Red
# Blue scale for lines
pBlues <- brewer.pal(9,"Blues")
#http://www.sthda.com/english/articles/32-r-graphics-essentials/128-plot-time-series-data-using-ggplot/
ggplot(dfTimePlotData, aes(x = Date, y = Tot_Mnthly_Stor/1e3)) +
#Area plots of storage criteria
geom_area(data=dfStorageCriteria %>% filter(Name=="Moderate"), aes(x = Date, y= Volume/1e3, color = Name, fill = Name),
alpha = 1, position = "identity") +
geom_area(data=dfStorageCriteria %>% filter(Name=="Severe"), aes(x = Date, y= Volume/1e3, color = Name, fill = Name),
alpha = 1, position = "identity") +
geom_area(data=dfStorageCriteria %>% filter(Name=="Extreme"), aes(x = Date, y= Volume/1e3, color = Name, fill = Name),
alpha = 1, position = "identity") +
#geom_ribbon(data=dfStorageCriteria, aes(ymax = Volume/1e3, ymin=0, fill = Name)) +
#scale_color_manual(values = dfStorageTargets$Color) +
scale_fill_manual(values = c(dfStorageTargets$ColorLite[3],dfStorageTargets$ColorLite[1],dfStorageTargets$ColorLite[2]), breaks = c("Moderate","Severe","Extreme")) +
#Line plots of storage series
geom_line(aes(color = RunName), size = 1) +
scale_color_manual(values = c(pBlues[3],pBlues[5],pBlues[7], dfStorageTargets$ColorLite[3],dfStorageTargets$ColorLite[1],dfStorageTargets$ColorLite[2]), breaks = c("428 / 1610 to 1640", "492 / 1570 to 1600","544 / Hot Dry")) +
facet_wrap(~Sed, nrow = 2) +  # Set nrow to 1 to make the panels side by side
theme_bw() +
guides(fill= guide_legend(title="Storage Target", order=2), color = guide_legend(title="Run (Demand / Flow)", order=1)) +
scale_size(guide="none") +
labs(x="Model Year", y="Total Storage\n(1,000 acre-feet)") +
theme(text = element_text(size=18))
#legend.position = "none")
ggsave("StorageTimeSeries_Evap.jpg",width = 10,
height = 7, units = "in",
dpi = 300)
#### Figure 11 - Show time series of shortage plots for same runs
ggplot(dfTimePlotData, aes(x = Date, y = Shortage/1e3)) +
#Line plots of storage series
# Sed facets, runs ~ colors
#geom_line(aes(color = RunName), size = 1) +
#scale_color_manual(values = c(pBlues[5],pBlues[3],pBlues[7]), breaks = c("1610 to 1640 / 428", "1570 to 1600 / 492","Hot Dry / 544")) +
#facet_wrap(~Sed, nrow = 2) +  # Set nrow to 1 to make the panels side by side
#Seds as colors, runs ~ facets
geom_line(aes(color = Sed), size = 1) +
scale_color_manual(values = c(pBlues[3],pBlues[7]), breaks = c("RiverWare Evaporation (3.2 feet/year)", "Late Evaporation (4.0 feet/year)")) +
facet_wrap(~RunName, nrow = 3) +  # Set nrow to 1 to make the panels side by side
theme_bw() +
#guides(color = guide_legend(title="Run (Flow / Demand)", order=1)) +
guides(color = guide_legend(title="", order=1)) +
scale_size(guide="none") +
labs(x="Model Year", y="Shortage\n(1,000 acre-feet)") +
theme(text = element_text(size=18))
#legend.position = "none")
ggsave("ShortageTimeSeries_Evap.jpg",width = 10,
height = 7, units = "in",
dpi = 300)
#### Figure 12 - Experiment to use Figure 10 but add line thickness at Shortage
ggplot(dfTimePlotData, aes(x = Date, y = Tot_Mnthly_Stor/1e3)) +
#Area plots of storage criteria
geom_area(data=dfStorageCriteria %>% filter(Name=="Moderate"), aes(x = Date, y= Volume/1e3, color = Name, fill = Name),
alpha = 1, position = "identity") +
geom_area(data=dfStorageCriteria %>% filter(Name=="Severe"), aes(x = Date, y= Volume/1e3, color = Name, fill = Name),
alpha = 1, position = "identity") +
geom_area(data=dfStorageCriteria %>% filter(Name=="Extreme"), aes(x = Date, y= Volume/1e3, color = Name, fill = Name),
alpha = 1, position = "identity") +
#geom_ribbon(data=dfStorageCriteria, aes(ymax = Volume/1e3, ymin=0, fill = Name)) +
#scale_color_manual(values = dfStorageTargets$Color) +
scale_fill_manual(values = c(dfStorageTargets$ColorLite[3],dfStorageTargets$ColorLite[1],dfStorageTargets$ColorLite[2]), breaks = c("Moderate","Severe","Extreme")) +
#Line plots of storage series
geom_line(aes(color = RunName, size=Shortage)) +
scale_color_manual(values = c(pBlues[3],pBlues[5],pBlues[7], dfStorageTargets$ColorLite[3],dfStorageTargets$ColorLite[1],dfStorageTargets$ColorLite[2]), breaks = c("428 / 1610 to 1640", "492 / 1570 to 1600","544 / Hot Dry")) +
facet_wrap(~Sed, nrow = 2) +  # Set nrow to 1 to make the panels side by side
theme_bw() +
guides(fill= guide_legend(title="Storage Target", order=2),
color = guide_legend(title="Run (Demand / Flow)", order=1),
size = guide_legend(title="Shortage (ac-ft per mon.)", order=3)) +
scale_size(guide="none") +
labs(x="Model Year", y="Total Storage\n(1,000 acre-feet)") +
theme(text = element_text(size=18))
#legend.position = "none")
ggsave("StorageShortageTimeSeries_Evap.jpg",width = 10,
height = 7, units = "in",
dpi = 300)
#Return to original folder
setwd(startWD)
############ End of code##########
View(AllData)
nHistoricalFlow
dfFlowScens
dfPlotData
view(dfPlotData)
view(dfPlotData)
View(dfPlotData)
###Total Storage Compilation#--------------------------------------------------------------------------------#
#Store the current code directory so we can later return to it (0 - Code)
### Load the package or install if not present
if (!require("RColorBrewer")) {
install.packages("RColorBrewer")
library(RColorBrewer)
}
library(readr)
library(lubridate) #For month
#install.packages("reshape")
library(reshape) #For Melt
library(plotly) # For Plots
library(data.table)
library(dplyr)
##Total Sedimentation Changes on Reservoir
#Move back to code directory
setwd(startWD)
#Move into the local input directory
setwd("../3 - Post Processing")
setwd("~/GitHub/WeberBasinVulnerability/WeberBasinVulnerability/3 - Post Processing")
Tot_Sed <- read.csv("Evaporation.csv")
Tot_Sed <- Tot_Sed[,2]
Tot_Mnthly_Sed <- rep(Tot_Sed,359)
#### Time Columns: Mnths, Years and Water Years #####
Mnths<-c(1:38772)
i=1
j=1
while (i<=359) {
Mnths[j:(i*108)]<-Months[i]
i=i+1
j=j+108
}
Yrs<-c(1:38772)
i=1
j=1
while (i<=359) {
Yrs[j:(i*108)]<-Years[i]
i=i+1
j=j+108
}
Wtr_Yrs<-c(1:38772)
i=1
j=1
while (i<=359) {
Wtr_Yrs[j:(i*108)]<-WaterYear[i]
i=i+1
j=j+108
}
View(Tot_Evap)
# |  Part 0:
# |  PART 1:
# |  PART 2:
# |  PART 3:
# *-----------------------------------------------------------------
# | UPDATES:
# |
# |
# *------------------------------------------------------------------
### Clear any existing data or functions.
rm(list=ls())
library(readxl)
#Store the current code directory so we can later return to it (0 - Code)
fCodeDir <- getwd()
setwd(fCodeDir)
#Move into the local input directory
#setwd("../1 - Scenario Processing/Annual Service Area Demand Scenarios/Input_Data")
setwd("~/GitHub/WeberBasinVulnerability/WeberBasinVulnerability/1 - Scenario Processing/Annual Service Area Demand Scenarios/Input_Data")
DWRSA_Table <- read_excel("DWRSA_Table.xlsx")
#Set New Working Directory
#Return to code directory
setwd(fCodeDir)
##Possible package installation necessary
#install.packages("RColorBrewer")
#install.packages("readxl")
#install.packages("openxlsx")
library(readxl)
library(plotly)
library(RColorBrewer)
library(openxlsx)
library("tibble", lib.loc="~/R/win-library/3.5")
#install.packages("plotly")
library(dplyr)
# To export plotly plots to figures
if (!require("processx")) install.packages("processx")
library(processx)
##Input Data###############
setwd("~/GitHub/WeberBasinVulnerability/WeberBasinVulnerability/1 - Scenario Processing/Annual Service Area Demand Scenarios/Output")
## Municipal and Industrial water Calculated from 2a_Demand Calc_byServiceArea--Municipal
MI <- read_excel("MI.xlsx")
#View(MI)
MIAll_Factors <- read_excel("MI_AllFactors.xlsx")
##Calculation##############
AGtoMI_CF <- c(0,0.71,0.63) #Agriculture to Municipal Water Use Conversion Factor
#MI2070_SamePerCap - MI2015_SamePerCap = Changein_MI
Changein_MI_2070to2015 = MI$MI_SA_2070 - MI$MI_SA_2015
Changein_MI_2150to2015 = MI$MI_SA_2150 - MI$MI_SA_2015
#Conversion factor of  1,"1AF = 1AF"# But Change will ultimately be 0 acft
Changein_AG_2070to2015 = data.frame(rep(0,20))  #data.frame(Changein_MI_2070to2015/AGtoMI_CF[1])
Changein_AG_2150to2015 = data.frame(rep(0,20))            #data.frame(Changein_MI_2150to2015/AGtoMI_CF[1])
#Conversion factor of  0.71, Mean value of state and Weber basin area water conversion
Changein_AG_2070to2015[,2] = Changein_MI_2070to2015/AGtoMI_CF[2]
Changein_AG_2150to2015[,2] = Changein_MI_2150to2015/AGtoMI_CF[2]
#Conversion factor of 0.63, Minimum value of change for the state conversion
Changein_AG_2070to2015[,3] = Changein_MI_2070to2015/AGtoMI_CF[3]
Changein_AG_2150to2015[,3] = Changein_MI_2150to2015/AGtoMI_CF[3]
#Agricultural Base Usage--------
#BaseDemand <- data.frame(DWRSA_Table$MAX) #MAX AG WATER USE
BaseDemand <- data.frame(DWRSA_Table$AVG)    #OR AVG AG WATER USE
BaseDemand[20,] <- 0
#The amount of Agricultural Water Used found by looking at the recorded Total Base 2015 water demands and subtracting the calculated
#2015 Municipal and Industrial water usage
AgBase2015 <- BaseDemand - MI$MI_SA_2015
i=1
AG_2015 <- AgBase2015
AG_2070 <- data.frame(rep(1:20))
AG_2150 <- data.frame(rep(1:20))
while (i<=3) {
AG_2070[,i] <- data.frame(AgBase2015 - Changein_AG_2070to2015[,i])
AG_2150[,i] <- data.frame(AgBase2015 - Changein_AG_2150to2015[,i])
i=i+1
}
AG_2070[,1:3] <- replace(AG_2070[,1:3], AG_2070[,1:3] < 0, 0)
AG_2150[,1:3] <- replace(AG_2150[,1:3], AG_2150[,1:3] < 0, 0)
colnames(AG_2070)<-c("100% Conversion Factor","_71% Conversion Factor","_63% Conversion Factor")
colnames(AG_2150)<-c("100% Conversion Factor","_71% Conversion Factor","_63% Conversion Factor")
#########################################################################################################
#Evaporation for Agriculture 6% moderate emissions  10% high emissions
AG_2070<- AG_2070*1.06
AG_2150<- AG_2150*1.10
MIandAg_Demand <- data.frame(AG_2015[,1] + MI$MI_SA_2015)
i=1
j=1
while (i<=9) {
MIandAg_Demand[,j] <- AG_2015[,1] + MI[,i]
i=i+1
j=j+1
}
colnames(MIandAg_Demand)[1]<-"MI_SA_2015"
#2070
k=1
while (k<=3) {
while (i<=18) {
MIandAg_Demand[,j] <- AG_2070[,k] + MI[,i]
colnames(MIandAg_Demand)[j]<-paste0(colnames(MI)[i],colnames(AG_2070)[k])
i=i+1
j=j+1
}
k=k+1
i=10
}
#2150
i=19
k=1
while (k<=3) {
while (i<=27) {
MIandAg_Demand[,j] <- AG_2150[,k] + MI[,i]
colnames(MIandAg_Demand)[j]<-paste0(colnames(MI)[i],colnames(AG_2150)[k])
i=i+1
j=j+1
}
k=k+1
i=19
}
#write.xlsx(MIandAg_Demand,"MI_with_AG.xlsx")
write.csv(MIandAg_Demand,"MI_with_AG.csv")
#Tab---- Create Workbook-----------
#Input How Many Scenarios                  #### Nine 2015 Scenarios, Twenty-Seven 2070 Scenarios, and Twenty-Seven 2150 Scenarios
#### 63 Total MI plus Ag Scenarios ########
RunNumber <- 63
#Create Workbook
wb <- createWorkbook("Data")
#Create Worksheet for each Run
for(Num in 1:(RunNumber)) {
RunsString <- paste0("Trace",Num)
addWorksheet(wb, RunsString)
}
#Input Data
SAs<- c('SA1','SA2','SA3','SA4','SA5','SA6','SA7','SA8','SA9','SA10','SA11','SA12','SA13','SA14','SA15','SA16','SA17','SA18','SA19','SA20')
i=1
while (i<=RunNumber) {
writeData(wb,sheet = i, SAs,startCol = 1,startRow = 3)
i=i+1
}
i=1
while (i<=RunNumber) {
writeData(wb,sheet = i, MIandAg_Demand[,i],startCol = 2,startRow = 3)
i=i+1
}
##Save workbook
saveWorkbook(wb,"MI+AG.xlsx",overwrite = TRUE)
#################################################################################################################################################################################################################################################################################################################################################################################################################################################
### Sum Data for plots ###
#################################################################################################################################################################################################################################################################################################################################################################################################################################################
#MIandAg_Demand Sums
#Create Data frame
MIandAG_Sums <- t(colnames(MIandAg_Demand))
i=1
while (i<=63) {
MIandAG_Sums[,i] <- sum(MIandAg_Demand[,i])
i=i+1
}
MIandAG_Sums<- data.frame(MIandAG_Sums)
Nms<-t(colnames(MIandAg_Demand))
names(MIandAG_Sums) <- c(Nms)
#Transpose Data
DemandData <- data.frame(t(MIandAG_Sums))
#Name Column
names(DemandData)[1] <- paste("MI + AG")
#Year Column
Year <- c(rep(2015,9),rep(2070,27),rep(2150,27))
DemandData$Year<-Year
#AgConversion Column
AGCF<-c(rep(100,9),rep(c(rep(100,9), rep(71,9), rep(63,9)),2))
DemandData$AG_ConversionFactor <-AGCF
#Scenario Name Column
DemandData$Scenario_Name<-rownames(DemandData)
#Add MI Factors
rownames(MIAll_Factors)[1]<-"Potable PerCapita % Change"
rownames(MIAll_Factors)[2]<-"Secondary PerCapita % Change"
rownames(MIAll_Factors)[3]<-"Avg Reduced PerCapita % Change"
rownames(MIAll_Factors)[4] <-"Avg Reduced PerCapita GPCD Change"
rownames(MIAll_Factors)[5] <-"PerCapita Change by Scenario"
rownames(MIAll_Factors)[6]<-"ET Change by %"
rownames(MIAll_Factors)[7]<-"ET Change by Scenario"
rownames(MIAll_Factors)[8]<-"ET Change by Acre-Feet/Year"
rownames(MIAll_Factors)[9]<-"Population"
Transposed_MIAllFactors <-t(MIAll_Factors)
Transposed_MIAllFactors<-data.frame(Transposed_MIAllFactors)
MI_Factors_2015<-Transposed_MIAllFactors[1:9,]
MI_Factors_2070<-Transposed_MIAllFactors%>% filter(Population==5109197)
MI_Factors_2070[10:27,]<-MI_Factors_2070
rownames(MI_Factors_2070) <- rownames(DemandData)[10:36]
MI_Factors_2150<-Transposed_MIAllFactors%>% filter(Population==6965058)
MI_Factors_2150[10:27,]<-MI_Factors_2150
rownames(MI_Factors_2150) <- rownames(DemandData)[37:63]
MI_Factors<- rbind(MI_Factors_2015,MI_Factors_2070,MI_Factors_2150)
rownames(MI_Factors)<-rownames(DemandData)
colnames(MI_Factors)<-c("Potable_PerCapita_%_Change","Secondary_PerCapita_%_Change","Average_PerCapita_%_Change","Average_GPCD","PerCapita_Scenario","ET_%_Change","ET_Scenario","ET_Changes","Population")
AllDemandData <- cbind(DemandData,MI_Factors)
#Print to pdf
library(gridExtra)
pdf("AllDemandData.pdf", height=18, width=33)
grid.table(AllDemandData)
dev.off()
write.xlsx(AllDemandData,"AllDemandData.xlsx")
Data <-read.xlsx("AllDemandData.xlsx")
##########Fix numeric issues #######
Data<-  data.matrix(Data, rownames.force = NA)
#View(AllDemandData)
Data<-data.frame(Data[,c(1:3,5:7,8,10,12,13)])
##MIandAG_Sums Plots##################################################################
##4d plots
#text format
t <- list(
family = "sans serif",
size = 18,
color ='black')
#Add row names to Data dataframe
rwnms<-(rownames(AllDemandData))
rwnms<-gsub("MI_SA_","",rwnms)
rwnms<-gsub(' Conversion Factor','AG CF',rwnms)
#take out years
#rwnms<-gsub("_2015","",rwnms)
#rwnms<-gsub("_2070","",rwnms)
#rwnms<-gsub("_2150","",rwnms)
rownames(Data)<-rwnms
#plots
p<-plot_ly(data =Data , x=Data$Year, y=Data$MI...AG,type='scatter',mode='markers',
size = Data$Average_PerCapita_._Change,color = Data$ET_._Change,colors = c("lightblue","skyblue","midnightblue"),
mode = 'markers',symbol = factor(Data$AG_ConversionFactor),legendtitle='AG CF',
symbols = c('square-open','x-open','circle-open','diamond-open')
)%>%
add_text(text = rownames(Data),textfont = t, textposition = "top right") %>%
layout(yaxis = list(title ='M&I + AG Demand (acre-feet)'),
showlegend =T,title='Demand Scenarios',
xaxis=list(title='Year',tickvals=list(2015,2070,2150),
ticktext=list('2015','2070','2150'),tickmode="array"))
p
Data$DemandScenarios <-rownames(Data)
#Min and max of each year
x2015<-Data %>% filter(Year==2015)
x2015_min <- x2015 %>% filter(MI...AG==min(x2015$MI...AG))
x2015_max <- x2015 %>% filter(MI...AG==max(x2015$MI...AG))
x2070<-Data %>% filter(Year==2070)
x2070_min <- x2070 %>% filter(MI...AG==min(x2070$MI...AG))
x2070_max <- x2070 %>% filter(MI...AG==max(x2070$MI...AG))
x2150<-Data %>% filter(Year==2150)
x2150_min <- x2150 %>% filter(MI...AG==min(x2150$MI...AG))
x2150_max <- x2150 %>% filter(MI...AG==max(x2150$MI...AG))
x2015<-full_join(x2015_min,x2015_max)
x2070<-full_join(x2070_min,x2070_max)
x2150<-full_join(x2150_min,x2150_max)
tempx<-full_join(x2015,x2070)
DD_MIN_MAX<- full_join(tempx,x2150)
Data2<-DD_MIN_MAX
write.xlsx(DD_MIN_MAX,"DemandSelections.xlsx")
#Minimums and Maximum seperate
tempmin<-full_join(x2015_min,x2070_min)
DD_MIN<-full_join(tempmin,x2150_min)
tempmax<-full_join(x2015_max,x2070_max)
DD_MAX<-full_join(tempmax,x2150_max)
#Scatter points   ###################### PLOTs FOR WEBER PRESENTATION ########################
BaseCase<-Data[1,1]
pDemandYear <- plot_ly(data =Data2 , x=Data2$Year, y=Data2$MI...AG,type='scatter', name = '6 Selected Demand Scenarios'
,mode='markers',marker = list(size = 12,color = 'red'))%>%
add_trace(x=Data$Year,y=Data$MI...AG,type='scatter', name='57 Demand Scenarios',
marker = list(size = 8,color = ' rgba(0, 210, 255, 1)', symbols='triangle'))%>%
add_text(text = c("
Average 86 GPCD
PET (Increased 0 (AF/Yr)
100% Ag. Conv. Factor","
Average 117 GPCD
PET (Increased 5,485 (AF/Yr)
100% Ag. Conv. Factor","
Average 86 GPCD
PET (Increased 0 (AF/Yr)
63% Ag. Conv. Factor","
Average 117 GPCD
PET (Increased 16,237 (AF/Yr)
100% Ag. Conv. Factor","
Average 86 GPCD
PET (Increased 0 (AF/Yr)
63% Ag. Conv. Factor","
Average  117 GPCD
PET (Increased 22,331 (AF/Yr)
100% Ag. Conv. Factor")
,textfont = t, textposition = "right",showlegend = FALSE) %>%
add_trace(y=BaseCase,x='2015',type='scatter', mode='markers',name = 'Base Case',
marker = list(size = 12,color = 'rgba(0, 0, 0, 1)'))%>%
layout(yaxis = list(title ='Municipal, Industrial & Agricultural Demand\n(acre-feet/year)\n        ', titlefont=t),
showlegend =T,
xaxis=list(title='',tickvals=list(2015,2070,2150),
titlefont = t,
#                    ticktext=list('2015 (Population: 2.5 Million)','2070 (Population: 5.1 Million)','2150 (Population: 6.9 Million)'),tickmode="array"))
ticktext=list('2015\n(2.5 Million people)','2070\n(5.1 Million people)','2150\n(6.9 Million people)'),tickmode="array"))
print(pDemandYear)
##Parallel plot -- Figure 6 - Parallel coordinate plot of demand factors
plot_ly(data=Data,width = 900, height = 600) %>%
add_trace(type = 'parcoords',
line = list(color = Data$MI...AG,
colorscale = 'Blues',
showscale = TRUE,
reversescale = TRUE,
cmin = 350000,
cmax = 950000),
dimensions = list(
list(range = c(~round(min(Data$MI...AG)),~round(max(Data$MI...AG))),
# constraintrange = c(100000,150000),
label = 'Demand (AF/Yr)', values = round(Data$MI...AG)),
list(range = c((~min(Data$Population)-1000),(~max(Data$Population)+1000)),
label = 'Population', values = Data$Population),
list(range = c(~min(Data$AG_ConversionFactor),~max(Data$AG_ConversionFactor)),
label = 'Decreased Agriculture (%)', values = Data$AG_ConversionFactor),  ## Should this axis be flipped, 100% becomes zero?
list(range = c(~min(Data$Average_GPCD),~max(Data$Average_GPCD)),
label = 'Per capita use (GPCD)', values = Data$Average_GPCD),
list(range = c(~min(Data$ET_Changes),~max(Data$ET_Changes)),
label = 'Added Evapotranspiration (AF/Yr)', values = Data$ET_Changes)  #,
#list(range = c(~min(Data$Secondary_PerCapita_._Change),~max(Data$Secondary_PerCapita_._Change)),
#    label = 'Average Secondary PerCapita % Change', values = Data$Secondary_PerCapita_._Change)
)  )%>%
layout(yaxis = list(title ='M&I + AG Demand (acre-feet)'),
xaxis=list(title='FACTORS'))
##Parallel plot With Selected Demands
plot_ly(data=Data,width = 900, height = 600) %>%
add_trace(type = 'parcoords',
line = list(color = Data$MI...AG,
colorscale = 'Blues',
showscale = TRUE,
reversescale = TRUE,
cmin = 350000,
cmax = 950000),
dimensions = list(
list(range = c(~round(min(Data$MI...AG)),~round(max(Data$MI...AG))),
constraintrange = c(c(492119,492139),c(557831,557851),c(733424,733444),c(366428,366448),c(883840,883860)),
label = 'Demand (AF/Yr)', values = round(Data$MI...AG)),
list(range = c((~min(Data$Population)-1000),(~max(Data$Population)+1000)),
label = 'Population', values = Data$Population),
list(range = c(~min(Data$AG_ConversionFactor),~max(Data$AG_ConversionFactor)),
label = 'Ag Conversion', values = Data$AG_ConversionFactor),
list(range = c(~min(Data$Average_GPCD),~max(Data$Average_GPCD)),
label = 'Average GPCD', values = Data$Average_GPCD),
list(range = c(~min(Data$ET_Changes),~max(Data$ET_Changes)),
label = 'ET Impact (AF/Yr)', values = Data$ET_Changes)  #,
#list(range = c(~min(Data$Secondary_PerCapita_._Change),~max(Data$Secondary_PerCapita_._Change)),
#    label = 'Average Secondary PerCapita % Change', values = Data$Secondary_PerCapita_._Change)
)  )%>%
layout(yaxis = list(title ='M&I + AG Demand (acre-feet)'),
xaxis=list(title='FACTORS'))
#lines
plot_ly(data =DD_MIN , x=DD_MIN$Year, y=DD_MIN$MI...AG,type='scatter',mode = 'lines',name="Min Demand",
line= list(color= 'blue',width =3))%>%
add_trace(x=DD_MAX$Year,y=DD_MAX$MI...AG,name= "Max Demand",line= list(color='red',width = 3))%>%
layout(yaxis = list(title ='M&I + AG Demand (acre-feet)'),
showlegend =T,title='Demand Scenarios Range',
xaxis=list(title='Year',tickvals=list(2015,2070,2150),
ticktext=list('2015','2070','2150'),tickmode="array"))
### Contour plot
p<-plot_ly(data=Data,x = Data$Year, y = Data$Average_PerCapita_._Change,type = 'contour',
z = Data$MI...AG,contours = list(showlabels = TRUE),showscale = TRUE,
colors = c('white','lightblue','purple'))%>%
layout(yaxis = list(title='Avg Reduced Per Capita % Change',tickformat = '.1f',showticklabels=T),
xaxis = list(title='Year'),
showlegend = T,name='Demand',title='Demand (AF/Year)')
