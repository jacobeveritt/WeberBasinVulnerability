colnames(Months,"Months")
Months<- data.frame(Months[(11:369)],"Month")
Months<- data.frame(Months[(11:369)],"Month")
Months<- data.frame(Months[(11:369)])
Months <- rep(c(1:12),31)
Months<- data.frame(Months[(11:369)])
Month$Month<-Months$Months..11.369..
rename(Months[1],"Months")
rename(Months[1],old="Months..11.369..","Months")
colnames(Months)[1] <- "Months"
#Create Years
Years <- c(0:372)
i=1
j=1
while (j<=31) {
Years[(i:(i+11))] <- rep((j-1),12)
i=i+12
j=j+1
}
Years<- Years[(11:369)]
#Add months and Years column
Tot_Mnthly_Inflow <-Months$Months
Tot_Mnthly_Inflow$Years <- Years
Years<- data.frame(Years[(11:369)])
#Add months and Years column
Tot_Mnthly_Inflow <-Months$Months
Tot_Mnthly_Inflow$Years <- Years
### Clear any existing data or functions.
rm(list=ls())
library("dplyr", lib.loc="~/R/win-library/3.5")
library(readr)
#install.packages("reshape")
library(reshape) #For Melt
library(lubridate) #For month
library(plotly) # For Plots
library(data.table)
####-----------------------------Trace Notation--------------------------------------------------
# Build names of folders output by RiverSmart
TraceNumber <- 6
TraceNumber1 <-6
TraceNumber2 <-3
Tot_TraceNum <- TraceNumber*TraceNumber1*TraceNumber2
Trace_Notation <-c(1:Tot_TraceNum)
i=1
for(TTTNum in 1:TraceNumber){
for(TTNum in 1:TraceNumber1){
for(TNum in 1:TraceNumber2){
TraceDirectory <- paste0(",Trace",TNum)
TraceNum1<- paste0(",Trace",TTNum)
TraceDirectory <- paste0(TraceNum1,TraceDirectory)
TraceNum2 <- paste0("Trace",TTTNum)
TraceDirectory <- paste0(TraceNum2,TraceDirectory)
Trace_Notation[i] <-  TraceDirectory
i=i+1
}
}
}
Trace_Notation_AllData<- rep(Trace_Notation,30)
######## - A -   Compiling Annual Demands  ########
setwd("C:/Users/Jacob/Desktop/WeberBasinVulnerability-DER-Edits/WeberBasinVulnerability-DER-Edits/1 - Scenario Processing/Annual Service Area Demand Scenarios/Output")
Tot_Annual_Demand <- read.csv("SumMIandAG.csv")
Tot_Demand <- data.frame(c(1:108))
i=1
j=1
while (i<=6) {
Tot_Demand[j:(j+17),] <- rep(Tot_Annual_Demand[i,2],(18))
i=i+1
j=j+18
}
#View(Tot_Demand)
colnames(Tot_Demand) <- "Tot Demand"
rownames(Tot_Demand) <- Trace_Notation
Tot_Demand <- data.frame(Tot_Demand)
Tot_Demands_AllData<-rep(Tot_Demand$Tot.Demand,30)
Tot_Demands_AllData<-data.frame(Tot_Demands_AllData)
colnames(Tot_Demands_AllData)<-"Demand"
#add Date column
Date <- seq.Date(as.Date("0000/11/30"),by ="month",length=359)
Months <- rep(c(1:12),31)
Months<- data.frame(Months[(11:369)])
colnames(Months)[1] <- "Months"
#Create Years
Years <- c(0:372)
i=1
j=1
while (j<=31) {
Years[(i:(i+11))] <- rep((j-1),12)
i=i+12
j=j+1
}
Years<- data.frame(Years[(11:369)])
#Add months and Years column
Tot_Mnthly_Inflow <-Months$Months
Tot_Mnthly_Inflow$Years <- Years
### Clear any existing data or functions.
rm(list=ls())
library("dplyr", lib.loc="~/R/win-library/3.5")
library(readr)
#install.packages("reshape")
library(reshape) #For Melt
library(lubridate) #For month
library(plotly) # For Plots
library(data.table)
####-----------------------------Trace Notation--------------------------------------------------
# Build names of folders output by RiverSmart
TraceNumber <- 6
TraceNumber1 <-6
TraceNumber2 <-3
Tot_TraceNum <- TraceNumber*TraceNumber1*TraceNumber2
Trace_Notation <-c(1:Tot_TraceNum)
i=1
for(TTTNum in 1:TraceNumber){
for(TTNum in 1:TraceNumber1){
for(TNum in 1:TraceNumber2){
TraceDirectory <- paste0(",Trace",TNum)
TraceNum1<- paste0(",Trace",TTNum)
TraceDirectory <- paste0(TraceNum1,TraceDirectory)
TraceNum2 <- paste0("Trace",TTTNum)
TraceDirectory <- paste0(TraceNum2,TraceDirectory)
Trace_Notation[i] <-  TraceDirectory
i=i+1
}
}
}
Trace_Notation_AllData<- rep(Trace_Notation,30)
######## - A -   Compiling Annual Demands  ########
setwd("C:/Users/Jacob/Desktop/WeberBasinVulnerability-DER-Edits/WeberBasinVulnerability-DER-Edits/1 - Scenario Processing/Annual Service Area Demand Scenarios/Output")
Tot_Annual_Demand <- read.csv("SumMIandAG.csv")
Tot_Demand <- data.frame(c(1:108))
i=1
j=1
while (i<=6) {
Tot_Demand[j:(j+17),] <- rep(Tot_Annual_Demand[i,2],(18))
i=i+1
j=j+18
}
#View(Tot_Demand)
colnames(Tot_Demand) <- "Tot Demand"
rownames(Tot_Demand) <- Trace_Notation
Tot_Demand <- data.frame(Tot_Demand)
Tot_Demands_AllData<-rep(Tot_Demand$Tot.Demand,30)
Tot_Demands_AllData<-data.frame(Tot_Demands_AllData)
colnames(Tot_Demands_AllData)<-"Demand"
#add Date column
Date <- seq.Date(as.Date("0000/11/30"),by ="month",length=359)
Months <- rep(c(1:12),31)
Months<- data.frame(Months[(11:369)])
colnames(Months)[1] <- "Months"
#Create Years
Years <- c(0:372)
i=1
j=1
while (j<=31) {
Years[(i:(i+11))] <- rep((j-1),12)
i=i+12
j=j+1
}
Years<- data.frame(Years[(11:369)])
colnames(Years)[1] <- "Years"
#Add months and Years column
Tot_Mnthly_Inflow <-Months$Months
Tot_Mnthly_Inflow$Years <- Years$Years
#Add months and Years column
Tot_Mnthly_Inflow <-data.frame(Months$Months)
Tot_Mnthly_Inflow$Years <- Years$Years
#select June 1st values
J1Tot_Inflow<- filter(Tot_Mnthly_Inflow,Months==6)
#Transpose Data
J1Tot_Inflow <- t(J1Tot_Inflow)
J1Tot_Inflow<-data.frame(J1Tot_Inflow)
#Stack columns
Tot_Inflow_AllData <-stack(J1Tot_Inflow[1:108,1:30])
colnames(Tot_Inflow_AllData)[1] <- "Inflow"
colnames(Tot_Inflow_AllData)[2] <- "Year"
##Total Sedimentation Changes on Reservoir
setwd("~/GitHub/WeberBasinVulnerability/WeberBasinVulnerability/3 - Post Processing")
Tot_Sed <- read.csv("Sedimentation.csv")
#________Delete this portion later______
Tot_Sed <- Tot_Sed[,2]
Tot_Sed <-data.frame(Tot_Sed)
colnames(Tot_Sed) <- "Tot Sed"
rownames(Tot_Sed) <- Trace_Notation
Tot_Sediment_AllData<- rep(Tot_Sed$`Tot Sed`,30)
Tot_Sediment_AllData<- data.frame(Tot_Sediment_AllData)
colnames(Tot_Sediment_AllData) <- "Sedimentation"
##################   Compile input data    ##################################
#Create Data frame
Inputs<- data.frame(Tot_Demand_AllData)
##################   Compile input data    ##################################
#Create Data frame
Inputs<- data.frame(Tot_Demands_AllData)
Inputs$Inflow <- Tot_Inflow_AllData
Inputs$Sedimentation <- Tot_Sediment_AllData
Inputs$Trace_Notation <- Trace_Notation
#Number
Inputs$Number<-c(1:3240)
Inputs <- data.frame(Inputs)
#Fix Column Names
names(Inputs)<- c("Demand","Inflow","Year","Sedimentation","Traces")
View(Inputs)
### Clear any existing data or functions.
rm(list=ls())
library("dplyr", lib.loc="~/R/win-library/3.5")
library(readr)
#install.packages("reshape")
library(reshape) #For Melt
library(lubridate) #For month
library(plotly) # For Plots
library(data.table)
####-----------------------------Trace Notation--------------------------------------------------
# Build names of folders output by RiverSmart
TraceNumber <- 6
TraceNumber1 <-6
TraceNumber2 <-3
Tot_TraceNum <- TraceNumber*TraceNumber1*TraceNumber2
Trace_Notation <-c(1:Tot_TraceNum)
i=1
for(TTTNum in 1:TraceNumber){
for(TTNum in 1:TraceNumber1){
for(TNum in 1:TraceNumber2){
TraceDirectory <- paste0(",Trace",TNum)
TraceNum1<- paste0(",Trace",TTNum)
TraceDirectory <- paste0(TraceNum1,TraceDirectory)
TraceNum2 <- paste0("Trace",TTTNum)
TraceDirectory <- paste0(TraceNum2,TraceDirectory)
Trace_Notation[i] <-  TraceDirectory
i=i+1
}
}
}
Trace_Notation_AllData<- rep(Trace_Notation,30)
######## - A -   Compiling Annual Demands  ########
setwd("C:/Users/Jacob/Desktop/WeberBasinVulnerability-DER-Edits/WeberBasinVulnerability-DER-Edits/1 - Scenario Processing/Annual Service Area Demand Scenarios/Output")
Tot_Annual_Demand <- read.csv("SumMIandAG.csv")
Tot_Demand <- data.frame(c(1:108))
i=1
j=1
while (i<=6) {
Tot_Demand[j:(j+17),] <- rep(Tot_Annual_Demand[i,2],(18))
i=i+1
j=j+18
}
#View(Tot_Demand)
colnames(Tot_Demand) <- "Tot Demand"
rownames(Tot_Demand) <- Trace_Notation
Tot_Demand <- data.frame(Tot_Demand)
Tot_Demands_AllData<-rep(Tot_Demand$Tot.Demand,30)
Tot_Demands_AllData<-data.frame(Tot_Demands_AllData)
colnames(Tot_Demands_AllData)<-"Demand"
#add Date column
Date <- seq.Date(as.Date("0000/11/30"),by ="month",length=359)
### Clear any existing data or functions.
rm(list=ls())
library("dplyr", lib.loc="~/R/win-library/3.5")
library(readr)
#install.packages("reshape")
library(reshape) #For Melt
library(lubridate) #For month
library(plotly) # For Plots
library(data.table)
####-----------------------------Trace Notation--------------------------------------------------
# Build names of folders output by RiverSmart
TraceNumber <- 6
TraceNumber1 <-6
TraceNumber2 <-3
Tot_TraceNum <- TraceNumber*TraceNumber1*TraceNumber2
Trace_Notation <-c(1:Tot_TraceNum)
i=1
for(TTTNum in 1:TraceNumber){
for(TTNum in 1:TraceNumber1){
for(TNum in 1:TraceNumber2){
TraceDirectory <- paste0(",Trace",TNum)
TraceNum1<- paste0(",Trace",TTNum)
TraceDirectory <- paste0(TraceNum1,TraceDirectory)
TraceNum2 <- paste0("Trace",TTTNum)
TraceDirectory <- paste0(TraceNum2,TraceDirectory)
Trace_Notation[i] <-  TraceDirectory
i=i+1
}
}
}
Trace_Notation_AllData<- rep(Trace_Notation,30)
######## - A -   Compiling Annual Demands  ########
setwd("C:/Users/Jacob/Desktop/WeberBasinVulnerability-DER-Edits/WeberBasinVulnerability-DER-Edits/1 - Scenario Processing/Annual Service Area Demand Scenarios/Output")
Tot_Annual_Demand <- read.csv("SumMIandAG.csv")
Tot_Demand <- data.frame(c(1:108))
i=1
j=1
while (i<=6) {
Tot_Demand[j:(j+17),] <- rep(Tot_Annual_Demand[i,2],(18))
i=i+1
j=j+18
}
#View(Tot_Demand)
colnames(Tot_Demand) <- "Tot Demand"
rownames(Tot_Demand) <- Trace_Notation
Tot_Demand <- data.frame(Tot_Demand)
Tot_Demand_AllData<-rep(Tot_Demand$Tot.Demand,30)
Tot_Demand_AllData<-data.frame(Tot_Demand_AllData)
colnames(Tot_Demand_AllData)<-"Demand"
######## - B -  Monthly Inflows to June1 Data  ########
#Move into the local input directory
#setwd("../2 - RiverWare Modeling/Scenario")
# Switch into local directory
setwd("~/GitHub/WeberBasinVulnerability/WeberBasinVulnerability/2 - RiverWare Modeling/Scenario")
#Input Monthly data from RiverSmart Analysis
Tot_Mnthly_Inflow <-read.csv("Trace1,Trace1,Trace1/Total Inflows.csv")
i=1
for(TTTNum in 1:TraceNumber){
for(TTNum in 1:TraceNumber1){
for(TNum in 1:TraceNumber2){
TraceDirectory <- paste0(",Trace",TNum)
TraceDirectory <-paste0 (TraceDirectory,"/Total Inflows.csv")
TraceNum1<- paste0(",Trace",TTNum)
TraceDirectory <- paste0(TraceNum1,TraceDirectory)
TraceNum2 <- paste0("Trace",TTTNum)
TraceDirectory <- paste0(TraceNum2,TraceDirectory)
Location <- TraceDirectory
Temp_Storage <- read.csv(Location)
Tot_Mnthly_Inflow[,i] <- Temp_Storage[,5]
colnames(Tot_Mnthly_Inflow)[i] <-  TraceDirectory
i=i+1
}
}
}
Tot_Mnthly_Inflow <- data.frame(Tot_Mnthly_Inflow)
#add Date column
Date <- seq.Date(as.Date("0000/11/30"),by ="month",length=359)
Months <- rep(c(1:12),31)
Months<- Months[(11:369)]
#Create Years
Years <- c(0:372)
i=1
j=1
while (j<=31) {
Years[(i:(i+11))] <- rep((j-1),12)
i=i+12
j=j+1
}
Years<- Years[(11:369)]
#Add months and Years column
Tot_Mnthly_Inflow$Months <-Months
Tot_Mnthly_Inflow$Years <- Years
#select June 1st values
J1Tot_Inflow<- filter(Tot_Mnthly_Inflow,Months==6)
#Transpose Data
J1Tot_Inflow <- t(J1Tot_Inflow)
J1Tot_Inflow<-data.frame(J1Tot_Inflow)
#Stack columns
Tot_Inflow_AllData <-stack(J1Tot_Inflow[1:108,1:30])
colnames(Tot_Inflow_AllData)[1] <- "Inflow"
colnames(Tot_Inflow_AllData)[2] <- "Year"
##Total Sedimentation Changes on Reservoir
setwd("~/GitHub/WeberBasinVulnerability/WeberBasinVulnerability/3 - Post Processing")
Tot_Sed <- read.csv("Sedimentation.csv")
#________Delete this portion later______
Tot_Sed <- Tot_Sed[,2]
Tot_Sed <-data.frame(Tot_Sed)
colnames(Tot_Sed) <- "Tot Sed"
rownames(Tot_Sed) <- Trace_Notation
Tot_Sediment_AllData<- rep(Tot_Sed$`Tot Sed`,30)
Tot_Sediment_AllData<- data.frame(Tot_Sediment_AllData)
colnames(Tot_Sediment_AllData) <- "Sedimentation"
##################   Compile input data    ##################################
#Create Data frame
Inputs<- data.frame(Tot_Demand_AllData)
Inputs$Inflow <- Tot_Inflow_AllData
Inputs$Sedimentation <- Tot_Sediment_AllData
Inputs$Trace_Notation <- Trace_Notation
#Number
Inputs$Number<-c(1:3240)
Inputs <- data.frame(Inputs)
#Fix Column Names
names(Inputs)<- c("Demand","Inflow","Year","Sedimentation","Traces","Number")
View(Inputs)
##################################  - 2 - Output data ########################################################
setwd("~/GitHub/WeberBasinVulnerability/WeberBasinVulnerability/2 - RiverWare Modeling/Scenario")
Tot_Mnthly_Stor <- read.csv("Trace1,Trace1,Trace1/Total Storage_NO EVAP.csv")
Tot_Mnthly_Short <-read.csv("Trace1,Trace1,Trace1/Total Shortages.csv")
#Create TraceFolder Naming lookup for Values with No Evap.
#Move into the local input directory
#setwd("../2 - RiverWare Modeling/Scenario")
# Switch into local directory
setwd("~/GitHub/WeberBasinVulnerability/WeberBasinVulnerability/2 - RiverWare Modeling/Scenario")
##### Total Storage #####
i=1
for(TTTNum in 1:TraceNumber){
for(TTNum in 1:TraceNumber1){
for(TNum in 1:TraceNumber2){
TraceDirectory <- paste0(",Trace",TNum)
TraceDirectory <-paste0 (TraceDirectory,"/Total Storage_NO EVAP.csv")
TraceNum1<- paste0(",Trace",TTNum)
TraceDirectory <- paste0(TraceNum1,TraceDirectory)
TraceNum2 <- paste0("Trace",TTTNum)
TraceDirectory <- paste0(TraceNum2,TraceDirectory)
Location <- TraceDirectory
Temp_Storage <- read.csv(Location)
Tot_Mnthly_Stor[,i] <- Temp_Storage[,5]
colnames(Tot_Mnthly_Stor)[i] <-  TraceDirectory
i=i+1
}
}
}
Tot_Mnthly_Stor <- data.frame(Tot_Mnthly_Stor)
#### Storage ####
#Add months and Years column to Mthly Storage
Tot_Mnthly_Stor$Months <-Months
Tot_Mnthly_Stor$Years  <-Years
#select June 1st values
J1Tot_Stor<- filter(Tot_Mnthly_Stor,Months==6)
#Transpose Data
J1Tot_Stor <- t(J1Tot_Stor)
J1Tot_Stor <- data.frame(J1Tot_Stor)
#Stack columns
Tot_Stor_AllData <-stack(J1Tot_Stor[1:108,1:30])
#Remove Year Column
Tot_Stor_AllData<-data.frame(Tot_Stor_AllData$values)
#Create Column names
colnames(Tot_Stor_AllData) <- "Storage"
##### Total Shortages #####
i=1
for(TTTNum in 1:TraceNumber){
for(TTNum in 1:TraceNumber1){
for(TNum in 1:TraceNumber2){
TraceDirectory <- paste0(",Trace",TNum)
TraceDirectory <-paste0 (TraceDirectory,"/Total Shortages.csv")
TraceNum1<- paste0(",Trace",TTNum)
TraceDirectory <- paste0(TraceNum1,TraceDirectory)
TraceNum2 <- paste0("Trace",TTTNum)
TraceDirectory <- paste0(TraceNum2,TraceDirectory)
Location <- TraceDirectory
Temp_Storage <- read.csv(Location)
Tot_Mnthly_Short[,i] <- Temp_Storage[,5]
colnames(Tot_Mnthly_Short)[i] <-  TraceDirectory
i=i+1
}
}
}
Tot_Mnthly_Short <- data.frame(Tot_Mnthly_Short)
#### Shortage ####
#Add months and Years column to Mthly Storage
Tot_Mnthly_Short$Months <-Months
Tot_Mnthly_Short$Years  <-Years
#select June 1st values
J1Tot_Short<- filter(Tot_Mnthly_Short,Months==6)
#Transpose Data
J1Tot_Short <- t(J1Tot_Short)
J1Tot_Short <- data.frame(J1Tot_Short)
#Stack columns
Tot_Short_AllData <-stack(J1Tot_Short[1:108,1:30])
Tot_Short_AllData <- data.frame(Tot_Short_AllData$Shortage)
#Create Column names
colnames(Tot_Short_AllData) <- "Shortage"
View(Tot_Short_AllData)
##### Total Shortages #####
i=1
for(TTTNum in 1:TraceNumber){
for(TTNum in 1:TraceNumber1){
for(TNum in 1:TraceNumber2){
TraceDirectory <- paste0(",Trace",TNum)
TraceDirectory <-paste0 (TraceDirectory,"/Total Shortages.csv")
TraceNum1<- paste0(",Trace",TTNum)
TraceDirectory <- paste0(TraceNum1,TraceDirectory)
TraceNum2 <- paste0("Trace",TTTNum)
TraceDirectory <- paste0(TraceNum2,TraceDirectory)
Location <- TraceDirectory
Temp_Storage <- read.csv(Location)
Tot_Mnthly_Short[,i] <- Temp_Storage[,5]
colnames(Tot_Mnthly_Short)[i] <-  TraceDirectory
i=i+1
}
}
}
Tot_Mnthly_Short <- data.frame(Tot_Mnthly_Short)
#### Shortage ####
#Add months and Years column to Mthly Storage
Tot_Mnthly_Short$Months <-Months
Tot_Mnthly_Short$Years  <-Years
View(Tot_Mnthly_Short)
#select June 1st values
J1Tot_Short<- filter(Tot_Mnthly_Short,Months==6)
#Transpose Data
J1Tot_Short <- t(J1Tot_Short)
J1Tot_Short <- data.frame(J1Tot_Short)
#Stack columns
Tot_Short_AllData <-stack(J1Tot_Short[1:108,1:30])
View(Tot_Short_AllData)
Tot_Short_AllData <- data.frame(Tot_Short_AllData[1])
#Create Column names
colnames(Tot_Short_AllData) <- "Shortage"
Outputs <- Tot_Stor_AllData
Outputs$Shortage <- Tot_Short_AllData$Shortage
# Add Trace Notation
Outputs$Trace_Notation <-Trace_Notation
#Number
Outputs$Number<-c(1:3240)
Outputs<-data.frame(Outputs)
AllDataDF <- merge(Inputs,Outputs,by="Number")
################# Select Data -- By Sedimentation Level########################
Data_NoSed <- filter(AllDataDF,Sedimentation==0)
Data_10Perc <- filter(AllDataDF,Sedimentation==10)
Data_30Perc <- filter(AllDataDF,Sedimentation==30)
#Year
yrs<-data.frame(rep(1,36))
i=2
while (i<=30) {
yrs[,i]<-data.frame(rep(i,36))
i=i+1
}
yrs<-stack(yrs)
Data_NoSed$Year<-yrs$values
Data<- Data_NoSed
