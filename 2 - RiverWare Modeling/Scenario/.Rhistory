i=1
for(TTTNum in 1:TraceNumber){
for(TTNum in 1:TraceNumber1){
for(TNum in 1:TraceNumber2){
TraceDirectory <- paste0(",Trace",TNum)
TraceDirectory <-paste0 (TraceDirectory,"/Total Inflows.csv")
TraceNum1<- paste0(",Trace",TTNum)
TraceDirectory <- paste0(TraceNum1,TraceDirectory)
TraceNum2 <- paste0("Trace",TTTNum)
TraceDirectory <- paste0(TraceNum2,TraceDirectory)
Location <- TraceDirectory
Temp_Storage <- read.csv(Location)
Tot_Mnthly_Inflow[,i] <- Temp_Storage[,5]
colnames(Tot_Mnthly_Inflow)[i] <-  TraceDirectory
i=i+1
}
}
}
Tot_Mnthly_Inflow <- data.frame(Tot_Mnthly_Inflow)
View(Tot_Mnthly_Inflow)
View(Tot_Mnthly_Inflow)
######## - A -   Compiling Annual Demands  ########
setwd("C:/Users/Jacob/Desktop/WeberBasinVulnerability-DER-Edits/WeberBasinVulnerability-DER-Edits/1 - Scenario Processing/Annual Service Area Demand Scenarios/Output")
Tot_Annual_Demand <- read.csv("SumMIandAG.csv")
#add Date column
Date <- seq.Date(as.Date("0000/11/30"),by ="month",length=359)
Months <- rep(c(1:12),31)
Months<- Months[(11:369)]
#Create Years
Years <- c(0:372)
i=1
j=1
while (j<=31) {
Years[(i:(i+11))] <- rep((j-1),12)
i=i+12
j=j+1
}
Years<- Years[(11:369)]
#Add months and Years column
Tot_Mnthly_Inflow$Months <-Months
Tot_Mnthly_Inflow$Years <- Years
#select June 1st values
Tot_J1_Inflow<- filter(Tot_Mnthly_Inflow,Months==6)
#Find Total Inflows per each Combination of Traces (Mean of Each column)
NumberofScenarios<-108
#select June 1st values
J1Tot_Inflow<- filter(Tot_Mnthly_Inflow,Months==6)
View(J1Tot_Inflow)
#Transpose Data
J1Tot_Inflow <- t(Tot_Inflow)
#select June 1st values
J1Tot_Inflow<- filter(Tot_Mnthly_Inflow,Months==6)
#Transpose Data
J1Tot_Inflow <- t(J1Tot_Inflow)
#Stack columns
Tot_Inflow_AllData <-stack(J1Tot_Inflow)
#Stack columns
Tot_Inflow_AllData <-stack(J1Tot_Inflow)
#Stack columns
Tot_Inflow_AllData <-stack(J1Tot_Inflow[1:108,1:30])
J1Tot_Inflow<-data.frame(J1Tot_Inflow)
#Stack columns
Tot_Inflow_AllData <-stack(J1Tot_Inflow[1:108,1:30])
colnames(J1Tot_Inflow) <- "Inflow"
View(Tot_Inflow_AllData)
colnames(J1Tot_Inflow[1]) <- "Inflow"
colnames(J1Tot_Inflow)[1] <- "Inflow"
colnames(Tot_Inflow_AllData)[1] <- "Inflow"
colnames(Tot_Inflow_AllData)[2] <- "Year"
##Total Sedimentation Changes on Reservoir
setwd("~/GitHub/WeberBasinVulnerability/WeberBasinVulnerability/3 - Post Processing")
Tot_Sed <- read.csv("Sedimentation.csv")
#________Delete this portion later______
Tot_Sed <- Tot_Sed[,2]
Tot_Sed <-data.frame(Tot_Sed)
colnames(Tot_Sed) <- "Tot Sed"
rownames(Tot_Sed) <- Trace_Notation
##################   Compile input data    ##################################
#Create Data frame
Inputs<- data.frame(Tot_Demand)
Tot_Sed_AllData<- rep(Tot_Sed,30)
View(Tot_Sed_AllData)
Tot_Sed <-data.frame(Tot_Sed)
colnames(Tot_Sed) <- "Tot Sed"
rownames(Tot_Sed) <- Trace_Notation
Tot_Sed_AllData<- rep(Tot_Sed$`Tot Sed`,30)
Tot_Sedimentation_AllData<- rep(Tot_Sed$`Tot Sed`,30)
View(Tot_Sedimentation_AllData)
Tot_Sed_AllData<- rep(Tot_Sed$`Tot Sed`,30)
Tot_Sediment_AllData<- rep(Tot_Sed$`Tot Sed`,30)
colnames(Tot_Sediment_AllData) <- "Sedimentation"
Tot_Sediment_AllData<- data.frame(Tot_Sediment_AllData)
colnames(Tot_Sediment_AllData) <- "Sedimentation"
##################   Compile input data    ##################################
#Create Data frame
Inputs<- data.frame(Tot_Demand_AllData)
Inputs$Inflow <- Tot_Inflow_AllData
Inputs$Sedimentation <- Tot_Sediment_AllData
View(Tot_Demand_AllData)
Tot_Demand_AllData<-rep(Tot_Demand$Tot.Demand,30)
Tot_Demands_AllData<-rep(Tot_Demand$Tot.Demand,30)
View(Tot_Demands_AllData)
Tot_Demands_AllData<-data.frame(Tot_Demands_AllData)
colnames(Tot_Demands_AllData)<-"Demand"
##################   Compile input data    ##################################
#Create Data frame
Inputs<- data.frame(Tot_Demand_AllData)
Inputs$Inflow <- Tot_Inflow_AllData
Inputs$Sedimentation <- Tot_Sediment_AllData
Inputs$Trace_Notation <- Trace_Notation
Inputs <- data.frame(Inputs)
View(Inputs)
#Fix Column Names
names(Inputs)<- c("Demand","Inflow","Year","Sedimentation","Traces")
##################################  - 2 - Output data ########################################################
setwd("~/GitHub/WeberBasinVulnerability/WeberBasinVulnerability/2 - RiverWare Modeling/Scenario")
Tot_Mnthly_Stor <- read.csv("Trace1,Trace1,Trace1/Total Storage_NO EVAP.csv")
Tot_Mnthly_Short <-read.csv("Trace1,Trace1,Trace1/Total Shortages.csv")
#Create TraceFolder Naming lookup for Values with No Evap.
#Move into the local input directory
#setwd("../2 - RiverWare Modeling/Scenario")
# Switch into local directory
setwd("~/GitHub/WeberBasinVulnerability/WeberBasinVulnerability/2 - RiverWare Modeling/Scenario")
#### Storage ####
#Add months and Years column to Mthly Storage
Tot_Mnthly_Stor$Months <-Months
Tot_Mnthly_Stor$Years  <-Years
#select June 1st values
Tot_J1_Stor<- filter(Tot_Mnthly_Stor,Months==6)
#Find Total Storage per each Combination of Traces (Sum Each column)
NumberofScenarios<-108
i=1
Tot_Stor <- Tot_J1_Stor[1,1:108]
##################################  - 2 - Output data ########################################################
setwd("~/GitHub/WeberBasinVulnerability/WeberBasinVulnerability/2 - RiverWare Modeling/Scenario")
Tot_Mnthly_Stor <- read.csv("Trace1,Trace1,Trace1/Total Storage_NO EVAP.csv")
Tot_Mnthly_Short <-read.csv("Trace1,Trace1,Trace1/Total Shortages.csv")
#Create TraceFolder Naming lookup for Values with No Evap.
#Move into the local input directory
#setwd("../2 - RiverWare Modeling/Scenario")
# Switch into local directory
setwd("~/GitHub/WeberBasinVulnerability/WeberBasinVulnerability/2 - RiverWare Modeling/Scenario")
##### Total Storage #####
i=1
for(TTTNum in 1:TraceNumber){
for(TTNum in 1:TraceNumber1){
for(TNum in 1:TraceNumber2){
TraceDirectory <- paste0(",Trace",TNum)
TraceDirectory <-paste0 (TraceDirectory,"/Total Storage_NO EVAP.csv")
TraceNum1<- paste0(",Trace",TTNum)
TraceDirectory <- paste0(TraceNum1,TraceDirectory)
TraceNum2 <- paste0("Trace",TTTNum)
TraceDirectory <- paste0(TraceNum2,TraceDirectory)
Location <- TraceDirectory
Temp_Storage <- read.csv(Location)
Tot_Mnthly_Stor[,i] <- Temp_Storage[,5]
colnames(Tot_Mnthly_Stor)[i] <-  TraceDirectory
i=i+1
}
}
}
Tot_Mnthly_Stor <- data.frame(Tot_Mnthly_Stor)
#### Storage ####
#Add months and Years column to Mthly Storage
Tot_Mnthly_Stor$Months <-Months
Tot_Mnthly_Stor$Years  <-Years
#select June 1st values
Tot_J1_Stor<- filter(Tot_Mnthly_Stor,Months==6)
#select June 1st values
J1Tot_Stor<- filter(Tot_Mnthly_Stor,Months==6)
#Transpose Data
Tot_Stor_AllData <- t(J1Tot_Stor)
View(Tot_Stor_AllData)
Tot_Stor_AllData <- data.frame(Tot_Stor_AllData)
#select June 1st values
J1Tot_Stor<- filter(Tot_Mnthly_Stor,Months==6)
#Transpose Data
J1Tot_Stor <- t(J1Tot_Stor)
J1Tot_Stor <- data.frame(J1Tot_Stor)
#Stack columns
Tot_Stor_AllData <-stack(J1Tot_J1Tot_Stor[1:108,1:30])
#Stack columns
Tot_Stor_AllData <-stack(J1Tot_Stor[1:108,1:30])
#Create Column names
colnames(Tot_Stor_AllData) <- "Storage"
rownames(Tot_Stor_AllData) <- Trace_Notation
Tot_Stor_AllData <- data.frame(Tot_Stor_AllData)
##### Total Shortages #####
i=1
for(TTTNum in 1:TraceNumber){
for(TTNum in 1:TraceNumber1){
for(TNum in 1:TraceNumber2){
TraceDirectory <- paste0(",Trace",TNum)
TraceDirectory <-paste0 (TraceDirectory,"/Total Shortages.csv")
TraceNum1<- paste0(",Trace",TTNum)
TraceDirectory <- paste0(TraceNum1,TraceDirectory)
TraceNum2 <- paste0("Trace",TTTNum)
TraceDirectory <- paste0(TraceNum2,TraceDirectory)
Location <- TraceDirectory
Temp_Storage <- read.csv(Location)
Tot_Mnthly_Short[,i] <- Temp_Storage[,5]
colnames(Tot_Mnthly_Short)[i] <-  TraceDirectory
i=i+1
}
}
}
Tot_Mnthly_Short <- data.frame(Tot_Mnthly_Short)
#### Shortage ####
#Add months and Years column to Mthly Storage
Tot_Mnthly_Short$Months <-Months
Tot_Mnthly_Short$Years  <-Years
#select June 1st values
J1Tot_Short<- filter(Tot_Mnthly_Short,Months==6)
#Transpose Data
J1Tot_Short <- t(J1Tot_Short)
J1Tot_Short <- data.frame(J1Tot_Short)
#Stack columns
Tot_Short_AllData <-stack(J1Tot_Short[1:108,1:30])
#Create Column names
colnames(Tot_Short_AllData) <- "Shortage"
Tot_Short_AllData <- data.frame(Tot_Short_AllData)
Outputs <- Tot_Stor
Outputs <- Tot_Stor_AllData
Outputs$Shortage <- Tot_Short_AllData$Shortage
# Add Trace Notation
Outputs$Traces <-Trace_Notation
AllDataDF <- merge(Inputs,Outputs,by="Traces")
Inputs$Trace_Notation <- Trace_Notation
Outputs <- Tot_Stor_AllData
Outputs$Shortage <- Tot_Short_AllData$Shortage
# Add Trace Notation
Outputs$Trace_Notation <-Trace_Notation
AllDataDF <- merge(Inputs,Outputs,by="Traces")
View(Outputs)
#Number
Inputs$Number<-c(1:3240)
Inputs <- data.frame(Inputs)
Outputs <- Tot_Stor_AllData
Outputs$Shortage <- Tot_Short_AllData$Shortage
# Add Trace Notation
Outputs$Trace_Notation <-Trace_Notation
#Number
Outputs$Number<-c(1:3240)
Outputs<-data.frame(Outputs)
AllDataDF <- merge(Inputs,Outputs,by="Traces")
AllDataDF <- merge(Inputs,Outputs,by="Number")
## Filter Sedimentation
Data_NoSed <- filter(AllDataDF,Sedimentation==0)
Data_10Perc <- filter(AllDataDF,Sedimentation==10)
Data_30Perc <- filter(AllDataDF,Sedimentation==30)
Data <- Data_NoSed
x=Data$Demand
y=Data$Inflow
z=Data$Storage
##Total Sedimentation Changes on Reservoir
J1Tot_Sed<-Tot_Sed
#################### Reliability  Metric for Storage ########################
#  -- Metrics based on WBWCD - Drought Contigency Plan Drought Levels --  #
# See Table 3-2 : Hot/Dry Projected Drought for Drought Levels
# Moderate Total Basin Storage Drought Level 340K to 380K -- Yellow  ("Less than 380K")
# Severe Total Basin Storage Drought Level 280K to 340K -- Orange    ("Less than 340K")
# Extreme Total Basin Storage Drought Level less than 280K -- Red    ("Less than 280K")
ModerateLevel<- 380000
SevereLevel <- 340000
ExtremeLevel<-280000
#################### Reliability  Metric for Storage ########################
#  -- Metrics based on WBWCD - Drought Contigency Plan Drought Levels --  #
# See Table 3-2 : Hot/Dry Projected Drought for Drought Levels
# Moderate Total Basin Storage Drought Level 340K to 380K -- Yellow  ("Less than 380K")
# Severe Total Basin Storage Drought Level 280K to 340K -- Orange    ("Less than 340K")
# Extreme Total Basin Storage Drought Level less than 280K -- Red    ("Less than 280K")
ModerateLevel<- 380000
SevereLevel <- 340000
ExtremeLevel<-280000
Storage_Metrics <- data.frame(Data[,5])
View(Data)
Storage_Metrics <- data.frame(Data$Storage)
Storage_Rel_Metrics_Moderate <- data.frame(Data$Storage)
Storage_Rel_Metrics_Severe <- data.frame(Data$Storage)
Storage_Rel_Metrics_Extreme <- data.frame(Data$Storage)
#Moderate
i=1
while (i<=3240) {
Storage_Rel_Metrics_Moderate[i,] <- ifelse(J1Data[i,4]>ModerateLevel,1,0)
i=i+1
}
#Moderate
i=1
while (i<=3240) {
Storage_Rel_Metrics_Moderate[i,] <- ifelse(Data[i,7]>ModerateLevel,1,0)
i=i+1
}
#Severe
i=1
while (i<=3240) {
Storage_Rel_Metrics_Severe[i,] <- ifelse(J1Data[i,7]>SevereLevel,1,0)
i=i+1
}
#Severe
i=1
while (i<=3240) {
Storage_Rel_Metrics_Severe[i,] <- ifelse(Data[i,7]>SevereLevel,1,0)
i=i+1
}
#Extreme
i=1
while (i<=3240) {
Storage_Rel_Metrics_Extreme[i,] <- ifelse(Data[i,7]>ExtremeLevel,1,0)
i=i+1
}
## Calculate Reliability
Stor_Rel_Moderate <- data.frame(Data[,7])
Stor_Rel_Severe <- data.frame(Data[,7])
Stor_Rel_Extreme <- data.frame(Data[,7])
Data$ModerateStorageR <-Storage_Rel_Metrics_Moderate
#Moderate
i=1
while (i<=1080) {
Storage_Rel_Metrics_Moderate[i,] <- ifelse(Data[i,7]>ModerateLevel,1,0)
i=i+1
}
#Severe
i=1
while (i<=1080) {
Storage_Rel_Metrics_Severe[i,] <- ifelse(Data[i,7]>SevereLevel,1,0)
i=i+1
}
#Moderate
i=1
while (i<=1080) {
Storage_Rel_Metrics_Moderate[i,] <- ifelse(Data[i,7]>ModerateLevel,1,0)
i=i+1
}
#Severe
i=1
while (i<=1080) {
Storage_Rel_Metrics_Severe[i,] <- ifelse(Data[i,7]>SevereLevel,1,0)
i=i+1
}
#Extreme
i=1
while (i<=1080) {
Storage_Rel_Metrics_Extreme[i,] <- ifelse(Data[i,7]>ExtremeLevel,1,0)
i=i+1
}
Data$ModerateStorageR <-Storage_Rel_Metrics_Moderate
ExtremeLevel<-280000
Storage_Metrics <- data.frame(Data$Storage)
Storage_Rel_Metrics_Moderate <- data.frame(Data$Storage)
Storage_Rel_Metrics_Severe <- data.frame(Data$Storage)
Storage_Rel_Metrics_Extreme <- data.frame(Data$Storage)
#Moderate
i=1
while (i<=1080) {
Storage_Rel_Metrics_Moderate[i,] <- ifelse(Data[i,7]>ModerateLevel,1,0)
i=i+1
}
#Severe
i=1
while (i<=1080) {
Storage_Rel_Metrics_Severe[i,] <- ifelse(Data[i,7]>SevereLevel,1,0)
i=i+1
}
#Extreme
i=1
while (i<=1080) {
Storage_Rel_Metrics_Extreme[i,] <- ifelse(Data[i,7]>ExtremeLevel,1,0)
i=i+1
}
Data$ModerateStorageR <-Storage_Rel_Metrics_Moderate
## Calculate Reliability
Stor_Rel_Moderate <- data.frame(Data[,7])
Data$SevereStorageR <- Storage_Rel_Metrics_Severe
Data$ExtremStorageR<- Storage_Rel_Metrics_Extreme
## Calculate Reliability
Stor_Rel_Moderate <- data.frame(Data[,7])
Stor_Rel_Severe <- data.frame(Data[,7])
Stor_Rel_Extreme <- data.frame(Data[,7])
#Moderate
i=1
while (i<=1080) {
Storage_Rel_Metrics_Moderate[i,] <- ifelse(Data[i,7]>ModerateLevel,1,0)
i=i+1
}
warnings()
Data[,7]
Data
Data[,6]
#Moderate
i=1
while (i<=1080) {
Storage_Rel_Metrics_Moderate[i,] <- ifelse(Data[i,6]>ModerateLevel,1,0)
i=i+1
}
#Severe
i=1
while (i<=1080) {
Storage_Rel_Metrics_Severe[i,] <- ifelse(Data[i,6]>SevereLevel,1,0)
i=i+1
}
#Extreme
i=1
while (i<=1080) {
Storage_Rel_Metrics_Extreme[i,] <- ifelse(Data[i,6]>ExtremeLevel,1,0)
i=i+1
}
Data$ModerateStorageR <-Storage_Rel_Metrics_Moderate
Data$SevereStorageR <- Storage_Rel_Metrics_Severe
Data$ExtremStorageR<- Storage_Rel_Metrics_Extreme
## Calculate Reliability
Stor_Rel_Moderate <- data.frame(Data[,7])
Stor_Rel_Severe <- data.frame(Data[,7])
Stor_Rel_Extreme <- data.frame(Data[,7])
#Axis assignment
x=Data$Demand
y=Data$Inflow
# Moderate Demand Level
z=Storage_Rel_Metrics_Moderate$Data...5.
p <- plot_ly(
x = x,
y = y,
z = z , type = "contour")%>%
layout(title = "Moderate Storage Level by Color",
xaxis = list(title ="Demand"),
yaxis = list(title = "Inflows"))
p
#Axis assignment
x=Data$Demand
y=Data$Inflow
# Moderate Demand Level
z=Data$ModerateStorageR
p <- plot_ly(
x = x,
y = y,
z = z , type = "contour")%>%
layout(title = "Moderate Storage Level by Color",
xaxis = list(title ="Demand"),
yaxis = list(title = "Inflows"))
p
p <- plot_ly(
x = x,
y = y$Inflow,
z = z$Data.Storage , type = "contour")%>%
layout(title = "Moderate Storage Level by Color",
xaxis = list(title ="Demand"),
yaxis = list(title = "Inflows"))
p
#Axis assignment
x=Data$Demand
y=Data$Inflow
# Moderate Demand Level
z=Data$ModerateStorageR
p <- plot_ly(
x = x,
y = y$Inflow,
z = z$Data.Storage , type = "contour")%>%
layout(title = "Moderate Storage Level by Color",
xaxis = list(title ="Demand"),
yaxis = list(title = "Inflows"))
p
x
x
#Axis assignment
x=Data$Tot_Demand_AllData
y=Data$Inflow
# Moderate Demand Level
z=Data$ModerateStorageR
p <- plot_ly(
x = x,
y = y$Inflow,
z = z$Data.Storage , type = "contour")%>%
layout(title = "Moderate Storage Level by Color",
xaxis = list(title ="Demand"),
yaxis = list(title = "Inflows"))
p
#Severe Demand Level
z=Data$SevereStorageR
p <- plot_ly(
x = x$Data.Demand,
y = y$Data.Inflow,
z = z , type = "contour")%>%
layout(title = "Severe Storage by Level Color",
xaxis = list(title ="Demand"),
yaxis = list(title = "Inflows"))
p <- plot_ly(
x = x,
y = y$Inflow,
z = z , type = "contour")%>%
layout(title = "Severe Storage by Level Color",
xaxis = list(title ="Demand"),
yaxis = list(title = "Inflows"))
p
p <- plot_ly(
x = x,
y = y$Inflow,
z = z$Data.Storage, type = "contour")%>%
layout(title = "Severe Storage by Level Color",
xaxis = list(title ="Demand"),
yaxis = list(title = "Inflows"))
p
#Extreme Demand Level
z=Storage_Rel_Metrics_Extreme$Data...5.
#Extreme Demand Level
z=Data$ExtremStorageR
p <- plot_ly(
x = x,
y = y$Inflow,
z = z$Data.Storage , type = "contour")%>%
layout(title = "Extreme Storage by Color",
xaxis = list(title ="Demand"),
yaxis = list(title = "Inflows"))
p
