# RiverWare_Ruleset 8.0.4
# Created 15:11 June 4, 2020
# 
RULESET
NAME "Weber Model - Base (from MRM run) (from MRM run) (from MRM run) (from MRM run) (from MRM run) (from MRM run) (from MRM run) (from MRM run) (from MRM run) (from MRM run) (from MRM run) (from MRM run) (from MRM run) (from MRM run) (from MRM run) (from MRM run) (from MRM run) (from MRM run) (from MRM run) (from MRM run) (from MRM run) (from MRM run) (from MRM run) (from MRM run) (from MRM run) (from MRM run) (from MRM run) (from MRM run)";
AGENDA_ORDER ASCENDING;
DESCRIPTION "";
PRECISION   8;
NOTES "";
BEGIN

  POLICY_GROUP   "Finalization";
  DESCRIPTION    "";
  ACTIVE         TRUE;
  NOTES          "";
  BEGIN

    RULE                 "Willard Spills";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT NOT "HasRuleFiredSuccessfully"( "Current Rule" );
    NOTES                "";
    BEGIN

      $ "RES8 Willard Bay.Regulated Spill" [] := "Max"( $ "RES8 Willard Bay.Storage" [] - $ "Reservoir Data.Max Storages" [7.00000000, 0.00000000], 0.00000000 "acre-ft" ) / "GetTimestep"( @"t" );

    END
    UUID "{fd7b0039-3445-4c39-8f20-8454431ab2ad}";;

    RULE                 "Plain City Flood Capacity";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT NOT "HasRuleFiredSuccessfully"( "Current Rule" );
    NOTES                "";
    BEGIN

      IF_STATEMENT ($ "Weber River Near GSL.Outflow" [] > $ "Other Data.Plain City Flood Capacity" []) THEN
            $ "Willard Diversion.Diversion Request" [] := $ "Willard Diversion.Diversion Request" [] + ( $ "Weber River Near GSL.Outflow" [] - $ "Other Data.Plain City Flood Capacity" [] );

      END_IF_STATEMENT;

    END
    UUID "{573e86b0-b944-42c3-b90a-8401292d450f}";;

    RULE                 "Willard Diversion";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT NOT "HasRuleFiredSuccessfully"( "Current Rule" );
    NOTES                "";
    BEGIN

      $ "Willard Diversion.Diversion Request" [] := "Max"( $ "Weber River Near GSL.Outflow" [] - ( $ "Q82 Reach Gain.Gage Outflow" [] + $ "Q68 Sewage Outfall.Gage Outflow" [] ) + "Min"( $ "Warren Canal Diversion:SA16 Warren Canal.Diversion" [] + $ "Ogden Bay Bird Refuge Diversion:SA17 Ogden Bay Bird Refuge.Diversion" [], $ "Q82 Reach Gain.Gage Outflow" [] + $ "Q68 Sewage Outfall.Gage Outflow" [] ), 0.00000000 "acre-ft/month" );

    END
    UUID "{26a74b66-8b69-40a8-9d54-abc01ee198d6}";;

  END
  UUID "{c5b9dd3f-4787-423d-a765-e5690f278d76}";;

  POLICY_GROUP   "7th Call Set";
  DESCRIPTION    "";
  ACTIVE         TRUE;
  NOTES          "";
  BEGIN

    RULE                 "RES5";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT NOT "HasRuleFiredSuccessfully"( "Current Rule" );
    NOTES                "";
    BEGIN

    INACTIVE      % "RES5 East Canyon" & "Outflow" [] := "ShortageCall"( { % "Slaterville Diversion:SA15 Slaterville" }, % "RES5 East Canyon" );

      % "RES5 East Canyon" & "Outflow" [] := "ShortageCallPool"( { % "Slaterville Diversion:SA15 Slaterville" }, % "RES5 East Canyon", $ "Protected Pools.East Canyon", 1.00000000 );

      $ "Protected Pools.East Canyon" [] := $ "Protected Pools.East Canyon" [] - "Min"( $ "Protected Pools.East Canyon" [], FOR ( OBJECT area IN { % "Slaterville Diversion:SA15 Slaterville" } ) STAT_SUM
  area & "Diversion Shortage" []
 ENDFOR * "GetTimestep"( @"t" ) );

    END
    UUID "{cfdabf38-6238-48a7-8411-7a701235df85}";;

  END
  UUID "{7dcf4372-ecaa-4081-8aa0-e76f25f8ae66}";;

  POLICY_GROUP   "6th Call Set";
  DESCRIPTION    "";
  ACTIVE         TRUE;
  NOTES          "";
  BEGIN

    RULE                 "RES5";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT NOT "HasRuleFiredSuccessfully"( "Current Rule" );
    NOTES                "";
    BEGIN

    INACTIVE      % "RES5 East Canyon" & "Outflow" [] := "ShortageCall"( { % "Warren Canal Diversion:SA16 Warren Canal" , % "Ogden Bay Bird Refuge Diversion:SA17 Ogden Bay Bird Refuge" , % "GSL Minerals Diversion:SA18 GSL Minerals" }, % "RES5 East Canyon" );

    INACTIVE      % "RES5 East Canyon" & "Outflow" [] := "ShortageCall"( { % "Warren Canal Diversion:SA16 Warren Canal" , % "Ogden Bay Bird Refuge Diversion:SA17 Ogden Bay Bird Refuge" }, % "RES5 East Canyon" );

      % "RES5 East Canyon" & "Outflow" [] := "ShortageCallPool"( { % "Ogden Bay Bird Refuge Diversion:SA17 Ogden Bay Bird Refuge" }, % "RES5 East Canyon", $ "Protected Pools.East Canyon", 1.00000000 );

      $ "Protected Pools.East Canyon" [] := $ "Protected Pools.East Canyon" [] - "Min"( $ "Protected Pools.East Canyon" [], FOR ( OBJECT area IN { % "Warren Canal Diversion:SA16 Warren Canal" , % "Ogden Bay Bird Refuge Diversion:SA17 Ogden Bay Bird Refuge" } ) STAT_SUM
  area & "Diversion Shortage" []
 ENDFOR * "GetTimestep"( @"t" ) );

      $ "Weber River Near Gateway 1.Minimum Diversion Bypass" [] := $ "Weber River Near Gateway 1.Minimum Diversion Bypass" [] + "Min"( $ "Protected Pools.East Canyon" [] / "GetTimestep"( @"t" ), FOR ( OBJECT area IN { % "Warren Canal Diversion:SA16 Warren Canal" , % "Ogden Bay Bird Refuge Diversion:SA17 Ogden Bay Bird Refuge" } ) STAT_SUM
  area & "Diversion Shortage" []
 ENDFOR );

    END
    UUID "{14d49ebe-b58d-49cc-954e-a5d02791cef8}";;

    RULE                 "RES4";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT NOT "HasRuleFiredSuccessfully"( "Current Rule" );
    NOTES                "";
    BEGIN

      % "RES4 Lost Creek" & "Outflow" [] := "ShortageCall"( { % "Slaterville Diversion:SA15 Slaterville" , % "Gateway Canal Diversion:SA10 Gateway Canal" }, % "RES4 Lost Creek" );

    END
    UUID "{67f2c409-2642-48b0-8add-f636278b280f}";;

  END
  UUID "{42b61f08-1748-48fb-b42d-f9f2a47ab364}";;

  POLICY_GROUP   "5th Call Set";
  DESCRIPTION    "";
  ACTIVE         TRUE;
  NOTES          "";
  BEGIN

    RULE                 "RES5";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT NOT "HasRuleFiredSuccessfully"( "Current Rule" );
    NOTES                "";
    BEGIN

    INACTIVE      % "RES5 East Canyon" & "Outflow" [] := "ShortageCall"( { % "Gateway Canal Diversion 1" , % "Gateway To Slaterville Diversion:SA19 Gateway To Slaterville" }, % "RES5 East Canyon" );

      % "RES5 East Canyon" & "Outflow" [] := "ShortageCallPool"( { % "Gateway Canal Diversion 1" }, % "RES5 East Canyon", $ "Protected Pools.East Canyon", 1.00000000 );

      $ "Protected Pools.East Canyon" [] := $ "Protected Pools.East Canyon" [] - "Min"( $ "Protected Pools.East Canyon" [], FOR ( OBJECT area IN { % "Gateway Canal Diversion 1" } ) STAT_SUM
  area & "Diversion Shortage" []
 ENDFOR * "GetTimestep"( @"t" ) );

    END
    UUID "{966de970-272e-4940-a479-cf0fc660c12c}";;

    RULE                 "RES4";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT TRUE;
    NOTES                "";
    BEGIN

      % "RES4 Lost Creek" & "Outflow" [] := "ShortageCall"( { % "Ogden Bay Bird Refuge Diversion:SA17 Ogden Bay Bird Refuge" , % "GSL Minerals Diversion:SA18 GSL Minerals" }, % "RES4 Lost Creek" );

    END
    UUID "{f43cafad-27f1-4e53-9bbb-f66ecb68c4c8}";;

    RULE                 "RES3 Bypass A15";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT TRUE;
    NOTES                "";
    BEGIN

      % "RES3 Echo" & "Outflow" [] := "ShortageCall"( { % "Slaterville Diversion:SA15 Slaterville" }, % "RES3 Echo" );

    END
    UUID "{023e75e0-9ae6-4424-aaf4-fb4e18812af5}";;

    RULE                 "RES2";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT TRUE;
    NOTES                "";
    BEGIN

      % "RES2 Rockport" & "Outflow" [] := "ShortageCall"( { % "Slaterville Diversion:SA15 Slaterville" }, % "RES2 Rockport" );

    END
    UUID "{1eb4333e-dc7c-481e-8588-71db63dde256}";;

    RULE                 "RES3 Bypass A10";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT TRUE;
    NOTES                "";
    BEGIN

      % "RES3 Echo" & "Outflow" [] := "ShortageCall"( { % "Gateway Canal Diversion 1" }, % "RES3 Echo" );

    END
    UUID "{24bb3c8e-77cd-4420-9de4-73f84f2cf693}";;

    RULE                 "RES2 Bypass A10";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT TRUE;
    NOTES                "";
    BEGIN

      % "RES2 Rockport" & "Outflow" [] := "ShortageCall"( { % "Gateway Canal Diversion 1" }, % "RES2 Rockport" );

    END
    UUID "{4a1d206c-6271-4ef2-8f59-be230da874f2}";;

    RULE                 "RES1";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT NOT "HasRuleFiredSuccessfully"( "Current Rule" );
    NOTES                "";
    BEGIN

      % "RES1 Smith And Morehouse" & "Outflow" [] := "ShortageCall"( { % "Gateway Canal Diversion 1" }, % "RES1 Smith And Morehouse" );

    END
    UUID "{72976ec0-97c6-4fec-84d4-85fe351e7b62}";;

  END
  UUID "{869644f3-f2d3-4bb5-a6f4-c96b214c5dbb}";;

  POLICY_GROUP   "4th Call Set";
  DESCRIPTION    "";
  ACTIVE         TRUE;
  NOTES          "";
  BEGIN

    RULE                 "RES3 Bypass A10";
    DESCRIPTION          "";
    ACTIVE               FALSE;
    RULE_EXEC_CONSTRAINT NOT "HasRuleFiredSuccessfully"( "Current Rule" );
  NAMES_COLOR  "#ff55ff";
    NOTES                "";
    BEGIN

      % "RES3 Echo" & "Outflow" [] := "ShortageCall"( { % "Gateway Canal Diversion 1" }, % "RES3 Echo" );

    END
    UUID "{c01274f3-f91b-499c-91b0-17f5a2ec9218}";;

    RULE                 "RES10";
    DESCRIPTION          "";
    ACTIVE               FALSE;
    RULE_EXEC_CONSTRAINT NOT "HasRuleFiredSuccessfully"( "Current Rule" );
  NAMES_COLOR  "#ff55ff";
    NOTES                "";
    BEGIN

      % "RES10 Chalk Creek" & "Outflow" [] := "ShortageCall"( { % "Gateway Canal Diversion:SA10 Gateway Canal" }, % "RES10 Chalk Creek" );

    END
    UUID "{9ac235cc-a003-4a48-b7c2-aa7333495311}";;

    RULE                 "RES9";
    DESCRIPTION          "";
    ACTIVE               FALSE;
    RULE_EXEC_CONSTRAINT NOT "HasRuleFiredSuccessfully"( "Current Rule" );
  NAMES_COLOR  "#ffaa00";
    NOTES                "";
    BEGIN

      % "RES9 Gravel Pit" & "Outflow" [] := "ShortageCall"( { % "Gateway Canal Diversion:SA10 Gateway Canal" }, % "RES9 Gravel Pit" );

    END
    UUID "{258a993f-8e2f-4207-a4fd-eedc22315312}";;

    RULE                 "ASR Used Accounting";
    DESCRIPTION          "";
    ACTIVE               FALSE;
    RULE_EXEC_CONSTRAINT NOT "HasRuleFiredSuccessfully"( "Current Rule" );
  NAMES_COLOR  "#00aa7f";
    NOTES                "";
    BEGIN

      IF_STATEMENT ($ "Other Data.ASRHalf" [] >= $ "WBWCD ASR.Pumped Flow" [] * "GetTimestep"( @"t" )) THEN
            $ "Other Data.ASRHalf" [] := $ "Other Data.ASRHalf" [] - $ "WBWCD ASR.Pumped Flow" [] * "GetTimestep"( @"t" );

      ELSE
            IF_STATEMENT ($ "Other Data.ASRHalf" [] + $ "Other Data.ASRYr2" [] >= $ "WBWCD ASR.Pumped Flow" [] * "GetTimestep"( @"t" )) THEN
            $ "Other Data.ASRHalf" [] := 0.00000000 "acre-feet";

            $ "Other Data.ASRYr2" [] := $ "Other Data.ASRYr2" [] - ( $ "WBWCD ASR.Pumped Flow" [] * "GetTimestep"( @"t" ) - $ "Other Data.ASRHalf" [] );

      ELSE
            IF_STATEMENT ($ "Other Data.ASRHalf" [] + $ "Other Data.ASRYr2" [] + $ "Other Data.ASRYr1" [] >= $ "WBWCD ASR.Pumped Flow" [] * "GetTimestep"( @"t" )) THEN
            $ "Other Data.ASRHalf" [] := 0.00000000 "acre-feet";

            $ "Other Data.ASRYr2" [] := 0.00000000 "acre-feet";

            $ "Other Data.ASRYr1" [] := $ "Other Data.ASRYr1" [] - ( $ "WBWCD ASR.Pumped Flow" [] * "GetTimestep"( @"t" ) - $ "Other Data.ASRHalf" [] - $ "Other Data.ASRYr2" [] );

      ELSE
            IF_STATEMENT ($ "Other Data.ASRHalf" [] + $ "Other Data.ASRYr2" [] + $ "Other Data.ASRYr1" [] + $ "Other Data.ASRCurrentYr" [] >= $ "WBWCD ASR.Pumped Flow" [] * "GetTimestep"( @"t" )) THEN
            $ "Other Data.ASRHalf" [] := 0.00000000 "acre-feet";

            $ "Other Data.ASRYr2" [] := 0.00000000 "acre-feet";

            $ "Other Data.ASRYr1" [] := 0.00000000 "acre-feet";

            $ "Other Data.ASRCurrentYr" [] := $ "Other Data.ASRCurrentYr" [] - ( $ "WBWCD ASR.Pumped Flow" [] * "GetTimestep"( @"t" ) - $ "Other Data.ASRHalf" [] - $ "Other Data.ASRYr2" [] - $ "Other Data.ASRYr1" [] );

      ELSE
            $ "Other Data.ASRHalf" [] := 0.00000000 "acre-feet";

            $ "Other Data.ASRYr2" [] := 0.00000000 "acre-feet";

            $ "Other Data.ASRYr1" [] := 0.00000000 "acre-feet";

            $ "Other Data.ASRCurrentYr" [] := 0.00000000 "acre-feet";

      END_IF_STATEMENT;

      END_IF_STATEMENT;

      END_IF_STATEMENT;

      END_IF_STATEMENT;

    END
    UUID "{2052a6d5-e05c-4c4e-a75c-650450464d0d}";;

    RULE                 "ASR";
    DESCRIPTION          "";
    ACTIVE               FALSE;
    RULE_EXEC_CONSTRAINT NOT "HasRuleFiredSuccessfully"( "Current Rule" );
  NAMES_COLOR  "#00aa7f";
    NOTES                "";
    BEGIN

      % "WBWCD ASR" & "Pumped Flow" [] := "Min"( $ "WBWCD ASR.Storage" [] / "GetTimestep"( @"t" ), "ShortageCallGW"( { % "Gateway Canal Diversion:SA10 Gateway Canal" }, % "WBWCD ASR" ) );

    END
    UUID "{9800b187-bba5-48ab-8a88-958982a7f7fa}";;

    RULE                 "RES5";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT NOT "HasRuleFiredSuccessfully"( "Current Rule" );
    NOTES                "";
    BEGIN

    INACTIVE      % "RES5 East Canyon" & "Outflow" [] := "ShortageCall"( { % "Gateway Canal Diversion 1" , % "Gateway To Slaterville Diversion:SA19 Gateway To Slaterville" }, % "RES5 East Canyon" );

      % "RES5 East Canyon" & "Outflow" [] := "ShortageCallPool"( { % "Gateway To Slaterville Diversion:SA19 Gateway To Slaterville" }, % "RES5 East Canyon", $ "Protected Pools.East Canyon", 1.00000000 );

      $ "Protected Pools.East Canyon" [] := $ "Protected Pools.East Canyon" [] - "Min"( $ "Protected Pools.East Canyon" [], FOR ( OBJECT area IN { % "Gateway To Slaterville Diversion:SA19 Gateway To Slaterville" } ) STAT_SUM
  area & "Diversion Shortage" []
 ENDFOR * "GetTimestep"( @"t" ) );

    END
    UUID "{926466a1-9357-49c3-94ca-3cc6f485d587}";;

    RULE                 "RES3";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT NOT "HasRuleFiredSuccessfully"( "Current Rule" );
    NOTES                "";
    BEGIN

      % "RES3 Echo" & "Outflow" [] := "ShortageCall"( { % "Slaterville Diversion:SA15 Slaterville" }, % "RES3 Echo" );

    END
    UUID "{6aa87cf1-3aed-4eb5-83f4-188ce3aed817}";;

    RULE                 "RES3 Bypass";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT NOT "HasRuleFiredSuccessfully"( "Current Rule" );
    NOTES                "";
    BEGIN

      % "RES3 Echo" & "Outflow" [] := "ShortageCall"( { % "Additional WB Demand Diversion:SA20 Additional WB Demand" , % "Ogden Bay Bird Refuge Diversion:SA17 Ogden Bay Bird Refuge" }, % "RES3 Echo" );

    END
    UUID "{f8061ad3-05c1-4a37-b5c0-2768d00e4dd7}";;

    RULE                 "RES2";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT NOT "HasRuleFiredSuccessfully"( "Current Rule" );
    NOTES                "";
    BEGIN

      % "RES2 Rockport" & "Outflow" [] := "ShortageCall"( { % "Additional WB Demand Diversion:SA20 Additional WB Demand" , % "Ogden Bay Bird Refuge Diversion:SA17 Ogden Bay Bird Refuge" }, % "RES2 Rockport" );

    END
    UUID "{d3370383-1186-44cc-9102-f6276998baa4}";;

  END
  UUID "{f2d60130-5d29-4283-b2a3-15826b418486}";;

  POLICY_GROUP   "3rd Call Set";
  DESCRIPTION    "";
  ACTIVE         TRUE;
  NOTES          "";
  BEGIN

    RULE                 "RES7";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT NOT "HasRuleFiredSuccessfully"( "Current Rule" );
    NOTES                "";
    BEGIN

      % "RES7 Pineview" & "Outflow" [] := "ShortageCallPool"( { % "Slaterville Diversion:SA15 Slaterville" }, % "RES7 Pineview", $ "Protected Pools.Pineview", 1.00000000 );

      $ "Protected Pools.Pineview" [] := $ "Protected Pools.Pineview" [] - "Min"( $ "Protected Pools.Pineview" [], FOR ( OBJECT area IN { % "Slaterville Diversion:SA15 Slaterville" } ) STAT_SUM
  area & "Diversion Shortage" []
 ENDFOR * "GetTimestep"( @"t" ) );

    END
    UUID "{f792d89b-f914-4eb7-8df3-c7dfe43e1ecd}";;

    RULE                 "RES4";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT NOT "HasRuleFiredSuccessfully"( "Current Rule" );
    NOTES                "";
    BEGIN

      % "RES4 Lost Creek" & "Outflow" [] := "ShortageCall"( { % "Gateway Canal Diversion 1" , % "Gateway To Slaterville Diversion:SA19 Gateway To Slaterville" , % "Stoddard To Gateway Diversion:SA9 Stoddard To Gateway" }, % "RES4 Lost Creek" );

    END
    UUID "{2caa39b2-48d9-4d01-96c9-18b7bd8aee42}";;

    RULE                 "RES3";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT NOT "HasRuleFiredSuccessfully"( "Current Rule" );
    NOTES                "";
    BEGIN

      % "RES3 Echo" & "Outflow" [] := "ShortageCall"( { % "Additional WB Demand Diversion:SA20 Additional WB Demand" , % "Warren Canal Diversion:SA16 Warren Canal" , % "Ogden Bay Bird Refuge Diversion:SA17 Ogden Bay Bird Refuge" }, % "RES3 Echo" );

    END
    UUID "{97df6539-af5a-49b0-b075-2cb27d3c7cc2}";;

  END
  UUID "{dbc394e5-ed18-410e-b738-a285906767e7}";;

  POLICY_GROUP   "2nd Call Set";
  DESCRIPTION    "";
  ACTIVE         TRUE;
  NOTES          "";
  BEGIN

    RULE                 "RES8";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT NOT "HasRuleFiredSuccessfully"( "Current Rule" );
    NOTES                "";
    BEGIN

      % "RES8 Willard Bay" & "Release" [] := "ShortageCall"( { % "Slaterville Diversion:SA15 Slaterville" , % "Ogden Bay Bird Refuge Diversion:SA17 Ogden Bay Bird Refuge" , % "Warren Canal Diversion:SA16 Warren Canal" }, % "RES8 Willard Bay" );

    END
    UUID "{d1590e32-3430-4cb5-a2f2-e1b7a3b004b2}";;

    RULE                 "RES5 Pool";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT NOT "HasRuleFiredSuccessfully"( "Current Rule" );
    NOTES                "";
    BEGIN

      % "RES5 East Canyon" & "Outflow" [] := "ShortageCallPool"( { % "Davis Weber Canal Diversion:SA11 Davis Weber Canal" }, % "RES5 East Canyon", $ "Protected Pools.Davis Weber Canal East Canyon", 1.00000000 );

      $ "Protected Pools.Davis Weber Canal East Canyon" [] := $ "Protected Pools.Davis Weber Canal East Canyon" [] - "Min"( $ "Protected Pools.Davis Weber Canal East Canyon" [], $ "Davis Weber Canal Diversion:SA11 Davis Weber Canal.Diversion Shortage" [] * "GetTimestep"( @"t" ) );

      % "Weber River Near Stoddard 1" & "Minimum Diversion Bypass" [] := "Min"( $ "Davis Weber Canal Diversion:SA11 Davis Weber Canal.Diversion Shortage" [], $ "Protected Pools.Davis Weber Canal East Canyon" [] / "GetTimestep"( @"t" ) ) + % "Weber River Near Stoddard 1" & "Minimum Diversion Bypass" [];

      % "Weber River Near Stoddard 2" & "Minimum Diversion Bypass" [] := "Min"( $ "Davis Weber Canal Diversion:SA11 Davis Weber Canal.Diversion Shortage" [], $ "Protected Pools.Davis Weber Canal East Canyon" [] / "GetTimestep"( @"t" ) );

      $ "Weber River Near Gateway 1.Available For Diversion" [] := $ "Weber River Near Gateway 1.Available For Diversion" [] + "Min"( $ "Davis Weber Canal Diversion:SA11 Davis Weber Canal.Diversion Shortage" [], $ "Protected Pools.Davis Weber Canal East Canyon" [] / "GetTimestep"( @"t" ) );

    END
    UUID "{aff487f6-07cd-4241-b3c0-41f03951d0c7}";;

    RULE                 "RES7";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT NOT "HasRuleFiredSuccessfully"( "Current Rule" );
    NOTES                "";
    BEGIN

      % "RES7 Pineview" & "Outflow" [] := "ShortageCallPool"( { % "Davis Weber Canal PUMP Diversion 2" , % "Additional WB Demand Diversion:SA20 Additional WB Demand" , % "Ogden Bay Bird Refuge Diversion:SA17 Ogden Bay Bird Refuge" }, % "RES7 Pineview", $ "Protected Pools.Pineview", 1.00000000 );

      $ "Protected Pools.Pineview" [] := $ "Protected Pools.Pineview" [] - "Min"( $ "Protected Pools.Pineview" [], FOR ( OBJECT area IN { % "Davis Weber Canal PUMP Diversion 2" , % "Additional WB Demand Diversion:SA20 Additional WB Demand" , % "Ogden Bay Bird Refuge Diversion:SA17 Ogden Bay Bird Refuge" } ) STAT_SUM
  area & "Diversion Shortage" []
 ENDFOR * "GetTimestep"( @"t" ) );

    END
    UUID "{f87ef9c9-0678-4ec6-9aa9-351cdee697d6}";;

    RULE                 "SA9 Bypass";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT NOT "HasRuleFiredSuccessfully"( "Current Rule" );
    NOTES                "";
    BEGIN

      $ "Weber River Near Stoddard 1.Available For Diversion" [] := $ "Weber River Near Stoddard 1.Available For Diversion" [];

    END
    UUID "{f67760c6-4f21-4f03-943e-a6c12b60a0a2}";;

    RULE                 "RES3 Bypass";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT NOT "HasRuleFiredSuccessfully"( "Current Rule" );
    NOTES                "";
    BEGIN

      $ "RES3 Echo.Outflow" [] := "ShortageCall"( { % "Echo to Devils Slide Diversion:SA4 Echo to Devils Slide" , % "Devils Slide to Stoddard Diversion:SA6 Devils Slide to Stodard" , % "Stoddard To Gateway Diversion:SA9 Stoddard To Gateway" , % "Gateway Canal Diversion 1" , % "Gateway To Slaterville Diversion:SA19 Gateway To Slaterville" }, % "RES3 Echo" );

    END
    UUID "{0cbb6518-e04d-4e4e-8224-a6b63022eb92}";;

    RULE                 "RES2";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT NOT "HasRuleFiredSuccessfully"( "Current Rule" );
    NOTES                "";
    BEGIN

      % "RES2 Rockport" & "Outflow" [] := "ShortageCall"( { % "Echo to Devils Slide Diversion:SA4 Echo to Devils Slide" , % "Devils Slide to Stoddard Diversion:SA6 Devils Slide to Stodard" , % "Stoddard To Gateway Diversion:SA9 Stoddard To Gateway" , % "Gateway Canal Diversion 1" , % "Gateway To Slaterville Diversion:SA19 Gateway To Slaterville" }, % "RES2 Rockport" );

    END
    UUID "{5ebb3933-595d-4c24-aac2-022dfd829f7e}";;

  END
  UUID "{82264f49-410b-4263-8df6-b823b5ae8eef}";;

  POLICY_GROUP   "1st Call Set";
  DESCRIPTION    "";
  ACTIVE         TRUE;
  NOTES          "";
  BEGIN

    RULE                 "RES8";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT NOT "HasRuleFiredSuccessfully"( "Current Rule" );
    NOTES                "";
    BEGIN

      % "RES8 Willard Bay" & "Release" [] := "ShortageCall"( { % "Davis Weber Canal PUMP Diversion 2" , % "Additional WB Demand Diversion:SA20 Additional WB Demand" , % "Ogden Bay Bird Refuge Diversion:SA17 Ogden Bay Bird Refuge" , % "GSL Minerals Diversion:SA18 GSL Minerals" }, % "RES8 Willard Bay" );

    INACTIVE      % "RES8 Willard Bay" & "Release" [] := "ShortageCall"( { % "Additional WB Demand Diversion:SA20 Additional WB Demand" , % "Ogden Bay Bird Refuge Diversion:SA17 Ogden Bay Bird Refuge" , % "GSL Minerals Diversion:SA18 GSL Minerals" }, % "RES8 Willard Bay" );

    END
    UUID "{5b087606-82e9-48f3-a56e-ef7896098013}";;

    RULE                 "RES7";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT NOT "HasRuleFiredSuccessfully"( "Current Rule" );
    NOTES                "";
    BEGIN

      % "RES7 Pineview" & "Outflow" [] := "ShortageCallPool"( { % "Warren Canal Diversion:SA16 Warren Canal" }, % "RES7 Pineview", $ "Protected Pools.Pineview", 1.00000000 );

      $ "Protected Pools.Pineview" [] := $ "Protected Pools.Pineview" [] - "Min"( $ "Protected Pools.Pineview" [], FOR ( OBJECT area IN { % "Warren Canal Diversion:SA16 Warren Canal" } ) STAT_SUM
  area & "Diversion Shortage" []
 ENDFOR * "GetTimestep"( @"t" ) );

    END
    UUID "{28cc252c-0fe2-4c21-822b-a1233c388032}";;

    RULE                 "RES7 50Percent";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT NOT "HasRuleFiredSuccessfully"( "Current Rule" );
    NOTES                "";
    BEGIN

      % "RES7 Pineview" & "Outflow" [] := "ShortageCallPool"( { % "Slaterville Diversion:SA15 Slaterville" }, % "RES7 Pineview", $ "Protected Pools.Pineview", 0.50000000 );

      $ "Protected Pools.Pineview" [] := $ "Protected Pools.Pineview" [] - "Min"( $ "Protected Pools.Pineview" [] * 0.50000000, FOR ( OBJECT area IN { % "Slaterville Diversion:SA15 Slaterville" } ) STAT_SUM
  area & "Diversion Shortage" []
 ENDFOR * "GetTimestep"( @"t" ) );

    END
    UUID "{5bee3789-b400-4e67-b97e-2bc5861d2b31}";;

    RULE                 "RES7 Pool";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT NOT "HasRuleFiredSuccessfully"( "Current Rule" );
    NOTES                "";
    BEGIN

    INACTIVE      % "RES7 Pineview" & "Outflow" [] := "ShortageCallPool"( { % "Ogden Brigham and S Ogden Highline Canals:SA13 Ogden Brigham and S Ogden Highline Canals" , % "Ogden River Below Pineview Diversion:SA14 Ogden River Below Pineview" }, % "RES7 Pineview", $ "Protected Pools.Ogden River Project Pineview", 1.00000000 );

      % "RES7 Pineview" & "Outflow" [] := "ShortageCall"( { % "Ogden Brigham and S Ogden Highline Canals:SA13 Ogden Brigham and S Ogden Highline Canals" , % "Ogden River Below Pineview Diversion:SA14 Ogden River Below Pineview" }, % "RES7 Pineview" );

      $ "Protected Pools.Ogden River Project Pineview" [] := $ "Protected Pools.Ogden River Project Pineview" [] - "Min"( $ "Protected Pools.Ogden River Project Pineview" [], FOR ( OBJECT area IN { % "Ogden Brigham and S Ogden Highline Canals:SA13 Ogden Brigham and S Ogden Highline Canals" , % "Ogden River Below Pineview Diversion:SA14 Ogden River Below Pineview" } ) STAT_SUM
  area & "Diversion Shortage" []
 ENDFOR * "GetTimestep"( @"t" ) );

    END
    UUID "{93e1ce27-4145-4f8e-a74d-853e97b21917}";;

    RULE                 "RES6";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT NOT "HasRuleFiredSuccessfully"( "Current Rule" );
    NOTES                "";
    BEGIN

      % "RES6 Causey" & "Outflow" [] := "ShortageCall"( { % "Weber Basin Project Ogden Valley:SA12 Weber Basin Project Ogden Valley" }, % "RES6 Causey" );

    END
    UUID "{dc1b68c5-98f2-4aa2-a377-0d09c4f79717}";;

    RULE                 "RES5";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT NOT "HasRuleFiredSuccessfully"( "Current Rule" );
    NOTES                "";
    BEGIN

    INACTIVE      % "RES5 East Canyon" & "Outflow" [] := "ShortageCall"( { % "East Canyon Diversion:SA8 East Canyon" }, % "RES5 East Canyon" );

      % "RES5 East Canyon" & "Outflow" [] := "ShortageCallPool"( { % "East Canyon Diversion:SA8 East Canyon" }, % "RES5 East Canyon", $ "Protected Pools.East Canyon", 1.00000000 );

      $ "Protected Pools.East Canyon" [] := $ "Protected Pools.East Canyon" [] - "Min"( $ "Protected Pools.East Canyon" [], FOR ( OBJECT area IN { % "East Canyon Diversion:SA8 East Canyon" } ) STAT_SUM
  area & "Diversion Shortage" []
 ENDFOR * "GetTimestep"( @"t" ) );

    END
    UUID "{9f5570ec-ede9-4f8d-9b58-85af02fad1a5}";;

    RULE                 "RES4";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT NOT "HasRuleFiredSuccessfully"( "Current Rule" );
    NOTES                "";
    BEGIN

      % "RES4 Lost Creek" & "Outflow" [] := "ShortageCall"( { % "Lost Creek Diversion:SA5 Lost Creek" }, % "RES4 Lost Creek" );

    END
    UUID "{220be9a3-a28a-443e-b570-c24182ad8c4d}";;

    RULE                 "RES3";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT NOT "HasRuleFiredSuccessfully"( "Current Rule" );
    NOTES                "";
    BEGIN

      % "RES3 Echo" & "Outflow" [] := "ShortageCall"( { % "Echo to Devils Slide Diversion:SA4 Echo to Devils Slide" , % "Devils Slide to Stoddard Diversion:SA6 Devils Slide to Stodard" , % "Stoddard To Gateway Diversion:SA9 Stoddard To Gateway" , % "Gateway Canal Diversion 1" , % "Gateway To Slaterville Diversion:SA19 Gateway To Slaterville" , % "Davis Weber Canal Diversion:SA11 Davis Weber Canal" }, % "RES3 Echo" );

    END
    UUID "{ed074d63-301e-4161-8655-dacccd315d02}";;

    RULE                 "SA11 Bypass";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT NOT "HasRuleFiredSuccessfully"( "Current Rule" );
    NOTES                "";
    BEGIN

      $ "Weber River Near Gateway 1.Available For Diversion" [] := $ "Weber River Near Gateway 1.Available For Diversion" [];

    END
    UUID "{68911610-8a79-449b-be4a-fb7b261066f7}";;

    RULE                 "RES2";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT NOT "HasRuleFiredSuccessfully"( "Current Rule" );
    NOTES                "";
    BEGIN

      % "RES2 Rockport" & "Outflow" [] := "ShortageCall"( { % "Wanship Diversion:SA3 Wanship to Echo" }, % "RES2 Rockport" );

    END
    UUID "{c7434940-5bd9-4e39-a456-5884f7a0897a}";;

    RULE                 "RES1";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT NOT "HasRuleFiredSuccessfully"( "Current Rule" );
    NOTES                "";
    BEGIN

      % "RES1 Smith And Morehouse" & "Outflow" [] := "ShortageCall"( { % "Oakley Diversion:SA2 Oakley to Wanship" , % "Park City Diversion:SA7 Park City" }, % "RES1 Smith And Morehouse" );

    END
    UUID "{918e014b-d48c-411b-b89d-e86ea18f462b}";;

    RULE                 "RES1 Weber Provo";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT NOT "HasRuleFiredSuccessfully"( "Current Rule" );
    NOTES                "";
    BEGIN

      % "RES1 Smith And Morehouse" & "Outflow" [] := "Min"( "ShortageCall"( { % "Weber Provo Diversion:SA1 Weber Provo Canal" }, % "RES1 Smith And Morehouse" ), $ "RES1 Smith And Morehouse.Inflow" [] );

    END
    UUID "{33a36821-19d7-4426-9390-862b6f448d18}";;

  END
  UUID "{7803b7ac-98d7-409a-95ad-0d96f7ef0b89}";;

  POLICY_GROUP   "Initializations";
  DESCRIPTION    "";
  ACTIVE         TRUE;
  NOTES          "";
  BEGIN

    RULE                 "Demand Managment District Storage";
    DESCRIPTION          "";
    ACTIVE               FALSE;
    RULE_EXEC_CONSTRAINT NOT "HasRuleFiredSuccessfully"( "Current Rule" );
  NAMES_COLOR  "#00aaff";
    NOTES                "";
    BEGIN

      IF_STATEMENT ($ "Demand Data.ReductionStatus" [] == 2.00000000) THEN
            % "Park City Diversion:SA7 Park City" & "Diversion Requested" [] := "Max"( $ "Park City Diversion:SA7 Park City.Diversion" [], $ "Park City Diversion:SA7 Park City.Diversion Requested" [] * 0.90000000 );

            $ "Lost Creek Diversion:SA5 Lost Creek.Diversion Requested" [] := "Max"( $ "Lost Creek Diversion:SA5 Lost Creek.Diversion" [], $ "Lost Creek Diversion:SA5 Lost Creek.Diversion Requested" [] * 0.80000000 );

            % "Gateway Canal Diversion:SA10 Gateway Canal" & "Diversion Requested" [] := "Max"( $ "Gateway Canal Diversion 1.Diversion Request" [], $ "Gateway Canal Diversion 1.Diversion Request" [] * 0.80000000 );

            $ "Weber Basin Project Ogden Valley:SA12 Weber Basin Project Ogden Valley.Diversion Requested" [] := "Max"( $ "Weber Basin Project Ogden Valley:SA12 Weber Basin Project Ogden Valley.Diversion" [], $ "Weber Basin Project Ogden Valley:SA12 Weber Basin Project Ogden Valley.Diversion Requested" [] * 0.80000000 );

            $ "Slaterville Diversion:SA15 Slaterville.Diversion Requested" [] := "Max"( $ "Slaterville Diversion:SA15 Slaterville.Diversion" [], $ "Slaterville Diversion:SA15 Slaterville.Diversion Requested" [] * 0.92000000 );

            % "Additional WB Demand Diversion:SA20 Additional WB Demand" & "Diversion Requested" [] := "Max"( $ "Additional WB Demand Diversion:SA20 Additional WB Demand.Diversion" [], $ "Additional WB Demand Diversion:SA20 Additional WB Demand.Diversion Requested" [] * 0.80000000 );

      END_IF_STATEMENT;

      IF_STATEMENT ($ "Demand Data.ReductionStatus" [] == 3.00000000) THEN
            % "Park City Diversion:SA7 Park City" & "Diversion Requested" [] := "Max"( $ "Park City Diversion:SA7 Park City.Diversion" [], $ "Park City Diversion:SA7 Park City.Diversion Requested" [] * 0.65000000 );

            $ "Lost Creek Diversion:SA5 Lost Creek.Diversion Requested" [] := "Max"( $ "Lost Creek Diversion:SA5 Lost Creek.Diversion" [], $ "Lost Creek Diversion:SA5 Lost Creek.Diversion Requested" [] * 0.40000000 );

            % "Gateway Canal Diversion:SA10 Gateway Canal" & "Diversion Requested" [] := "Max"( $ "Gateway Canal Diversion 1.Diversion Request" [], $ "Gateway Canal Diversion 1.Diversion Request" [] * 0.40000000 );

            $ "Weber Basin Project Ogden Valley:SA12 Weber Basin Project Ogden Valley.Diversion Requested" [] := "Max"( $ "Weber Basin Project Ogden Valley:SA12 Weber Basin Project Ogden Valley.Diversion" [], $ "Weber Basin Project Ogden Valley:SA12 Weber Basin Project Ogden Valley.Diversion Requested" [] * 0.40000000 );

            $ "Slaterville Diversion:SA15 Slaterville.Diversion Requested" [] := "Max"( $ "Slaterville Diversion:SA15 Slaterville.Diversion" [], $ "Slaterville Diversion:SA15 Slaterville.Diversion Requested" [] * 0.83000000 );

            % "Additional WB Demand Diversion:SA20 Additional WB Demand" & "Diversion Requested" [] := "Max"( $ "Additional WB Demand Diversion:SA20 Additional WB Demand.Diversion" [], $ "Additional WB Demand Diversion:SA20 Additional WB Demand.Diversion Requested" [] * 0.40000000 );

      END_IF_STATEMENT;

      IF_STATEMENT ($ "Demand Data.ReductionStatus" [] == 4.00000000) THEN
            % "Park City Diversion:SA7 Park City" & "Diversion Requested" [] := "Max"( $ "Park City Diversion:SA7 Park City.Diversion" [], $ "Park City Diversion:SA7 Park City.Diversion Requested" [] * 0.36000000 );

            $ "Lost Creek Diversion:SA5 Lost Creek.Diversion Requested" [] := "Max"( $ "Lost Creek Diversion:SA5 Lost Creek.Diversion" [], $ "Lost Creek Diversion:SA5 Lost Creek.Diversion Requested" [] * 0.05000000 );

            % "Gateway Canal Diversion:SA10 Gateway Canal" & "Diversion Requested" [] := "Max"( $ "Gateway Canal Diversion 1.Diversion Request" [], $ "Gateway Canal Diversion 1.Diversion Request" [] * 0.05000000 );

            $ "Weber Basin Project Ogden Valley:SA12 Weber Basin Project Ogden Valley.Diversion Requested" [] := "Max"( $ "Weber Basin Project Ogden Valley:SA12 Weber Basin Project Ogden Valley.Diversion" [], $ "Weber Basin Project Ogden Valley:SA12 Weber Basin Project Ogden Valley.Diversion Requested" [] * 0.05000000 );

            $ "Slaterville Diversion:SA15 Slaterville.Diversion Requested" [] := "Max"( $ "Slaterville Diversion:SA15 Slaterville.Diversion" [], $ "Slaterville Diversion:SA15 Slaterville.Diversion Requested" [] * 0.75000000 );

            % "Additional WB Demand Diversion:SA20 Additional WB Demand" & "Diversion Requested" [] := "Max"( $ "Additional WB Demand Diversion:SA20 Additional WB Demand.Diversion" [], $ "Additional WB Demand Diversion:SA20 Additional WB Demand.Diversion Requested" [] * 0.05000000 );

      END_IF_STATEMENT;

    END
    UUID "{6e7a9739-444c-44a0-a665-22db84b87647}";;

    RULE                 "Demand Management Status Check";
    DESCRIPTION          "";
    ACTIVE               FALSE;
    RULE_EXEC_CONSTRAINT TRUE;
  NAMES_COLOR  "#00aaff";
    NOTES                "";
    BEGIN

      $ "Demand Data.ReductionStatus" [] := "Max"( $ "Demand Data.TotalReductionStatus" [], $ "Demand Data.UpstreamReductionStatus" [] );

    END
    UUID "{20bf5e6f-e5e2-47e4-a335-b328afb4932c}";;

    RULE                 "Demand Management Total Status Check";
    DESCRIPTION          "";
    ACTIVE               FALSE;
    RULE_EXEC_CONSTRAINT TRUE;
  NAMES_COLOR  "#00aaff";
    NOTES                "";
    BEGIN

    BREAKPOINT AFTER_EXEC TRUE;
    DESCRIPTION          "<comment>reduction status can take values of 1, 2, 3, and 4, which correspond with a Green, <br>Yellow, Orange, and Red reduction respectively. <br>";
      IF_STATEMENT (@"t" == "CompletePartialDate"( @"March", @"t" )) THEN
            IF_STATEMENT ($ "Other Data.TotalStorage" [@"t - 1"] <= $ "Demand Data.TotalStorageReductionLookup" [0.00000000, 0.00000000]) THEN
            IF_STATEMENT ($ "Other Data.PVandGWInflows" [] <= $ "Demand Data.TotalStorageReductionLookup" [0.00000000, 1.00000000]) THEN
            IF_STATEMENT ($ "Demand Data.TotalStorageReductionLookup" [0.00000000, 4.00000000] > $ "Demand Data.DemandReductionProbThreshold" []) THEN
            $ "Demand Data.TotalReductionStatus" [] := 4.00000000;

      ELSE
            $ "Demand Data.TotalReductionStatus" [] := 1.00000000;

      END_IF_STATEMENT
      ELSEIF_COND ( $ "Demand Data.TotalStorageReductionLookup" [0.00000000, 3.00000000] > $ "Demand Data.DemandReductionProbThreshold" [] )
      ELSEIF_CLAUSE
            $ "Demand Data.TotalReductionStatus" [] := 3.00000000;
      END_ELSEIF
      ELSEIF_COND ( $ "Demand Data.TotalStorageReductionLookup" [0.00000000, 2.00000000] > $ "Demand Data.DemandReductionProbThreshold" [] )
      ELSEIF_CLAUSE
            $ "Demand Data.TotalReductionStatus" [] := 2.00000000;
      END_ELSEIF;

      ELSE
            $ "Demand Data.TotalReductionStatus" [] := 1.00000000;

      END_IF_STATEMENT
      ELSEIF_COND ( $ "Other Data.PVandGWInflows" [] <= $ "Demand Data.TotalStorageReductionLookup" [1.00000000, 1.00000000] AND $ "Other Data.PVandGWInflows" [] > $ "Demand Data.TotalStorageReductionLookup" [0.00000000, 1.00000000] )
      ELSEIF_CLAUSE
            IF_STATEMENT ($ "Demand Data.TotalStorageReductionLookup" [1.00000000, 4.00000000] > $ "Demand Data.DemandReductionProbThreshold" []) THEN
            $ "Demand Data.TotalReductionStatus" [] := 4.00000000;

      ELSE
            $ "Demand Data.TotalReductionStatus" [] := 1.00000000;

      END_IF_STATEMENT
      ELSEIF_COND ( $ "Demand Data.TotalStorageReductionLookup" [1.00000000, 3.00000000] > $ "Demand Data.DemandReductionProbThreshold" [] )
      ELSEIF_CLAUSE
            $ "Demand Data.TotalReductionStatus" [] := 3.00000000;
      END_ELSEIF
      ELSEIF_COND ( $ "Demand Data.TotalStorageReductionLookup" [1.00000000, 2.00000000] > $ "Demand Data.DemandReductionProbThreshold" [] )
      ELSEIF_CLAUSE
            $ "Demand Data.TotalReductionStatus" [] := 2.00000000;
      END_ELSEIF;
      END_ELSEIF
      ELSEIF_COND ( $ "Other Data.PVandGWInflows" [] <= $ "Demand Data.TotalStorageReductionLookup" [2.00000000, 1.00000000] AND $ "Other Data.PVandGWInflows" [] > $ "Demand Data.TotalStorageReductionLookup" [1.00000000, 1.00000000] )
      ELSEIF_CLAUSE
            IF_STATEMENT ($ "Demand Data.TotalStorageReductionLookup" [2.00000000, 4.00000000] > $ "Demand Data.DemandReductionProbThreshold" []) THEN
            $ "Demand Data.TotalReductionStatus" [] := 4.00000000;

      ELSE
            $ "Demand Data.TotalReductionStatus" [] := 1.00000000;

      END_IF_STATEMENT
      ELSEIF_COND ( $ "Demand Data.TotalStorageReductionLookup" [2.00000000, 3.00000000] > $ "Demand Data.DemandReductionProbThreshold" [] )
      ELSEIF_CLAUSE
            $ "Demand Data.TotalReductionStatus" [] := 3.00000000;
      END_ELSEIF
      ELSEIF_COND ( $ "Demand Data.TotalStorageReductionLookup" [2.00000000, 2.00000000] > $ "Demand Data.DemandReductionProbThreshold" [] )
      ELSEIF_CLAUSE
            $ "Demand Data.TotalReductionStatus" [] := 2.00000000;
      END_ELSEIF;
      END_ELSEIF
      ELSEIF_COND ( $ "Other Data.PVandGWInflows" [] <= $ "Demand Data.TotalStorageReductionLookup" [3.00000000, 1.00000000] AND $ "Other Data.PVandGWInflows" [] > $ "Demand Data.TotalStorageReductionLookup" [2.00000000, 1.00000000] )
      ELSEIF_CLAUSE
            IF_STATEMENT ($ "Demand Data.TotalStorageReductionLookup" [3.00000000, 4.00000000] > $ "Demand Data.DemandReductionProbThreshold" []) THEN
            $ "Demand Data.TotalReductionStatus" [] := 4.00000000;

      ELSE
            $ "Demand Data.TotalReductionStatus" [] := 1.00000000;

      END_IF_STATEMENT
      ELSEIF_COND ( $ "Demand Data.TotalStorageReductionLookup" [3.00000000, 3.00000000] > $ "Demand Data.DemandReductionProbThreshold" [] )
      ELSEIF_CLAUSE
            $ "Demand Data.TotalReductionStatus" [] := 3.00000000;
      END_ELSEIF
      ELSEIF_COND ( $ "Demand Data.TotalStorageReductionLookup" [3.00000000, 2.00000000] > $ "Demand Data.DemandReductionProbThreshold" [] )
      ELSEIF_CLAUSE
            $ "Demand Data.TotalReductionStatus" [] := 2.00000000;
      END_ELSEIF;
      END_ELSEIF;

      ELSE
            $ "Demand Data.TotalReductionStatus" [] := 1.00000000;

      END_IF_STATEMENT
      ELSEIF_COND ( $ "Other Data.TotalStorage" [@"t - 1"] <= $ "Demand Data.TotalStorageReductionLookup" [4.00000000, 0.00000000] AND $ "Other Data.TotalStorage" [@"t - 1"] > $ "Demand Data.TotalStorageReductionLookup" [0.00000000, 0.00000000] )
      ELSEIF_CLAUSE
            IF_STATEMENT ($ "Other Data.PVandGWInflows" [] <= $ "Demand Data.TotalStorageReductionLookup" [4.00000000, 1.00000000]) THEN
            IF_STATEMENT ($ "Demand Data.TotalStorageReductionLookup" [4.00000000, 4.00000000] > $ "Demand Data.DemandReductionProbThreshold" []) THEN
            $ "Demand Data.TotalReductionStatus" [] := 4.00000000;

      ELSE
            $ "Demand Data.TotalReductionStatus" [] := 1.00000000;

      END_IF_STATEMENT
      ELSEIF_COND ( $ "Demand Data.TotalStorageReductionLookup" [4.00000000, 3.00000000] > $ "Demand Data.DemandReductionProbThreshold" [] )
      ELSEIF_CLAUSE
            $ "Demand Data.TotalReductionStatus" [] := 3.00000000;
      END_ELSEIF
      ELSEIF_COND ( $ "Demand Data.TotalStorageReductionLookup" [4.00000000, 2.00000000] > $ "Demand Data.DemandReductionProbThreshold" [] )
      ELSEIF_CLAUSE
            $ "Demand Data.TotalReductionStatus" [] := 2.00000000;
      END_ELSEIF;

      ELSE
            $ "Demand Data.TotalReductionStatus" [] := 1.00000000;

      END_IF_STATEMENT
      ELSEIF_COND ( $ "Other Data.PVandGWInflows" [] <= $ "Demand Data.TotalStorageReductionLookup" [5.00000000, 1.00000000] AND $ "Other Data.PVandGWInflows" [] > $ "Demand Data.TotalStorageReductionLookup" [4.00000000, 1.00000000] )
      ELSEIF_CLAUSE
            IF_STATEMENT ($ "Demand Data.TotalStorageReductionLookup" [5.00000000, 4.00000000] > $ "Demand Data.DemandReductionProbThreshold" []) THEN
            $ "Demand Data.TotalReductionStatus" [] := 4.00000000;

      ELSE
            $ "Demand Data.TotalReductionStatus" [] := 1.00000000;

      END_IF_STATEMENT
      ELSEIF_COND ( $ "Demand Data.TotalStorageReductionLookup" [5.00000000, 3.00000000] > $ "Demand Data.DemandReductionProbThreshold" [] )
      ELSEIF_CLAUSE
            $ "Demand Data.TotalReductionStatus" [] := 3.00000000;
      END_ELSEIF
      ELSEIF_COND ( $ "Demand Data.TotalStorageReductionLookup" [5.00000000, 2.00000000] > $ "Demand Data.DemandReductionProbThreshold" [] )
      ELSEIF_CLAUSE
            $ "Demand Data.TotalReductionStatus" [] := 2.00000000;
      END_ELSEIF;
      END_ELSEIF
      ELSEIF_COND ( $ "Other Data.PVandGWInflows" [] <= $ "Demand Data.TotalStorageReductionLookup" [6.00000000, 1.00000000] AND $ "Other Data.PVandGWInflows" [] > $ "Demand Data.TotalStorageReductionLookup" [5.00000000, 1.00000000] )
      ELSEIF_CLAUSE
            IF_STATEMENT ($ "Demand Data.TotalStorageReductionLookup" [6.00000000, 4.00000000] > $ "Demand Data.DemandReductionProbThreshold" []) THEN
            $ "Demand Data.TotalReductionStatus" [] := 4.00000000;

      ELSE
            $ "Demand Data.TotalReductionStatus" [] := 1.00000000;

      END_IF_STATEMENT
      ELSEIF_COND ( $ "Demand Data.TotalStorageReductionLookup" [6.00000000, 3.00000000] > $ "Demand Data.DemandReductionProbThreshold" [] )
      ELSEIF_CLAUSE
            $ "Demand Data.TotalReductionStatus" [] := 3.00000000;
      END_ELSEIF
      ELSEIF_COND ( $ "Demand Data.TotalStorageReductionLookup" [6.00000000, 2.00000000] > $ "Demand Data.DemandReductionProbThreshold" [] )
      ELSEIF_CLAUSE
            $ "Demand Data.TotalReductionStatus" [] := 2.00000000;
      END_ELSEIF;
      END_ELSEIF
      ELSEIF_COND ( $ "Other Data.PVandGWInflows" [] <= $ "Demand Data.TotalStorageReductionLookup" [7.00000000, 1.00000000] AND $ "Other Data.PVandGWInflows" [] > $ "Demand Data.TotalStorageReductionLookup" [6.00000000, 1.00000000] )
      ELSEIF_CLAUSE
            IF_STATEMENT ($ "Demand Data.TotalStorageReductionLookup" [7.00000000, 4.00000000] > $ "Demand Data.DemandReductionProbThreshold" []) THEN
            $ "Demand Data.TotalReductionStatus" [] := 4.00000000;

      ELSE
            $ "Demand Data.TotalReductionStatus" [] := 1.00000000;

      END_IF_STATEMENT
      ELSEIF_COND ( $ "Demand Data.TotalStorageReductionLookup" [7.00000000, 3.00000000] > $ "Demand Data.DemandReductionProbThreshold" [] )
      ELSEIF_CLAUSE
            $ "Demand Data.TotalReductionStatus" [] := 3.00000000;
      END_ELSEIF
      ELSEIF_COND ( $ "Demand Data.TotalStorageReductionLookup" [7.00000000, 2.00000000] > $ "Demand Data.DemandReductionProbThreshold" [] )
      ELSEIF_CLAUSE
            $ "Demand Data.TotalReductionStatus" [] := 2.00000000;
      END_ELSEIF;
      END_ELSEIF;
      END_ELSEIF
      ELSEIF_COND ( $ "Other Data.TotalStorage" [@"t - 1"] <= $ "Demand Data.TotalStorageReductionLookup" [8.00000000, 0.00000000] AND $ "Other Data.TotalStorage" [@"t - 1"] > $ "Demand Data.TotalStorageReductionLookup" [4.00000000, 0.00000000] )
      ELSEIF_CLAUSE
            IF_STATEMENT ($ "Other Data.PVandGWInflows" [] <= $ "Demand Data.TotalStorageReductionLookup" [8.00000000, 1.00000000]) THEN
            IF_STATEMENT ($ "Demand Data.TotalStorageReductionLookup" [8.00000000, 4.00000000] > $ "Demand Data.DemandReductionProbThreshold" []) THEN
            $ "Demand Data.TotalReductionStatus" [] := 4.00000000;

      ELSE
            $ "Demand Data.TotalReductionStatus" [] := 1.00000000;

      END_IF_STATEMENT
      ELSEIF_COND ( $ "Demand Data.TotalStorageReductionLookup" [8.00000000, 3.00000000] > $ "Demand Data.DemandReductionProbThreshold" [] )
      ELSEIF_CLAUSE
            $ "Demand Data.TotalReductionStatus" [] := 3.00000000;
      END_ELSEIF
      ELSEIF_COND ( $ "Demand Data.TotalStorageReductionLookup" [8.00000000, 2.00000000] > $ "Demand Data.DemandReductionProbThreshold" [] )
      ELSEIF_CLAUSE
            $ "Demand Data.TotalReductionStatus" [] := 2.00000000;
      END_ELSEIF;

      ELSE
            $ "Demand Data.TotalReductionStatus" [] := 1.00000000;

      END_IF_STATEMENT
      ELSEIF_COND ( $ "Other Data.PVandGWInflows" [] <= $ "Demand Data.TotalStorageReductionLookup" [9.00000000, 1.00000000] AND $ "Other Data.PVandGWInflows" [] > $ "Demand Data.TotalStorageReductionLookup" [8.00000000, 1.00000000] )
      ELSEIF_CLAUSE
            IF_STATEMENT ($ "Demand Data.TotalStorageReductionLookup" [9.00000000, 4.00000000] > $ "Demand Data.DemandReductionProbThreshold" []) THEN
            $ "Demand Data.TotalReductionStatus" [] := 4.00000000;

      ELSE
            $ "Demand Data.TotalReductionStatus" [] := 1.00000000;

      END_IF_STATEMENT
      ELSEIF_COND ( $ "Demand Data.TotalStorageReductionLookup" [9.00000000, 3.00000000] > $ "Demand Data.DemandReductionProbThreshold" [] )
      ELSEIF_CLAUSE
            $ "Demand Data.TotalReductionStatus" [] := 3.00000000;
      END_ELSEIF
      ELSEIF_COND ( $ "Demand Data.TotalStorageReductionLookup" [9.00000000, 2.00000000] > $ "Demand Data.DemandReductionProbThreshold" [] )
      ELSEIF_CLAUSE
            $ "Demand Data.TotalReductionStatus" [] := 2.00000000;
      END_ELSEIF;
      END_ELSEIF
      ELSEIF_COND ( $ "Other Data.PVandGWInflows" [] <= $ "Demand Data.TotalStorageReductionLookup" [10.00000000, 1.00000000] AND $ "Other Data.PVandGWInflows" [] > $ "Demand Data.TotalStorageReductionLookup" [9.00000000, 1.00000000] )
      ELSEIF_CLAUSE
            IF_STATEMENT ($ "Demand Data.TotalStorageReductionLookup" [10.00000000, 4.00000000] > $ "Demand Data.DemandReductionProbThreshold" []) THEN
            $ "Demand Data.TotalReductionStatus" [] := 4.00000000;

      ELSE
            $ "Demand Data.TotalReductionStatus" [] := 1.00000000;

      END_IF_STATEMENT
      ELSEIF_COND ( $ "Demand Data.TotalStorageReductionLookup" [10.00000000, 3.00000000] > $ "Demand Data.DemandReductionProbThreshold" [] )
      ELSEIF_CLAUSE
            $ "Demand Data.TotalReductionStatus" [] := 3.00000000;
      END_ELSEIF
      ELSEIF_COND ( $ "Demand Data.TotalStorageReductionLookup" [10.00000000, 2.00000000] > $ "Demand Data.DemandReductionProbThreshold" [] )
      ELSEIF_CLAUSE
            $ "Demand Data.TotalReductionStatus" [] := 2.00000000;
      END_ELSEIF;
      END_ELSEIF
      ELSEIF_COND ( $ "Other Data.PVandGWInflows" [] <= $ "Demand Data.TotalStorageReductionLookup" [11.00000000, 1.00000000] AND $ "Other Data.PVandGWInflows" [] > $ "Demand Data.TotalStorageReductionLookup" [10.00000000, 1.00000000] )
      ELSEIF_CLAUSE
            IF_STATEMENT ($ "Demand Data.TotalStorageReductionLookup" [11.00000000, 4.00000000] > $ "Demand Data.DemandReductionProbThreshold" []) THEN
            $ "Demand Data.TotalReductionStatus" [] := 4.00000000;

      ELSE
            $ "Demand Data.TotalReductionStatus" [] := 1.00000000;

      END_IF_STATEMENT
      ELSEIF_COND ( $ "Demand Data.TotalStorageReductionLookup" [11.00000000, 3.00000000] > $ "Demand Data.DemandReductionProbThreshold" [] )
      ELSEIF_CLAUSE
            $ "Demand Data.TotalReductionStatus" [] := 3.00000000;
      END_ELSEIF
      ELSEIF_COND ( $ "Demand Data.TotalStorageReductionLookup" [11.00000000, 2.00000000] > $ "Demand Data.DemandReductionProbThreshold" [] )
      ELSEIF_CLAUSE
            $ "Demand Data.TotalReductionStatus" [] := 2.00000000;
      END_ELSEIF;
      END_ELSEIF;
      END_ELSEIF
      ELSEIF_COND ( $ "Other Data.TotalStorage" [@"t - 1"] <= $ "Demand Data.TotalStorageReductionLookup" [12.00000000, 0.00000000] AND $ "Other Data.TotalStorage" [@"t - 1"] > $ "Demand Data.TotalStorageReductionLookup" [8.00000000, 0.00000000] )
      ELSEIF_CLAUSE
            IF_STATEMENT ($ "Other Data.PVandGWInflows" [] <= $ "Demand Data.TotalStorageReductionLookup" [12.00000000, 1.00000000]) THEN
            IF_STATEMENT ($ "Demand Data.TotalStorageReductionLookup" [12.00000000, 4.00000000] > $ "Demand Data.DemandReductionProbThreshold" []) THEN
            $ "Demand Data.TotalReductionStatus" [] := 4.00000000;

      ELSE
            $ "Demand Data.TotalReductionStatus" [] := 1.00000000;

      END_IF_STATEMENT
      ELSEIF_COND ( $ "Demand Data.TotalStorageReductionLookup" [12.00000000, 3.00000000] > $ "Demand Data.DemandReductionProbThreshold" [] )
      ELSEIF_CLAUSE
            $ "Demand Data.TotalReductionStatus" [] := 3.00000000;
      END_ELSEIF
      ELSEIF_COND ( $ "Demand Data.TotalStorageReductionLookup" [12.00000000, 2.00000000] > $ "Demand Data.DemandReductionProbThreshold" [] )
      ELSEIF_CLAUSE
            $ "Demand Data.TotalReductionStatus" [] := 2.00000000;
      END_ELSEIF;

      ELSE
            $ "Demand Data.TotalReductionStatus" [] := 1.00000000;

      END_IF_STATEMENT
      ELSEIF_COND ( $ "Other Data.PVandGWInflows" [] <= $ "Demand Data.TotalStorageReductionLookup" [13.00000000, 1.00000000] AND $ "Other Data.PVandGWInflows" [] > $ "Demand Data.TotalStorageReductionLookup" [12.00000000, 1.00000000] )
      ELSEIF_CLAUSE
            IF_STATEMENT ($ "Demand Data.TotalStorageReductionLookup" [13.00000000, 4.00000000] > $ "Demand Data.DemandReductionProbThreshold" []) THEN
            $ "Demand Data.TotalReductionStatus" [] := 4.00000000;

      ELSE
            $ "Demand Data.TotalReductionStatus" [] := 1.00000000;

      END_IF_STATEMENT
      ELSEIF_COND ( $ "Demand Data.TotalStorageReductionLookup" [13.00000000, 3.00000000] > $ "Demand Data.DemandReductionProbThreshold" [] )
      ELSEIF_CLAUSE
            $ "Demand Data.TotalReductionStatus" [] := 3.00000000;
      END_ELSEIF
      ELSEIF_COND ( $ "Demand Data.TotalStorageReductionLookup" [13.00000000, 2.00000000] > $ "Demand Data.DemandReductionProbThreshold" [] )
      ELSEIF_CLAUSE
            $ "Demand Data.TotalReductionStatus" [] := 2.00000000;
      END_ELSEIF;
      END_ELSEIF
      ELSEIF_COND ( $ "Other Data.PVandGWInflows" [] <= $ "Demand Data.TotalStorageReductionLookup" [14.00000000, 1.00000000] AND $ "Other Data.PVandGWInflows" [] > $ "Demand Data.TotalStorageReductionLookup" [13.00000000, 1.00000000] )
      ELSEIF_CLAUSE
            IF_STATEMENT ($ "Demand Data.TotalStorageReductionLookup" [14.00000000, 4.00000000] > $ "Demand Data.DemandReductionProbThreshold" []) THEN
            $ "Demand Data.TotalReductionStatus" [] := 4.00000000;

      ELSE
            $ "Demand Data.TotalReductionStatus" [] := 1.00000000;

      END_IF_STATEMENT
      ELSEIF_COND ( $ "Demand Data.TotalStorageReductionLookup" [14.00000000, 3.00000000] > $ "Demand Data.DemandReductionProbThreshold" [] )
      ELSEIF_CLAUSE
            $ "Demand Data.TotalReductionStatus" [] := 3.00000000;
      END_ELSEIF
      ELSEIF_COND ( $ "Demand Data.TotalStorageReductionLookup" [14.00000000, 2.00000000] > $ "Demand Data.DemandReductionProbThreshold" [] )
      ELSEIF_CLAUSE
            $ "Demand Data.TotalReductionStatus" [] := 2.00000000;
      END_ELSEIF;
      END_ELSEIF
      ELSEIF_COND ( $ "Other Data.PVandGWInflows" [] <= $ "Demand Data.TotalStorageReductionLookup" [15.00000000, 1.00000000] AND $ "Other Data.PVandGWInflows" [] > $ "Demand Data.TotalStorageReductionLookup" [14.00000000, 1.00000000] )
      ELSEIF_CLAUSE
            IF_STATEMENT ($ "Demand Data.TotalStorageReductionLookup" [15.00000000, 4.00000000] > $ "Demand Data.DemandReductionProbThreshold" []) THEN
            $ "Demand Data.TotalReductionStatus" [] := 4.00000000;

      ELSE
            $ "Demand Data.TotalReductionStatus" [] := 1.00000000;

      END_IF_STATEMENT
      ELSEIF_COND ( $ "Demand Data.TotalStorageReductionLookup" [15.00000000, 3.00000000] > $ "Demand Data.DemandReductionProbThreshold" [] )
      ELSEIF_CLAUSE
            $ "Demand Data.TotalReductionStatus" [] := 3.00000000;
      END_ELSEIF
      ELSEIF_COND ( $ "Demand Data.TotalStorageReductionLookup" [15.00000000, 2.00000000] > $ "Demand Data.DemandReductionProbThreshold" [] )
      ELSEIF_CLAUSE
            $ "Demand Data.TotalReductionStatus" [] := 2.00000000;
      END_ELSEIF;
      END_ELSEIF;
      END_ELSEIF;

      ELSE
            $ "Demand Data.TotalReductionStatus" [] := $ "Demand Data.TotalReductionStatus" [@"t - 1"];

      END_IF_STATEMENT;

    END
    UUID "{7b0ae907-1173-41f4-bb7f-9efb32d81859}";;

    RULE                 "Demand Managment Upstream Status Check";
    DESCRIPTION          "";
    ACTIVE               FALSE;
    RULE_EXEC_CONSTRAINT NOT "HasRuleFiredSuccessfully"( "Current Rule" );
  NAMES_COLOR  "#00aaff";
    NOTES                "";
    BEGIN

    DESCRIPTION          "<comment>reduction status can take values of 1, 2, 3, and 4, which correspond with a Green, <br>Yellow, Orange, and Red reduction respectively. <br>";
      IF_STATEMENT (@"t" == "CompletePartialDate"( @"March", @"t" )) THEN
            IF_STATEMENT ($ "Other Data.UpstreamStorage" [@"t - 1"] <= $ "Demand Data.UpstreamStorageReductionLookup" [0.00000000, 0.00000000]) THEN
            IF_STATEMENT ($ "Other Data.PVandGWInflows" [] <= $ "Demand Data.UpstreamStorageReductionLookup" [0.00000000, 1.00000000]) THEN
            IF_STATEMENT ($ "Demand Data.UpstreamStorageReductionLookup" [0.00000000, 4.00000000] > $ "Demand Data.DemandReductionProbThreshold" []) THEN
            $ "Demand Data.UpstreamReductionStatus" [] := 4.00000000;

      ELSE
            $ "Demand Data.UpstreamReductionStatus" [] := 1.00000000;

      END_IF_STATEMENT
      ELSEIF_COND ( $ "Demand Data.UpstreamStorageReductionLookup" [0.00000000, 3.00000000] > $ "Demand Data.DemandReductionProbThreshold" [] )
      ELSEIF_CLAUSE
            $ "Demand Data.UpstreamReductionStatus" [] := 3.00000000;
      END_ELSEIF
      ELSEIF_COND ( $ "Demand Data.UpstreamStorageReductionLookup" [0.00000000, 2.00000000] > $ "Demand Data.DemandReductionProbThreshold" [] )
      ELSEIF_CLAUSE
            $ "Demand Data.UpstreamReductionStatus" [] := 2.00000000;
      END_ELSEIF;

      ELSE
            $ "Demand Data.UpstreamReductionStatus" [] := 1.00000000;

      END_IF_STATEMENT
      ELSEIF_COND ( $ "Other Data.PVandGWInflows" [] <= $ "Demand Data.UpstreamStorageReductionLookup" [1.00000000, 1.00000000] AND $ "Other Data.PVandGWInflows" [] > $ "Demand Data.UpstreamStorageReductionLookup" [0.00000000, 1.00000000] )
      ELSEIF_CLAUSE
            IF_STATEMENT ($ "Demand Data.UpstreamStorageReductionLookup" [1.00000000, 4.00000000] > $ "Demand Data.DemandReductionProbThreshold" []) THEN
            $ "Demand Data.UpstreamReductionStatus" [] := 4.00000000;

      ELSE
            $ "Demand Data.UpstreamReductionStatus" [] := 1.00000000;

      END_IF_STATEMENT
      ELSEIF_COND ( $ "Demand Data.UpstreamStorageReductionLookup" [1.00000000, 3.00000000] > $ "Demand Data.DemandReductionProbThreshold" [] )
      ELSEIF_CLAUSE
            $ "Demand Data.UpstreamReductionStatus" [] := 3.00000000;
      END_ELSEIF
      ELSEIF_COND ( $ "Demand Data.UpstreamStorageReductionLookup" [1.00000000, 2.00000000] > $ "Demand Data.DemandReductionProbThreshold" [] )
      ELSEIF_CLAUSE
            $ "Demand Data.UpstreamReductionStatus" [] := 2.00000000;
      END_ELSEIF;
      END_ELSEIF
      ELSEIF_COND ( $ "Other Data.PVandGWInflows" [] <= $ "Demand Data.UpstreamStorageReductionLookup" [2.00000000, 1.00000000] AND $ "Other Data.PVandGWInflows" [] > $ "Demand Data.UpstreamStorageReductionLookup" [1.00000000, 1.00000000] )
      ELSEIF_CLAUSE
            IF_STATEMENT ($ "Demand Data.UpstreamStorageReductionLookup" [2.00000000, 4.00000000] > $ "Demand Data.DemandReductionProbThreshold" []) THEN
            $ "Demand Data.UpstreamReductionStatus" [] := 4.00000000;

      ELSE
            $ "Demand Data.UpstreamReductionStatus" [] := 1.00000000;

      END_IF_STATEMENT
      ELSEIF_COND ( $ "Demand Data.UpstreamStorageReductionLookup" [2.00000000, 3.00000000] > $ "Demand Data.DemandReductionProbThreshold" [] )
      ELSEIF_CLAUSE
            $ "Demand Data.UpstreamReductionStatus" [] := 3.00000000;
      END_ELSEIF
      ELSEIF_COND ( $ "Demand Data.UpstreamStorageReductionLookup" [2.00000000, 2.00000000] > $ "Demand Data.DemandReductionProbThreshold" [] )
      ELSEIF_CLAUSE
            $ "Demand Data.UpstreamReductionStatus" [] := 2.00000000;
      END_ELSEIF;
      END_ELSEIF
      ELSEIF_COND ( $ "Other Data.PVandGWInflows" [] <= $ "Demand Data.UpstreamStorageReductionLookup" [3.00000000, 1.00000000] AND $ "Other Data.PVandGWInflows" [] > $ "Demand Data.UpstreamStorageReductionLookup" [2.00000000, 1.00000000] )
      ELSEIF_CLAUSE
            IF_STATEMENT ($ "Demand Data.UpstreamStorageReductionLookup" [3.00000000, 4.00000000] > $ "Demand Data.DemandReductionProbThreshold" []) THEN
            $ "Demand Data.UpstreamReductionStatus" [] := 4.00000000;

      ELSE
            $ "Demand Data.UpstreamReductionStatus" [] := 1.00000000;

      END_IF_STATEMENT
      ELSEIF_COND ( $ "Demand Data.UpstreamStorageReductionLookup" [3.00000000, 3.00000000] > $ "Demand Data.DemandReductionProbThreshold" [] )
      ELSEIF_CLAUSE
            $ "Demand Data.UpstreamReductionStatus" [] := 3.00000000;
      END_ELSEIF
      ELSEIF_COND ( $ "Demand Data.UpstreamStorageReductionLookup" [3.00000000, 2.00000000] > $ "Demand Data.DemandReductionProbThreshold" [] )
      ELSEIF_CLAUSE
            $ "Demand Data.UpstreamReductionStatus" [] := 2.00000000;
      END_ELSEIF;
      END_ELSEIF;

      ELSE
            $ "Demand Data.UpstreamReductionStatus" [] := 1.00000000;

      END_IF_STATEMENT
      ELSEIF_COND ( $ "Other Data.UpstreamStorage" [@"t - 1"] <= $ "Demand Data.UpstreamStorageReductionLookup" [4.00000000, 0.00000000] AND $ "Other Data.UpstreamStorage" [@"t - 1"] > $ "Demand Data.UpstreamStorageReductionLookup" [0.00000000, 0.00000000] )
      ELSEIF_CLAUSE
            IF_STATEMENT ($ "Other Data.PVandGWInflows" [] <= $ "Demand Data.UpstreamStorageReductionLookup" [4.00000000, 1.00000000]) THEN
            IF_STATEMENT ($ "Demand Data.UpstreamStorageReductionLookup" [4.00000000, 4.00000000] > $ "Demand Data.DemandReductionProbThreshold" []) THEN
            $ "Demand Data.UpstreamReductionStatus" [] := 4.00000000;

      ELSE
            $ "Demand Data.UpstreamReductionStatus" [] := 1.00000000;

      END_IF_STATEMENT
      ELSEIF_COND ( $ "Demand Data.UpstreamStorageReductionLookup" [4.00000000, 3.00000000] > $ "Demand Data.DemandReductionProbThreshold" [] )
      ELSEIF_CLAUSE
            $ "Demand Data.UpstreamReductionStatus" [] := 3.00000000;
      END_ELSEIF
      ELSEIF_COND ( $ "Demand Data.UpstreamStorageReductionLookup" [4.00000000, 2.00000000] > $ "Demand Data.DemandReductionProbThreshold" [] )
      ELSEIF_CLAUSE
            $ "Demand Data.UpstreamReductionStatus" [] := 2.00000000;
      END_ELSEIF;

      ELSE
            $ "Demand Data.UpstreamReductionStatus" [] := 1.00000000;

      END_IF_STATEMENT
      ELSEIF_COND ( $ "Other Data.PVandGWInflows" [] <= $ "Demand Data.UpstreamStorageReductionLookup" [5.00000000, 1.00000000] AND $ "Other Data.PVandGWInflows" [] > $ "Demand Data.UpstreamStorageReductionLookup" [4.00000000, 1.00000000] )
      ELSEIF_CLAUSE
            IF_STATEMENT ($ "Demand Data.UpstreamStorageReductionLookup" [5.00000000, 4.00000000] > $ "Demand Data.DemandReductionProbThreshold" []) THEN
            $ "Demand Data.UpstreamReductionStatus" [] := 4.00000000;

      ELSE
            $ "Demand Data.UpstreamReductionStatus" [] := 1.00000000;

      END_IF_STATEMENT
      ELSEIF_COND ( $ "Demand Data.UpstreamStorageReductionLookup" [5.00000000, 3.00000000] > $ "Demand Data.DemandReductionProbThreshold" [] )
      ELSEIF_CLAUSE
            $ "Demand Data.UpstreamReductionStatus" [] := 3.00000000;
      END_ELSEIF
      ELSEIF_COND ( $ "Demand Data.UpstreamStorageReductionLookup" [5.00000000, 2.00000000] > $ "Demand Data.DemandReductionProbThreshold" [] )
      ELSEIF_CLAUSE
            $ "Demand Data.UpstreamReductionStatus" [] := 2.00000000;
      END_ELSEIF;
      END_ELSEIF
      ELSEIF_COND ( $ "Other Data.PVandGWInflows" [] <= $ "Demand Data.UpstreamStorageReductionLookup" [6.00000000, 1.00000000] AND $ "Other Data.PVandGWInflows" [] > $ "Demand Data.UpstreamStorageReductionLookup" [5.00000000, 1.00000000] )
      ELSEIF_CLAUSE
            IF_STATEMENT ($ "Demand Data.UpstreamStorageReductionLookup" [6.00000000, 4.00000000] > $ "Demand Data.DemandReductionProbThreshold" []) THEN
            $ "Demand Data.UpstreamReductionStatus" [] := 4.00000000;

      ELSE
            $ "Demand Data.UpstreamReductionStatus" [] := 1.00000000;

      END_IF_STATEMENT
      ELSEIF_COND ( $ "Demand Data.UpstreamStorageReductionLookup" [6.00000000, 3.00000000] > $ "Demand Data.DemandReductionProbThreshold" [] )
      ELSEIF_CLAUSE
            $ "Demand Data.UpstreamReductionStatus" [] := 3.00000000;
      END_ELSEIF
      ELSEIF_COND ( $ "Demand Data.UpstreamStorageReductionLookup" [6.00000000, 2.00000000] > $ "Demand Data.DemandReductionProbThreshold" [] )
      ELSEIF_CLAUSE
            $ "Demand Data.UpstreamReductionStatus" [] := 2.00000000;
      END_ELSEIF;
      END_ELSEIF
      ELSEIF_COND ( $ "Other Data.PVandGWInflows" [] <= $ "Demand Data.UpstreamStorageReductionLookup" [7.00000000, 1.00000000] AND $ "Other Data.PVandGWInflows" [] > $ "Demand Data.UpstreamStorageReductionLookup" [6.00000000, 1.00000000] )
      ELSEIF_CLAUSE
            IF_STATEMENT ($ "Demand Data.UpstreamStorageReductionLookup" [7.00000000, 4.00000000] > $ "Demand Data.DemandReductionProbThreshold" []) THEN
            $ "Demand Data.UpstreamReductionStatus" [] := 4.00000000;

      ELSE
            $ "Demand Data.UpstreamReductionStatus" [] := 1.00000000;

      END_IF_STATEMENT
      ELSEIF_COND ( $ "Demand Data.UpstreamStorageReductionLookup" [7.00000000, 3.00000000] > $ "Demand Data.DemandReductionProbThreshold" [] )
      ELSEIF_CLAUSE
            $ "Demand Data.UpstreamReductionStatus" [] := 3.00000000;
      END_ELSEIF
      ELSEIF_COND ( $ "Demand Data.UpstreamStorageReductionLookup" [7.00000000, 2.00000000] > $ "Demand Data.DemandReductionProbThreshold" [] )
      ELSEIF_CLAUSE
            $ "Demand Data.UpstreamReductionStatus" [] := 2.00000000;
      END_ELSEIF;
      END_ELSEIF;
      END_ELSEIF
      ELSEIF_COND ( $ "Other Data.UpstreamStorage" [@"t - 1"] <= $ "Demand Data.UpstreamStorageReductionLookup" [8.00000000, 0.00000000] AND $ "Other Data.UpstreamStorage" [@"t - 1"] > $ "Demand Data.UpstreamStorageReductionLookup" [4.00000000, 0.00000000] )
      ELSEIF_CLAUSE
            IF_STATEMENT ($ "Other Data.PVandGWInflows" [] <= $ "Demand Data.UpstreamStorageReductionLookup" [8.00000000, 1.00000000]) THEN
            IF_STATEMENT ($ "Demand Data.UpstreamStorageReductionLookup" [8.00000000, 4.00000000] > $ "Demand Data.DemandReductionProbThreshold" []) THEN
            $ "Demand Data.UpstreamReductionStatus" [] := 4.00000000;

      ELSE
            $ "Demand Data.UpstreamReductionStatus" [] := 1.00000000;

      END_IF_STATEMENT
      ELSEIF_COND ( $ "Demand Data.UpstreamStorageReductionLookup" [8.00000000, 3.00000000] > $ "Demand Data.DemandReductionProbThreshold" [] )
      ELSEIF_CLAUSE
            $ "Demand Data.UpstreamReductionStatus" [] := 3.00000000;
      END_ELSEIF
      ELSEIF_COND ( $ "Demand Data.UpstreamStorageReductionLookup" [8.00000000, 2.00000000] > $ "Demand Data.DemandReductionProbThreshold" [] )
      ELSEIF_CLAUSE
            $ "Demand Data.UpstreamReductionStatus" [] := 2.00000000;
      END_ELSEIF;

      ELSE
            $ "Demand Data.UpstreamReductionStatus" [] := 1.00000000;

      END_IF_STATEMENT
      ELSEIF_COND ( $ "Other Data.PVandGWInflows" [] <= $ "Demand Data.UpstreamStorageReductionLookup" [9.00000000, 1.00000000] AND $ "Other Data.PVandGWInflows" [] > $ "Demand Data.UpstreamStorageReductionLookup" [8.00000000, 1.00000000] )
      ELSEIF_CLAUSE
            IF_STATEMENT ($ "Demand Data.UpstreamStorageReductionLookup" [9.00000000, 4.00000000] > $ "Demand Data.DemandReductionProbThreshold" []) THEN
            $ "Demand Data.UpstreamReductionStatus" [] := 4.00000000;

      ELSE
            $ "Demand Data.UpstreamReductionStatus" [] := 1.00000000;

      END_IF_STATEMENT
      ELSEIF_COND ( $ "Demand Data.UpstreamStorageReductionLookup" [9.00000000, 3.00000000] > $ "Demand Data.DemandReductionProbThreshold" [] )
      ELSEIF_CLAUSE
            $ "Demand Data.UpstreamReductionStatus" [] := 3.00000000;
      END_ELSEIF
      ELSEIF_COND ( $ "Demand Data.UpstreamStorageReductionLookup" [9.00000000, 2.00000000] > $ "Demand Data.DemandReductionProbThreshold" [] )
      ELSEIF_CLAUSE
            $ "Demand Data.UpstreamReductionStatus" [] := 2.00000000;
      END_ELSEIF;
      END_ELSEIF
      ELSEIF_COND ( $ "Other Data.PVandGWInflows" [] <= $ "Demand Data.UpstreamStorageReductionLookup" [10.00000000, 1.00000000] AND $ "Other Data.PVandGWInflows" [] > $ "Demand Data.UpstreamStorageReductionLookup" [9.00000000, 1.00000000] )
      ELSEIF_CLAUSE
            IF_STATEMENT ($ "Demand Data.UpstreamStorageReductionLookup" [10.00000000, 4.00000000] > $ "Demand Data.DemandReductionProbThreshold" []) THEN
            $ "Demand Data.UpstreamReductionStatus" [] := 4.00000000;

      ELSE
            $ "Demand Data.UpstreamReductionStatus" [] := 1.00000000;

      END_IF_STATEMENT
      ELSEIF_COND ( $ "Demand Data.UpstreamStorageReductionLookup" [10.00000000, 3.00000000] > $ "Demand Data.DemandReductionProbThreshold" [] )
      ELSEIF_CLAUSE
            $ "Demand Data.UpstreamReductionStatus" [] := 3.00000000;
      END_ELSEIF
      ELSEIF_COND ( $ "Demand Data.UpstreamStorageReductionLookup" [10.00000000, 2.00000000] > $ "Demand Data.DemandReductionProbThreshold" [] )
      ELSEIF_CLAUSE
            $ "Demand Data.UpstreamReductionStatus" [] := 2.00000000;
      END_ELSEIF;
      END_ELSEIF
      ELSEIF_COND ( $ "Other Data.PVandGWInflows" [] <= $ "Demand Data.UpstreamStorageReductionLookup" [11.00000000, 1.00000000] AND $ "Other Data.PVandGWInflows" [] > $ "Demand Data.UpstreamStorageReductionLookup" [10.00000000, 1.00000000] )
      ELSEIF_CLAUSE
            IF_STATEMENT ($ "Demand Data.UpstreamStorageReductionLookup" [11.00000000, 4.00000000] > $ "Demand Data.DemandReductionProbThreshold" []) THEN
            $ "Demand Data.UpstreamReductionStatus" [] := 4.00000000;

      ELSE
            $ "Demand Data.UpstreamReductionStatus" [] := 1.00000000;

      END_IF_STATEMENT
      ELSEIF_COND ( $ "Demand Data.UpstreamStorageReductionLookup" [11.00000000, 3.00000000] > $ "Demand Data.DemandReductionProbThreshold" [] )
      ELSEIF_CLAUSE
            $ "Demand Data.UpstreamReductionStatus" [] := 3.00000000;
      END_ELSEIF
      ELSEIF_COND ( $ "Demand Data.UpstreamStorageReductionLookup" [11.00000000, 2.00000000] > $ "Demand Data.DemandReductionProbThreshold" [] )
      ELSEIF_CLAUSE
            $ "Demand Data.UpstreamReductionStatus" [] := 2.00000000;
      END_ELSEIF;
      END_ELSEIF;
      END_ELSEIF
      ELSEIF_COND ( $ "Other Data.UpstreamStorage" [@"t - 1"] <= $ "Demand Data.UpstreamStorageReductionLookup" [12.00000000, 0.00000000] AND $ "Other Data.UpstreamStorage" [@"t - 1"] > $ "Demand Data.UpstreamStorageReductionLookup" [8.00000000, 0.00000000] )
      ELSEIF_CLAUSE
            IF_STATEMENT ($ "Other Data.PVandGWInflows" [] <= $ "Demand Data.UpstreamStorageReductionLookup" [12.00000000, 1.00000000]) THEN
            IF_STATEMENT ($ "Demand Data.UpstreamStorageReductionLookup" [12.00000000, 4.00000000] > $ "Demand Data.DemandReductionProbThreshold" []) THEN
            $ "Demand Data.UpstreamReductionStatus" [] := 4.00000000;

      ELSE
            $ "Demand Data.UpstreamReductionStatus" [] := 1.00000000;

      END_IF_STATEMENT
      ELSEIF_COND ( $ "Demand Data.UpstreamStorageReductionLookup" [12.00000000, 3.00000000] > $ "Demand Data.DemandReductionProbThreshold" [] )
      ELSEIF_CLAUSE
            $ "Demand Data.UpstreamReductionStatus" [] := 3.00000000;
      END_ELSEIF
      ELSEIF_COND ( $ "Demand Data.UpstreamStorageReductionLookup" [12.00000000, 2.00000000] > $ "Demand Data.DemandReductionProbThreshold" [] )
      ELSEIF_CLAUSE
            $ "Demand Data.UpstreamReductionStatus" [] := 2.00000000;
      END_ELSEIF;

      ELSE
            $ "Demand Data.UpstreamReductionStatus" [] := 1.00000000;

      END_IF_STATEMENT
      ELSEIF_COND ( $ "Other Data.PVandGWInflows" [] <= $ "Demand Data.UpstreamStorageReductionLookup" [13.00000000, 1.00000000] AND $ "Other Data.PVandGWInflows" [] > $ "Demand Data.UpstreamStorageReductionLookup" [12.00000000, 1.00000000] )
      ELSEIF_CLAUSE
            IF_STATEMENT ($ "Demand Data.UpstreamStorageReductionLookup" [13.00000000, 4.00000000] > $ "Demand Data.DemandReductionProbThreshold" []) THEN
            $ "Demand Data.UpstreamReductionStatus" [] := 4.00000000;

      ELSE
            $ "Demand Data.UpstreamReductionStatus" [] := 1.00000000;

      END_IF_STATEMENT
      ELSEIF_COND ( $ "Demand Data.UpstreamStorageReductionLookup" [13.00000000, 3.00000000] > $ "Demand Data.DemandReductionProbThreshold" [] )
      ELSEIF_CLAUSE
            $ "Demand Data.UpstreamReductionStatus" [] := 3.00000000;
      END_ELSEIF
      ELSEIF_COND ( $ "Demand Data.UpstreamStorageReductionLookup" [13.00000000, 2.00000000] > $ "Demand Data.DemandReductionProbThreshold" [] )
      ELSEIF_CLAUSE
            $ "Demand Data.UpstreamReductionStatus" [] := 2.00000000;
      END_ELSEIF;
      END_ELSEIF
      ELSEIF_COND ( $ "Other Data.PVandGWInflows" [] <= $ "Demand Data.UpstreamStorageReductionLookup" [14.00000000, 1.00000000] AND $ "Other Data.PVandGWInflows" [] > $ "Demand Data.UpstreamStorageReductionLookup" [13.00000000, 1.00000000] )
      ELSEIF_CLAUSE
            IF_STATEMENT ($ "Demand Data.UpstreamStorageReductionLookup" [14.00000000, 4.00000000] > $ "Demand Data.DemandReductionProbThreshold" []) THEN
            $ "Demand Data.UpstreamReductionStatus" [] := 4.00000000;

      ELSE
            $ "Demand Data.UpstreamReductionStatus" [] := 1.00000000;

      END_IF_STATEMENT
      ELSEIF_COND ( $ "Demand Data.UpstreamStorageReductionLookup" [14.00000000, 3.00000000] > $ "Demand Data.DemandReductionProbThreshold" [] )
      ELSEIF_CLAUSE
            $ "Demand Data.UpstreamReductionStatus" [] := 3.00000000;
      END_ELSEIF
      ELSEIF_COND ( $ "Demand Data.UpstreamStorageReductionLookup" [14.00000000, 2.00000000] > $ "Demand Data.DemandReductionProbThreshold" [] )
      ELSEIF_CLAUSE
            $ "Demand Data.UpstreamReductionStatus" [] := 2.00000000;
      END_ELSEIF;
      END_ELSEIF
      ELSEIF_COND ( $ "Other Data.PVandGWInflows" [] <= $ "Demand Data.UpstreamStorageReductionLookup" [15.00000000, 1.00000000] AND $ "Other Data.PVandGWInflows" [] > $ "Demand Data.UpstreamStorageReductionLookup" [14.00000000, 1.00000000] )
      ELSEIF_CLAUSE
            IF_STATEMENT ($ "Demand Data.UpstreamStorageReductionLookup" [15.00000000, 4.00000000] > $ "Demand Data.DemandReductionProbThreshold" []) THEN
            $ "Demand Data.UpstreamReductionStatus" [] := 4.00000000;

      ELSE
            $ "Demand Data.UpstreamReductionStatus" [] := 1.00000000;

      END_IF_STATEMENT
      ELSEIF_COND ( $ "Demand Data.UpstreamStorageReductionLookup" [15.00000000, 3.00000000] > $ "Demand Data.DemandReductionProbThreshold" [] )
      ELSEIF_CLAUSE
            $ "Demand Data.UpstreamReductionStatus" [] := 3.00000000;
      END_ELSEIF
      ELSEIF_COND ( $ "Demand Data.UpstreamStorageReductionLookup" [15.00000000, 2.00000000] > $ "Demand Data.DemandReductionProbThreshold" [] )
      ELSEIF_CLAUSE
            $ "Demand Data.UpstreamReductionStatus" [] := 2.00000000;
      END_ELSEIF;
      END_ELSEIF;
      END_ELSEIF;

      ELSE
            $ "Demand Data.UpstreamReductionStatus" [] := $ "Demand Data.UpstreamReductionStatus" [@"t - 1"];

      END_IF_STATEMENT;

    END
    UUID "{73836c67-da94-4b3d-82b4-268e042fa001}";;

    RULE                 "Pineview Pool";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT NOT "HasRuleFiredSuccessfully"( "Current Rule" );
    NOTES                "";
    BEGIN

      $ "Protected Pools.Pineview" [] := "Max"( $ "RES7 Pineview.Storage" [] - $ "Protected Pools.Ogden River Project Pineview" [], 0.00000000 "acre-ft" );

    END
    UUID "{55f24ab1-52ca-4165-8266-268197d9de6b}";;

    RULE                 "East Canyon Pool";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT NOT "HasRuleFiredSuccessfully"( "Current Rule" );
    NOTES                "";
    BEGIN

      $ "Protected Pools.East Canyon" [] := "Max"( $ "RES5 East Canyon.Storage" [] - $ "Protected Pools.Davis Weber Canal East Canyon" [], 0.00000000 "acre-ft" );

    END
    UUID "{eaa3e8b7-bad3-4003-80f2-c3c24e9ce525}";;

    RULE                 "Protected Pools Rule";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT NOT "HasRuleFiredSuccessfully"( "Current Rule" );
    NOTES                "";
    BEGIN

      IF_STATEMENT (@"t" == "CompletePartialDate"( @"April", @"t" )) THEN
            $ "Protected Pools.Ogden River Project Pineview" [] := "Min"( 44000.00000000 "acre-ft", $ "RES7 Pineview.Storage" [] - $ "Reservoir Data.Min Storages" [6.00000000, 0.00000000] );

            $ "Protected Pools.Davis Weber Canal East Canyon" [] := "Min"( 28800.00000000 "acre-ft", $ "RES5 East Canyon.Storage" [] - $ "Reservoir Data.Min Storages" [4.00000000, 0.00000000] );

      ELSE
            IF_STATEMENT (@"t" == "CompletePartialDate"( @"May", @"t" )) THEN
            $ "Protected Pools.Ogden River Project Pineview" [] := "Min"( 44000.00000000 "acre-ft", $ "RES7 Pineview.Storage" [] - $ "Reservoir Data.Min Storages" [6.00000000, 0.00000000] );

            $ "Protected Pools.Davis Weber Canal East Canyon" [] := "Min"( 28800.00000000 "acre-ft", $ "RES5 East Canyon.Storage" [] - $ "Reservoir Data.Min Storages" [4.00000000, 0.00000000] );

      ELSE
            IF_STATEMENT (@"t" == "CompletePartialDate"( @"June", @"t" )) THEN
            $ "Protected Pools.Ogden River Project Pineview" [] := "Min"( 44000.00000000 "acre-ft", $ "RES7 Pineview.Storage" [] - $ "Reservoir Data.Min Storages" [6.00000000, 0.00000000] );

            $ "Protected Pools.Davis Weber Canal East Canyon" [] := "Min"( 28800.00000000 "acre-ft", $ "RES5 East Canyon.Storage" [] - $ "Reservoir Data.Min Storages" [4.00000000, 0.00000000] );

      ELSE
            $ "Protected Pools.Ogden River Project Pineview" [] := $ "Protected Pools.Ogden River Project Pineview" [@"t - 1"];

            $ "Protected Pools.Davis Weber Canal East Canyon" [] := $ "Protected Pools.Davis Weber Canal East Canyon" [@"t - 1"];

      END_IF_STATEMENT;

      END_IF_STATEMENT;

      END_IF_STATEMENT;

    END
    UUID "{621bec7c-d435-4fe3-8155-971891aefb97}";;

    RULE                 "AREA9 Bypass";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT NOT "HasRuleFiredSuccessfully"( "Current Rule" );
    NOTES                "";
    BEGIN

      $ "Weber River Near Stoddard 1.Minimum Diversion Bypass" [] := "Max"( $ "East Canyon Creek.Outflow" [] - "MinFlow"( % "RES5 East Canyon", 300.00000000 "acre-ft/month" ), 0.00000000 "acre-ft/month" );

    END
    UUID "{e665ee3a-7086-420f-af4c-1bdd0dd478ab}";;

    RULE                 "Willard Release";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT NOT "HasRuleFiredSuccessfully"( "Current Rule" );
    NOTES                "";
    BEGIN

      $ "RES8 Willard Bay.Release" [] := 0.00000000 "acre-ft/month";

    END
    UUID "{1f1ce90d-2480-4516-ad55-ffcdf2b93ba4}";;

    RULE                 "Div Request SA11";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT NOT "HasRuleFiredSuccessfully"( "Current Rule" );
    NOTES                "";
    BEGIN

      IF_STATEMENT ($ "RES3 Echo.Storage" [] < $ "Other Data.DW Pump Criteria Echo" [] AND $ "RES5 East Canyon.Storage" [] < $ "Other Data.DW Pump Criteria East Canyon" []) THEN
            $ "Davis Weber Canal Diversion 1.Diversion Request" [] := $ "Davis Weber Canal Diversion:SA11 Davis Weber Canal.Diversion Requested" [] * 0.10000000;

            $ "Davis Weber Canal PUMP Diversion 2.Diversion Request" [] := $ "Davis Weber Canal Diversion:SA11 Davis Weber Canal.Diversion Requested" [] * 0.90000000;

      ELSE
            $ "Davis Weber Canal PUMP Diversion 2.Diversion Request" [] := 0.00000000 "acre-feet/month";

      END_IF_STATEMENT;

    END
    UUID "{d22e6793-8a9f-41a7-ae14-3bd5b2cc5ad6}";;

    RULE                 "Div Request RES8";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT NOT "HasRuleFiredSuccessfully"( "Current Rule" );
    NOTES                "";
    BEGIN

      $ "Willard Diversion.Diversion Request" [] := 0.00000000 "cfs";

    END
    UUID "{657a2e40-6d82-43ab-9f2f-28c84ba3dbc8}";;

    RULE                 "RES9 Div Request Mar-Jun";
    DESCRIPTION          "";
    ACTIVE               FALSE;
    RULE_EXEC_CONSTRAINT NOT "HasRuleFiredSuccessfully"( "Current Rule" );
  NAMES_COLOR  "#ffaa00";
    NOTES                "";
    BEGIN

      IF_STATEMENT (( @"t" == "CompletePartialDate"( @"March", @"t" ) OR @"t" == "CompletePartialDate"( @"April", @"t" ) OR @"t" == "CompletePartialDate"( @"May", @"t" ) OR @"t" == "CompletePartialDate"( @"June", @"t" ) ) AND $ "RES9 Gravel Pit.Storage" [@"t - 1"] < 16000.00000000 "acre-feet") THEN
            $ "New Res Diversion.Diversion Request" [] := 16000.00000000 "acre-feet/month" - $ "RES9 Gravel Pit.Storage" [@"t - 1"] / "GetTimestep"( @"t" );

      ELSE
            $ "New Res Diversion.Diversion Request" [] := 0.00000000 "acre-feet/month";

      END_IF_STATEMENT;

    END
    UUID "{26d1d76a-eac5-420d-9921-2c49e2d48726}";;

    RULE                 "RES9 Div Request Year Round";
    DESCRIPTION          "";
    ACTIVE               FALSE;
    RULE_EXEC_CONSTRAINT NOT "HasRuleFiredSuccessfully"( "Current Rule" );
  NAMES_COLOR  "#ffaa00";
    NOTES                "";
    BEGIN

      $ "New Res Diversion.Diversion Request" [] := "Min"( 16000.00000000 "acre-feet/month" - $ "RES9 Gravel Pit.Storage" [@"t - 1"] / "GetTimestep"( @"t" ), 13.00000000 "cfs" );

    END
    UUID "{e68a15a4-f2fe-4826-a371-18b55601f016}";;

    RULE                 "ASR Pumped Flow";
    DESCRIPTION          "";
    ACTIVE               FALSE;
    RULE_EXEC_CONSTRAINT NOT "HasRuleFiredSuccessfully"( "Current Rule" );
  NAMES_COLOR  "#00aa7f";
    NOTES                "";
    BEGIN

      $ "WBWCD ASR.Pumped Flow" [] := 0.00000000 "acre-feet/month";

    END
    UUID "{1eb63354-69c7-44db-b10e-eca07313cc9a}";;

    RULE                 "ASR Div Request Mar-Aug";
    DESCRIPTION          "";
    ACTIVE               FALSE;
    RULE_EXEC_CONSTRAINT NOT "HasRuleFiredSuccessfully"( "Current Rule" );
  NAMES_COLOR  "#00aa7f";
    NOTES                "";
    BEGIN

      IF_STATEMENT (@"t" == "CompletePartialDate"( @"March", @"t" ) OR @"t" == "CompletePartialDate"( @"April", @"t" ) OR @"t" == "CompletePartialDate"( @"May", @"t" ) OR @"t" == "CompletePartialDate"( @"June", @"t" ) OR @"t" == "CompletePartialDate"( @"July", @"t" ) OR @"t" == "CompletePartialDate"( @"August", @"t" )) THEN
            $ "New Res Diversion.Diversion Request" [] := 1667.00000000 "acre-feet/month";

      ELSE
            $ "New Res Diversion.Diversion Request" [] := 0.00000000 "acre-feet/month";

      END_IF_STATEMENT;

    END
    UUID "{f1e4d6da-a125-47b1-abc6-0b8510ebf4d0}";;

    RULE                 "ASR Accounting";
    DESCRIPTION          "";
    ACTIVE               FALSE;
    RULE_EXEC_CONSTRAINT NOT "HasRuleFiredSuccessfully"( "Current Rule" );
  NAMES_COLOR  "#00aa7f";
    NOTES                "";
    BEGIN

      IF_STATEMENT (@"t" == "CompletePartialDate"( @"January", @"t" )) THEN
            $ "Other Data.ASRCurrentYr" [] := 0.00000000 "acre-feet";

            $ "Other Data.ASRYr1" [] := $ "Other Data.ASRCurrentYr" [@"t - 1"];

            $ "Other Data.ASRYr2" [] := $ "Other Data.ASRYr1" [@"t - 1"];

            $ "Other Data.ASRHalf" [] := ( $ "Other Data.ASRYr2" [@"t - 1"] + $ "Other Data.ASRHalf" [@"t - 1"] ) * 0.50000000;

            $ "WBWCD ASR.Percolation" [] := ( $ "Other Data.ASRYr2" [@"t - 1"] + $ "Other Data.ASRHalf" [@"t - 1"] ) * 0.50000000 / "GetTimestep"( @"t" );

      ELSE
            $ "Other Data.ASRCurrentYr" [] := $ "Other Data.ASRCurrentYr" [@"t - 1"] + $ "WBWCD ASR.Inflow" [@"t - 1"] * "GetTimestep"( @"t" );

            $ "Other Data.ASRYr1" [] := $ "Other Data.ASRYr1" [@"t - 1"];

            $ "Other Data.ASRYr2" [] := $ "Other Data.ASRYr2" [@"t - 1"];

            $ "Other Data.ASRHalf" [] := $ "Other Data.ASRHalf" [@"t - 1"];

      END_IF_STATEMENT;

    END
    UUID "{8e076bca-8770-4854-8628-8ba7fbabcbd7}";;

    RULE                 "RES10 Rel";
    DESCRIPTION          "";
    ACTIVE               FALSE;
    RULE_EXEC_CONSTRAINT NOT "HasRuleFiredSuccessfully"( "Current Rule" );
  NAMES_COLOR  "#ff55ff";
    NOTES                "";
    BEGIN

      % "RES10 Chalk Creek" & "Outflow" [] := "MinFlow"( % "RES10 Chalk Creek", 0.00000000 "acre-ft/month" );

    END
    UUID "{331366a9-c575-47a2-812c-7ae3f89694b5}";;

    RULE                 "RES9 Rel";
    DESCRIPTION          "";
    ACTIVE               FALSE;
    RULE_EXEC_CONSTRAINT NOT "HasRuleFiredSuccessfully"( "Current Rule" );
  NAMES_COLOR  "#ffaa00";
    NOTES                "";
    BEGIN

      % "RES9 Gravel Pit" & "Outflow" [] := "MinFlow"( % "RES9 Gravel Pit", 0.00000000 "acre-ft/month" );

    END
    UUID "{fd68377a-c92a-469a-9a0e-0731b26ac1bb}";;

    RULE                 "RES7 Rel";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT NOT "HasRuleFiredSuccessfully"( "Current Rule" );
    NOTES                "";
    BEGIN

      % "RES7 Pineview" & "Outflow" [] := "MinFlow"( % "RES7 Pineview", 600.00000000 "acre-ft/month" );

    END
    UUID "{09e59efa-0c9b-4b94-afc3-833a345fd9ef}";;

    RULE                 "RES6 Rel";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT NOT "HasRuleFiredSuccessfully"( "Current Rule" );
    NOTES                "";
    BEGIN

      % "RES6 Causey" & "Outflow" [] := "MinFlow"( % "RES6 Causey", 600.00000000 "acre-ft/month" );

    END
    UUID "{e269057f-0569-443d-aef1-36e80302e17b}";;

    RULE                 "RES5 Rel";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT NOT "HasRuleFiredSuccessfully"( "Current Rule" );
    NOTES                "";
    BEGIN

      % "RES5 East Canyon" & "Outflow" [] := "MinFlow"( % "RES5 East Canyon", 300.00000000 "acre-ft/month" );

    END
    UUID "{f9a2e31f-1116-4a22-8977-4bb26545af3f}";;

    RULE                 "RES4 Rel";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT NOT "HasRuleFiredSuccessfully"( "Current Rule" );
    NOTES                "";
    BEGIN

      % "RES4 Lost Creek" & "Outflow" [] := "MinFlow"( % "RES4 Lost Creek", 450.00000000 "acre-ft/month" );

    END
    UUID "{4ce67705-0eb8-42d4-848b-5257e9955878}";;

    RULE                 "RES3 Rel";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT NOT "HasRuleFiredSuccessfully"( "Current Rule" );
    NOTES                "";
    BEGIN

      % "RES3 Echo" & "Outflow" [] := "MinFlow"( % "RES3 Echo", 0.00000000 "acre-ft/month" );

    END
    UUID "{8310f138-69c4-42c8-aa38-f617678c342e}";;

    RULE                 "RES2 Rel";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT NOT "HasRuleFiredSuccessfully"( "Current Rule" );
    NOTES                "";
    BEGIN

      % "RES2 Rockport" & "Outflow" [] := "MinFlow"( % "RES2 Rockport", 3000.00000000 "acre-ft/month" );

    END
    UUID "{b11d00cb-1820-40ea-a2f8-0eca29b9c5b8}";;

    RULE                 "RES1 Rel";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT NOT "HasRuleFiredSuccessfully"( "Current Rule" );
    NOTES                "";
    BEGIN

      % "RES1 Smith And Morehouse" & "Outflow" [] := "MinFlow"( % "RES1 Smith And Morehouse", 450.00000000 "acre-ft/month" );

    END
    UUID "{8daa2e8e-297e-4924-a5b9-29961c3a0aa4}";;

    RULE                 "SA14 Bypass";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT NOT "HasRuleFiredSuccessfully"( "Current Rule" );
    NOTES                "";
    BEGIN

      $ "Ogden River Below Pineview 2.Minimum Diversion Bypass" [] := 600.00000000 "acre-ft/month";

    END
    UUID "{070724f4-28ab-414f-ac43-6ccf33f001cc}";;

    RULE                 "SA13 Bypass";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT NOT "HasRuleFiredSuccessfully"( "Current Rule" );
    NOTES                "";
    BEGIN

      $ "Ogden River Below Pinview 1.Minimum Diversion Bypass" [] := "Max"( 600.00000000 "acre-ft/month" - $ "Q60 Wheeler Creek.Gage Outflow" [], 0.00000000 "acre-ft/month" );

    END
    UUID "{a480b321-168f-4847-ac18-e0907776e22e}";;

    RULE                 "SA3 Bypass";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT NOT "HasRuleFiredSuccessfully"( "Current Rule" );
    NOTES                "";
    BEGIN

      $ "Weber River Near Wanship.Minimum Diversion Bypass" [] := 3000.00000000 "acre-ft/month";

    END
    UUID "{58693e5b-2a20-4473-9400-a3d752254607}";;

    RULE                 "Weber Provo Div Request - Check Echo";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT NOT "HasRuleFiredSuccessfully"( "Current Rule" );
    NOTES                "";
    BEGIN

      IF_STATEMENT ($ "Other Data.EchoCheck" [] != 1.00000000) THEN
            $ "Weber Provo Diversion:SA1 Weber Provo Canal.Diversion Requested" [] := 0.00000000 "acre-feet/month";

      END_IF_STATEMENT;

    END
    UUID "{e86fbaca-5660-4644-9c0b-4d05f41e726a}";;

    RULE                 "SetEchoCheck";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT NOT "HasRuleFiredSuccessfully"( "Current Rule" );
    NOTES                "";
    BEGIN

      IF_STATEMENT (@"t" == "RunStartDate"(  )) THEN
            $ "Other Data.EchoCheck" [] := 1.00000000;

      ELSE
            IF_STATEMENT ("CompletePartialDate"( @"April 30", @"t" ) == @"t") THEN
            $ "Other Data.EchoCheck" [] := 0.00000000;

      ELSE
            IF_STATEMENT ($ "Other Data.EchoCheck" [@"t - 1"] == 1.00000000) THEN
            $ "Other Data.EchoCheck" [] := 1.00000000;

      ELSE
            IF_STATEMENT ($ "RES3 Echo.Storage" [] >= 73000.00000000 "acre-feet") THEN
            $ "Other Data.EchoCheck" [] := 1.00000000;

      ELSE
            $ "Other Data.EchoCheck" [] := 0.00000000;

      END_IF_STATEMENT;

      END_IF_STATEMENT;

      END_IF_STATEMENT;

      END_IF_STATEMENT;

    END
    UUID "{e734cb37-f333-4fe6-b112-4e47714fed2d}";;

    RULE                 "Crop Fallowing Reduction";
    DESCRIPTION          "";
    ACTIVE               FALSE;
    RULE_EXEC_CONSTRAINT NOT "HasRuleFiredSuccessfully"( "Current Rule" );
  NAMES_COLOR  "#0055ff";
    NOTES                "";
    BEGIN

      IF_STATEMENT ($ "Demand Data.ReductionStatus" [] > 2.00000000) THEN
            $ "Davis Weber Canal Diversion:SA11 Davis Weber Canal.Diversion Requested" [] := $ "Demand Data.AnnualDemands" [10.00000000, 0.00000000] / "GetDaysInMonth"( @"t" ) * $ "Demand Data.SA11 Demand Pattern" [@"t", 0.00000000] * ( 1.00000000 - 1.00000000 / 242600.00000000 * 10000.00000000 );

            $ "Ogden Brigham and S Ogden Highline Canals:SA13 Ogden Brigham and S Ogden Highline Canals.Diversion Requested" [] := $ "Demand Data.AnnualDemands" [12.00000000, 0.00000000] / "GetDaysInMonth"( @"t" ) * $ "Demand Data.SA13 Demand Pattern" [@"t", 0.00000000] * ( 1.00000000 - 1.00000000 / 242600.00000000 * 10000.00000000 );

            $ "Slaterville Diversion:SA15 Slaterville.Diversion Requested" [] := $ "Demand Data.AnnualDemands" [14.00000000, 0.00000000] / "GetDaysInMonth"( @"t" ) * $ "Demand Data.SA15 Demand Pattern" [@"t", 0.00000000] * ( 1.00000000 - 1.00000000 / 242600.00000000 * 10000.00000000 );

            $ "Warren Canal Diversion:SA16 Warren Canal.Diversion Requested" [] := $ "Demand Data.AnnualDemands" [15.00000000, 0.00000000] / "GetDaysInMonth"( @"t" ) * $ "Demand Data.SA16 Demand Pattern" [@"t", 0.00000000] * ( 1.00000000 - 1.00000000 / 242600.00000000 * 10000.00000000 );

      ELSE
            $ "Davis Weber Canal Diversion:SA11 Davis Weber Canal.Diversion Requested" [] := $ "Demand Data.AnnualDemands" [10.00000000, 0.00000000] / "GetDaysInMonth"( @"t" ) * $ "Demand Data.SA11 Demand Pattern" [@"t", 0.00000000];

            $ "Ogden Brigham and S Ogden Highline Canals:SA13 Ogden Brigham and S Ogden Highline Canals.Diversion Requested" [] := $ "Demand Data.AnnualDemands" [12.00000000, 0.00000000] / "GetDaysInMonth"( @"t" ) * $ "Demand Data.SA13 Demand Pattern" [@"t", 0.00000000];

            $ "Slaterville Diversion:SA15 Slaterville.Diversion Requested" [] := $ "Demand Data.AnnualDemands" [14.00000000, 0.00000000] / "GetDaysInMonth"( @"t" ) * $ "Demand Data.SA15 Demand Pattern" [@"t", 0.00000000];

            $ "Warren Canal Diversion:SA16 Warren Canal.Diversion Requested" [] := $ "Demand Data.AnnualDemands" [15.00000000, 0.00000000] / "GetDaysInMonth"( @"t" ) * $ "Demand Data.SA16 Demand Pattern" [@"t", 0.00000000];

      END_IF_STATEMENT;

    END
    UUID "{9d849876-79c1-4421-9e75-2b42a5fca26d}";;

    RULE                 "Crop Fallowing Status Check";
    DESCRIPTION          "";
    ACTIVE               FALSE;
    RULE_EXEC_CONSTRAINT TRUE;
  NAMES_COLOR  "#0055ff";
    NOTES                "";
    BEGIN

      $ "Demand Data.ReductionStatus" [] := "Max"( $ "Demand Data.TotalReductionStatus" [], $ "Demand Data.UpstreamReductionStatus" [] );

    END
    UUID "{08d4074f-baf2-449c-b100-7cae1b1c5a2e}";;

    RULE                 "Crop Fallowing Total Status Check";
    DESCRIPTION          "";
    ACTIVE               FALSE;
    RULE_EXEC_CONSTRAINT TRUE;
  NAMES_COLOR  "#0055ff";
    NOTES                "";
    BEGIN

    DESCRIPTION          "<comment>reduction status can take values of 1, 2, 3, and 4, which correspond with a Green, <br>Yellow, Orange, and Red reduction respectively. <br>";
      IF_STATEMENT (@"t" == "CompletePartialDate"( @"March", @"t" )) THEN
            IF_STATEMENT ($ "Other Data.TotalStorage" [@"t - 1"] <= $ "Demand Data.TotalStorageReductionLookup" [0.00000000, 0.00000000]) THEN
            IF_STATEMENT ($ "Other Data.PVandGWInflows" [] <= $ "Demand Data.TotalStorageReductionLookup" [0.00000000, 1.00000000]) THEN
            IF_STATEMENT ($ "Demand Data.TotalStorageReductionLookup" [0.00000000, 4.00000000] > $ "Demand Data.DemandReductionProbThreshold" []) THEN
            $ "Demand Data.TotalReductionStatus" [] := 4.00000000;

      ELSE
            $ "Demand Data.TotalReductionStatus" [] := 1.00000000;

      END_IF_STATEMENT
      ELSEIF_COND ( $ "Demand Data.TotalStorageReductionLookup" [0.00000000, 3.00000000] > $ "Demand Data.DemandReductionProbThreshold" [] )
      ELSEIF_CLAUSE
            $ "Demand Data.TotalReductionStatus" [] := 3.00000000;
      END_ELSEIF
      ELSEIF_COND ( $ "Demand Data.TotalStorageReductionLookup" [0.00000000, 2.00000000] > $ "Demand Data.DemandReductionProbThreshold" [] )
      ELSEIF_CLAUSE
            $ "Demand Data.TotalReductionStatus" [] := 2.00000000;
      END_ELSEIF;

      ELSE
            $ "Demand Data.TotalReductionStatus" [] := 1.00000000;

      END_IF_STATEMENT
      ELSEIF_COND ( $ "Other Data.PVandGWInflows" [] <= $ "Demand Data.TotalStorageReductionLookup" [1.00000000, 1.00000000] AND $ "Other Data.PVandGWInflows" [] > $ "Demand Data.TotalStorageReductionLookup" [0.00000000, 1.00000000] )
      ELSEIF_CLAUSE
            IF_STATEMENT ($ "Demand Data.TotalStorageReductionLookup" [1.00000000, 4.00000000] > $ "Demand Data.DemandReductionProbThreshold" []) THEN
            $ "Demand Data.TotalReductionStatus" [] := 4.00000000;

      ELSE
            $ "Demand Data.TotalReductionStatus" [] := 1.00000000;

      END_IF_STATEMENT
      ELSEIF_COND ( $ "Demand Data.TotalStorageReductionLookup" [1.00000000, 3.00000000] > $ "Demand Data.DemandReductionProbThreshold" [] )
      ELSEIF_CLAUSE
            $ "Demand Data.TotalReductionStatus" [] := 3.00000000;
      END_ELSEIF
      ELSEIF_COND ( $ "Demand Data.TotalStorageReductionLookup" [1.00000000, 2.00000000] > $ "Demand Data.DemandReductionProbThreshold" [] )
      ELSEIF_CLAUSE
            $ "Demand Data.TotalReductionStatus" [] := 2.00000000;
      END_ELSEIF;
      END_ELSEIF
      ELSEIF_COND ( $ "Other Data.PVandGWInflows" [] <= $ "Demand Data.TotalStorageReductionLookup" [2.00000000, 1.00000000] AND $ "Other Data.PVandGWInflows" [] > $ "Demand Data.TotalStorageReductionLookup" [1.00000000, 1.00000000] )
      ELSEIF_CLAUSE
            IF_STATEMENT ($ "Demand Data.TotalStorageReductionLookup" [2.00000000, 4.00000000] > $ "Demand Data.DemandReductionProbThreshold" []) THEN
            $ "Demand Data.TotalReductionStatus" [] := 4.00000000;

      ELSE
            $ "Demand Data.TotalReductionStatus" [] := 1.00000000;

      END_IF_STATEMENT
      ELSEIF_COND ( $ "Demand Data.TotalStorageReductionLookup" [2.00000000, 3.00000000] > $ "Demand Data.DemandReductionProbThreshold" [] )
      ELSEIF_CLAUSE
            $ "Demand Data.TotalReductionStatus" [] := 3.00000000;
      END_ELSEIF
      ELSEIF_COND ( $ "Demand Data.TotalStorageReductionLookup" [2.00000000, 2.00000000] > $ "Demand Data.DemandReductionProbThreshold" [] )
      ELSEIF_CLAUSE
            $ "Demand Data.TotalReductionStatus" [] := 2.00000000;
      END_ELSEIF;
      END_ELSEIF
      ELSEIF_COND ( $ "Other Data.PVandGWInflows" [] <= $ "Demand Data.TotalStorageReductionLookup" [3.00000000, 1.00000000] AND $ "Other Data.PVandGWInflows" [] > $ "Demand Data.TotalStorageReductionLookup" [2.00000000, 1.00000000] )
      ELSEIF_CLAUSE
            IF_STATEMENT ($ "Demand Data.TotalStorageReductionLookup" [3.00000000, 4.00000000] > $ "Demand Data.DemandReductionProbThreshold" []) THEN
            $ "Demand Data.TotalReductionStatus" [] := 4.00000000;

      ELSE
            $ "Demand Data.TotalReductionStatus" [] := 1.00000000;

      END_IF_STATEMENT
      ELSEIF_COND ( $ "Demand Data.TotalStorageReductionLookup" [3.00000000, 3.00000000] > $ "Demand Data.DemandReductionProbThreshold" [] )
      ELSEIF_CLAUSE
            $ "Demand Data.TotalReductionStatus" [] := 3.00000000;
      END_ELSEIF
      ELSEIF_COND ( $ "Demand Data.TotalStorageReductionLookup" [3.00000000, 2.00000000] > $ "Demand Data.DemandReductionProbThreshold" [] )
      ELSEIF_CLAUSE
            $ "Demand Data.TotalReductionStatus" [] := 2.00000000;
      END_ELSEIF;
      END_ELSEIF;

      ELSE
            $ "Demand Data.TotalReductionStatus" [] := 1.00000000;

      END_IF_STATEMENT
      ELSEIF_COND ( $ "Other Data.TotalStorage" [@"t - 1"] <= $ "Demand Data.TotalStorageReductionLookup" [4.00000000, 0.00000000] AND $ "Other Data.TotalStorage" [@"t - 1"] > $ "Demand Data.TotalStorageReductionLookup" [0.00000000, 0.00000000] )
      ELSEIF_CLAUSE
            IF_STATEMENT ($ "Other Data.PVandGWInflows" [] <= $ "Demand Data.TotalStorageReductionLookup" [4.00000000, 1.00000000]) THEN
            IF_STATEMENT ($ "Demand Data.TotalStorageReductionLookup" [4.00000000, 4.00000000] > $ "Demand Data.DemandReductionProbThreshold" []) THEN
            $ "Demand Data.TotalReductionStatus" [] := 4.00000000;

      ELSE
            $ "Demand Data.TotalReductionStatus" [] := 1.00000000;

      END_IF_STATEMENT
      ELSEIF_COND ( $ "Demand Data.TotalStorageReductionLookup" [4.00000000, 3.00000000] > $ "Demand Data.DemandReductionProbThreshold" [] )
      ELSEIF_CLAUSE
            $ "Demand Data.TotalReductionStatus" [] := 3.00000000;
      END_ELSEIF
      ELSEIF_COND ( $ "Demand Data.TotalStorageReductionLookup" [4.00000000, 2.00000000] > $ "Demand Data.DemandReductionProbThreshold" [] )
      ELSEIF_CLAUSE
            $ "Demand Data.TotalReductionStatus" [] := 2.00000000;
      END_ELSEIF;

      ELSE
            $ "Demand Data.TotalReductionStatus" [] := 1.00000000;

      END_IF_STATEMENT
      ELSEIF_COND ( $ "Other Data.PVandGWInflows" [] <= $ "Demand Data.TotalStorageReductionLookup" [5.00000000, 1.00000000] AND $ "Other Data.PVandGWInflows" [] > $ "Demand Data.TotalStorageReductionLookup" [4.00000000, 1.00000000] )
      ELSEIF_CLAUSE
            IF_STATEMENT ($ "Demand Data.TotalStorageReductionLookup" [5.00000000, 4.00000000] > $ "Demand Data.DemandReductionProbThreshold" []) THEN
            $ "Demand Data.TotalReductionStatus" [] := 4.00000000;

      ELSE
            $ "Demand Data.TotalReductionStatus" [] := 1.00000000;

      END_IF_STATEMENT
      ELSEIF_COND ( $ "Demand Data.TotalStorageReductionLookup" [5.00000000, 3.00000000] > $ "Demand Data.DemandReductionProbThreshold" [] )
      ELSEIF_CLAUSE
            $ "Demand Data.TotalReductionStatus" [] := 3.00000000;
      END_ELSEIF
      ELSEIF_COND ( $ "Demand Data.TotalStorageReductionLookup" [5.00000000, 2.00000000] > $ "Demand Data.DemandReductionProbThreshold" [] )
      ELSEIF_CLAUSE
            $ "Demand Data.TotalReductionStatus" [] := 2.00000000;
      END_ELSEIF;
      END_ELSEIF
      ELSEIF_COND ( $ "Other Data.PVandGWInflows" [] <= $ "Demand Data.TotalStorageReductionLookup" [6.00000000, 1.00000000] AND $ "Other Data.PVandGWInflows" [] > $ "Demand Data.TotalStorageReductionLookup" [5.00000000, 1.00000000] )
      ELSEIF_CLAUSE
            IF_STATEMENT ($ "Demand Data.TotalStorageReductionLookup" [6.00000000, 4.00000000] > $ "Demand Data.DemandReductionProbThreshold" []) THEN
            $ "Demand Data.TotalReductionStatus" [] := 4.00000000;

      ELSE
            $ "Demand Data.TotalReductionStatus" [] := 1.00000000;

      END_IF_STATEMENT
      ELSEIF_COND ( $ "Demand Data.TotalStorageReductionLookup" [6.00000000, 3.00000000] > $ "Demand Data.DemandReductionProbThreshold" [] )
      ELSEIF_CLAUSE
            $ "Demand Data.TotalReductionStatus" [] := 3.00000000;
      END_ELSEIF
      ELSEIF_COND ( $ "Demand Data.TotalStorageReductionLookup" [6.00000000, 2.00000000] > $ "Demand Data.DemandReductionProbThreshold" [] )
      ELSEIF_CLAUSE
            $ "Demand Data.TotalReductionStatus" [] := 2.00000000;
      END_ELSEIF;
      END_ELSEIF
      ELSEIF_COND ( $ "Other Data.PVandGWInflows" [] <= $ "Demand Data.TotalStorageReductionLookup" [7.00000000, 1.00000000] AND $ "Other Data.PVandGWInflows" [] > $ "Demand Data.TotalStorageReductionLookup" [6.00000000, 1.00000000] )
      ELSEIF_CLAUSE
            IF_STATEMENT ($ "Demand Data.TotalStorageReductionLookup" [7.00000000, 4.00000000] > $ "Demand Data.DemandReductionProbThreshold" []) THEN
            $ "Demand Data.TotalReductionStatus" [] := 4.00000000;

      ELSE
            $ "Demand Data.TotalReductionStatus" [] := 1.00000000;

      END_IF_STATEMENT
      ELSEIF_COND ( $ "Demand Data.TotalStorageReductionLookup" [7.00000000, 3.00000000] > $ "Demand Data.DemandReductionProbThreshold" [] )
      ELSEIF_CLAUSE
            $ "Demand Data.TotalReductionStatus" [] := 3.00000000;
      END_ELSEIF
      ELSEIF_COND ( $ "Demand Data.TotalStorageReductionLookup" [7.00000000, 2.00000000] > $ "Demand Data.DemandReductionProbThreshold" [] )
      ELSEIF_CLAUSE
            $ "Demand Data.TotalReductionStatus" [] := 2.00000000;
      END_ELSEIF;
      END_ELSEIF;
      END_ELSEIF
      ELSEIF_COND ( $ "Other Data.TotalStorage" [@"t - 1"] <= $ "Demand Data.TotalStorageReductionLookup" [8.00000000, 0.00000000] AND $ "Other Data.TotalStorage" [@"t - 1"] > $ "Demand Data.TotalStorageReductionLookup" [4.00000000, 0.00000000] )
      ELSEIF_CLAUSE
            IF_STATEMENT ($ "Other Data.PVandGWInflows" [] <= $ "Demand Data.TotalStorageReductionLookup" [8.00000000, 1.00000000]) THEN
            IF_STATEMENT ($ "Demand Data.TotalStorageReductionLookup" [8.00000000, 4.00000000] > $ "Demand Data.DemandReductionProbThreshold" []) THEN
            $ "Demand Data.TotalReductionStatus" [] := 4.00000000;

      ELSE
            $ "Demand Data.TotalReductionStatus" [] := 1.00000000;

      END_IF_STATEMENT
      ELSEIF_COND ( $ "Demand Data.TotalStorageReductionLookup" [8.00000000, 3.00000000] > $ "Demand Data.DemandReductionProbThreshold" [] )
      ELSEIF_CLAUSE
            $ "Demand Data.TotalReductionStatus" [] := 3.00000000;
      END_ELSEIF
      ELSEIF_COND ( $ "Demand Data.TotalStorageReductionLookup" [8.00000000, 2.00000000] > $ "Demand Data.DemandReductionProbThreshold" [] )
      ELSEIF_CLAUSE
            $ "Demand Data.TotalReductionStatus" [] := 2.00000000;
      END_ELSEIF;

      ELSE
            $ "Demand Data.TotalReductionStatus" [] := 1.00000000;

      END_IF_STATEMENT
      ELSEIF_COND ( $ "Other Data.PVandGWInflows" [] <= $ "Demand Data.TotalStorageReductionLookup" [9.00000000, 1.00000000] AND $ "Other Data.PVandGWInflows" [] > $ "Demand Data.TotalStorageReductionLookup" [8.00000000, 1.00000000] )
      ELSEIF_CLAUSE
            IF_STATEMENT ($ "Demand Data.TotalStorageReductionLookup" [9.00000000, 4.00000000] > $ "Demand Data.DemandReductionProbThreshold" []) THEN
            $ "Demand Data.TotalReductionStatus" [] := 4.00000000;

      ELSE
            $ "Demand Data.TotalReductionStatus" [] := 1.00000000;

      END_IF_STATEMENT
      ELSEIF_COND ( $ "Demand Data.TotalStorageReductionLookup" [9.00000000, 3.00000000] > $ "Demand Data.DemandReductionProbThreshold" [] )
      ELSEIF_CLAUSE
            $ "Demand Data.TotalReductionStatus" [] := 3.00000000;
      END_ELSEIF
      ELSEIF_COND ( $ "Demand Data.TotalStorageReductionLookup" [9.00000000, 2.00000000] > $ "Demand Data.DemandReductionProbThreshold" [] )
      ELSEIF_CLAUSE
            $ "Demand Data.TotalReductionStatus" [] := 2.00000000;
      END_ELSEIF;
      END_ELSEIF
      ELSEIF_COND ( $ "Other Data.PVandGWInflows" [] <= $ "Demand Data.TotalStorageReductionLookup" [10.00000000, 1.00000000] AND $ "Other Data.PVandGWInflows" [] > $ "Demand Data.TotalStorageReductionLookup" [9.00000000, 1.00000000] )
      ELSEIF_CLAUSE
            IF_STATEMENT ($ "Demand Data.TotalStorageReductionLookup" [10.00000000, 4.00000000] > $ "Demand Data.DemandReductionProbThreshold" []) THEN
            $ "Demand Data.TotalReductionStatus" [] := 4.00000000;

      ELSE
            $ "Demand Data.TotalReductionStatus" [] := 1.00000000;

      END_IF_STATEMENT
      ELSEIF_COND ( $ "Demand Data.TotalStorageReductionLookup" [10.00000000, 3.00000000] > $ "Demand Data.DemandReductionProbThreshold" [] )
      ELSEIF_CLAUSE
            $ "Demand Data.TotalReductionStatus" [] := 3.00000000;
      END_ELSEIF
      ELSEIF_COND ( $ "Demand Data.TotalStorageReductionLookup" [10.00000000, 2.00000000] > $ "Demand Data.DemandReductionProbThreshold" [] )
      ELSEIF_CLAUSE
            $ "Demand Data.TotalReductionStatus" [] := 2.00000000;
      END_ELSEIF;
      END_ELSEIF
      ELSEIF_COND ( $ "Other Data.PVandGWInflows" [] <= $ "Demand Data.TotalStorageReductionLookup" [11.00000000, 1.00000000] AND $ "Other Data.PVandGWInflows" [] > $ "Demand Data.TotalStorageReductionLookup" [10.00000000, 1.00000000] )
      ELSEIF_CLAUSE
            IF_STATEMENT ($ "Demand Data.TotalStorageReductionLookup" [11.00000000, 4.00000000] > $ "Demand Data.DemandReductionProbThreshold" []) THEN
            $ "Demand Data.TotalReductionStatus" [] := 4.00000000;

      ELSE
            $ "Demand Data.TotalReductionStatus" [] := 1.00000000;

      END_IF_STATEMENT
      ELSEIF_COND ( $ "Demand Data.TotalStorageReductionLookup" [11.00000000, 3.00000000] > $ "Demand Data.DemandReductionProbThreshold" [] )
      ELSEIF_CLAUSE
            $ "Demand Data.TotalReductionStatus" [] := 3.00000000;
      END_ELSEIF
      ELSEIF_COND ( $ "Demand Data.TotalStorageReductionLookup" [11.00000000, 2.00000000] > $ "Demand Data.DemandReductionProbThreshold" [] )
      ELSEIF_CLAUSE
            $ "Demand Data.TotalReductionStatus" [] := 2.00000000;
      END_ELSEIF;
      END_ELSEIF;
      END_ELSEIF
      ELSEIF_COND ( $ "Other Data.TotalStorage" [@"t - 1"] <= $ "Demand Data.TotalStorageReductionLookup" [12.00000000, 0.00000000] AND $ "Other Data.TotalStorage" [@"t - 1"] > $ "Demand Data.TotalStorageReductionLookup" [8.00000000, 0.00000000] )
      ELSEIF_CLAUSE
            IF_STATEMENT ($ "Other Data.PVandGWInflows" [] <= $ "Demand Data.TotalStorageReductionLookup" [12.00000000, 1.00000000]) THEN
            IF_STATEMENT ($ "Demand Data.TotalStorageReductionLookup" [12.00000000, 4.00000000] > $ "Demand Data.DemandReductionProbThreshold" []) THEN
            $ "Demand Data.TotalReductionStatus" [] := 4.00000000;

      ELSE
            $ "Demand Data.TotalReductionStatus" [] := 1.00000000;

      END_IF_STATEMENT
      ELSEIF_COND ( $ "Demand Data.TotalStorageReductionLookup" [12.00000000, 3.00000000] > $ "Demand Data.DemandReductionProbThreshold" [] )
      ELSEIF_CLAUSE
            $ "Demand Data.TotalReductionStatus" [] := 3.00000000;
      END_ELSEIF
      ELSEIF_COND ( $ "Demand Data.TotalStorageReductionLookup" [12.00000000, 2.00000000] > $ "Demand Data.DemandReductionProbThreshold" [] )
      ELSEIF_CLAUSE
            $ "Demand Data.TotalReductionStatus" [] := 2.00000000;
      END_ELSEIF;

      ELSE
            $ "Demand Data.TotalReductionStatus" [] := 1.00000000;

      END_IF_STATEMENT
      ELSEIF_COND ( $ "Other Data.PVandGWInflows" [] <= $ "Demand Data.TotalStorageReductionLookup" [13.00000000, 1.00000000] AND $ "Other Data.PVandGWInflows" [] > $ "Demand Data.TotalStorageReductionLookup" [12.00000000, 1.00000000] )
      ELSEIF_CLAUSE
            IF_STATEMENT ($ "Demand Data.TotalStorageReductionLookup" [13.00000000, 4.00000000] > $ "Demand Data.DemandReductionProbThreshold" []) THEN
            $ "Demand Data.TotalReductionStatus" [] := 4.00000000;

      ELSE
            $ "Demand Data.TotalReductionStatus" [] := 1.00000000;

      END_IF_STATEMENT
      ELSEIF_COND ( $ "Demand Data.TotalStorageReductionLookup" [13.00000000, 3.00000000] > $ "Demand Data.DemandReductionProbThreshold" [] )
      ELSEIF_CLAUSE
            $ "Demand Data.TotalReductionStatus" [] := 3.00000000;
      END_ELSEIF
      ELSEIF_COND ( $ "Demand Data.TotalStorageReductionLookup" [13.00000000, 2.00000000] > $ "Demand Data.DemandReductionProbThreshold" [] )
      ELSEIF_CLAUSE
            $ "Demand Data.TotalReductionStatus" [] := 2.00000000;
      END_ELSEIF;
      END_ELSEIF
      ELSEIF_COND ( $ "Other Data.PVandGWInflows" [] <= $ "Demand Data.TotalStorageReductionLookup" [14.00000000, 1.00000000] AND $ "Other Data.PVandGWInflows" [] > $ "Demand Data.TotalStorageReductionLookup" [13.00000000, 1.00000000] )
      ELSEIF_CLAUSE
            IF_STATEMENT ($ "Demand Data.TotalStorageReductionLookup" [14.00000000, 4.00000000] > $ "Demand Data.DemandReductionProbThreshold" []) THEN
            $ "Demand Data.TotalReductionStatus" [] := 4.00000000;

      ELSE
            $ "Demand Data.TotalReductionStatus" [] := 1.00000000;

      END_IF_STATEMENT
      ELSEIF_COND ( $ "Demand Data.TotalStorageReductionLookup" [14.00000000, 3.00000000] > $ "Demand Data.DemandReductionProbThreshold" [] )
      ELSEIF_CLAUSE
            $ "Demand Data.TotalReductionStatus" [] := 3.00000000;
      END_ELSEIF
      ELSEIF_COND ( $ "Demand Data.TotalStorageReductionLookup" [14.00000000, 2.00000000] > $ "Demand Data.DemandReductionProbThreshold" [] )
      ELSEIF_CLAUSE
            $ "Demand Data.TotalReductionStatus" [] := 2.00000000;
      END_ELSEIF;
      END_ELSEIF
      ELSEIF_COND ( $ "Other Data.PVandGWInflows" [] <= $ "Demand Data.TotalStorageReductionLookup" [15.00000000, 1.00000000] AND $ "Other Data.PVandGWInflows" [] > $ "Demand Data.TotalStorageReductionLookup" [14.00000000, 1.00000000] )
      ELSEIF_CLAUSE
            IF_STATEMENT ($ "Demand Data.TotalStorageReductionLookup" [15.00000000, 4.00000000] > $ "Demand Data.DemandReductionProbThreshold" []) THEN
            $ "Demand Data.TotalReductionStatus" [] := 4.00000000;

      ELSE
            $ "Demand Data.TotalReductionStatus" [] := 1.00000000;

      END_IF_STATEMENT
      ELSEIF_COND ( $ "Demand Data.TotalStorageReductionLookup" [15.00000000, 3.00000000] > $ "Demand Data.DemandReductionProbThreshold" [] )
      ELSEIF_CLAUSE
            $ "Demand Data.TotalReductionStatus" [] := 3.00000000;
      END_ELSEIF
      ELSEIF_COND ( $ "Demand Data.TotalStorageReductionLookup" [15.00000000, 2.00000000] > $ "Demand Data.DemandReductionProbThreshold" [] )
      ELSEIF_CLAUSE
            $ "Demand Data.TotalReductionStatus" [] := 2.00000000;
      END_ELSEIF;
      END_ELSEIF;
      END_ELSEIF;

      ELSE
            $ "Demand Data.TotalReductionStatus" [] := $ "Demand Data.TotalReductionStatus" [@"t - 1"];

      END_IF_STATEMENT;

    END
    UUID "{2b8fb5e5-07d5-4457-9387-6d7850753dd8}";;

    RULE                 "Crop Fallowing Upstream Status Check";
    DESCRIPTION          "";
    ACTIVE               FALSE;
    RULE_EXEC_CONSTRAINT NOT "HasRuleFiredSuccessfully"( "Current Rule" );
  NAMES_COLOR  "#0055ff";
    NOTES                "";
    BEGIN

    DESCRIPTION          "<comment>reduction status can take values of 1, 2, 3, and 4, which correspond with a Green, <br>Yellow, Orange, and Red reduction respectively. <br>";
      IF_STATEMENT (@"t" == "CompletePartialDate"( @"March", @"t" )) THEN
            IF_STATEMENT ($ "Other Data.UpstreamStorage" [@"t - 1"] <= $ "Demand Data.UpstreamStorageReductionLookup" [0.00000000, 0.00000000]) THEN
            IF_STATEMENT ($ "Other Data.PVandGWInflows" [] <= $ "Demand Data.UpstreamStorageReductionLookup" [0.00000000, 1.00000000]) THEN
            IF_STATEMENT ($ "Demand Data.UpstreamStorageReductionLookup" [0.00000000, 4.00000000] > $ "Demand Data.DemandReductionProbThreshold" []) THEN
            $ "Demand Data.UpstreamReductionStatus" [] := 4.00000000;

      ELSE
            $ "Demand Data.UpstreamReductionStatus" [] := 1.00000000;

      END_IF_STATEMENT
      ELSEIF_COND ( $ "Demand Data.UpstreamStorageReductionLookup" [0.00000000, 3.00000000] > $ "Demand Data.DemandReductionProbThreshold" [] )
      ELSEIF_CLAUSE
            $ "Demand Data.UpstreamReductionStatus" [] := 3.00000000;
      END_ELSEIF
      ELSEIF_COND ( $ "Demand Data.UpstreamStorageReductionLookup" [0.00000000, 2.00000000] > $ "Demand Data.DemandReductionProbThreshold" [] )
      ELSEIF_CLAUSE
            $ "Demand Data.UpstreamReductionStatus" [] := 2.00000000;
      END_ELSEIF;

      ELSE
            $ "Demand Data.UpstreamReductionStatus" [] := 1.00000000;

      END_IF_STATEMENT
      ELSEIF_COND ( $ "Other Data.PVandGWInflows" [] <= $ "Demand Data.UpstreamStorageReductionLookup" [1.00000000, 1.00000000] AND $ "Other Data.PVandGWInflows" [] > $ "Demand Data.UpstreamStorageReductionLookup" [0.00000000, 1.00000000] )
      ELSEIF_CLAUSE
            IF_STATEMENT ($ "Demand Data.UpstreamStorageReductionLookup" [1.00000000, 4.00000000] > $ "Demand Data.DemandReductionProbThreshold" []) THEN
            $ "Demand Data.UpstreamReductionStatus" [] := 4.00000000;

      ELSE
            $ "Demand Data.UpstreamReductionStatus" [] := 1.00000000;

      END_IF_STATEMENT
      ELSEIF_COND ( $ "Demand Data.UpstreamStorageReductionLookup" [1.00000000, 3.00000000] > $ "Demand Data.DemandReductionProbThreshold" [] )
      ELSEIF_CLAUSE
            $ "Demand Data.UpstreamReductionStatus" [] := 3.00000000;
      END_ELSEIF
      ELSEIF_COND ( $ "Demand Data.UpstreamStorageReductionLookup" [1.00000000, 2.00000000] > $ "Demand Data.DemandReductionProbThreshold" [] )
      ELSEIF_CLAUSE
            $ "Demand Data.UpstreamReductionStatus" [] := 2.00000000;
      END_ELSEIF;
      END_ELSEIF
      ELSEIF_COND ( $ "Other Data.PVandGWInflows" [] <= $ "Demand Data.UpstreamStorageReductionLookup" [2.00000000, 1.00000000] AND $ "Other Data.PVandGWInflows" [] > $ "Demand Data.UpstreamStorageReductionLookup" [1.00000000, 1.00000000] )
      ELSEIF_CLAUSE
            IF_STATEMENT ($ "Demand Data.UpstreamStorageReductionLookup" [2.00000000, 4.00000000] > $ "Demand Data.DemandReductionProbThreshold" []) THEN
            $ "Demand Data.UpstreamReductionStatus" [] := 4.00000000;

      ELSE
            $ "Demand Data.UpstreamReductionStatus" [] := 1.00000000;

      END_IF_STATEMENT
      ELSEIF_COND ( $ "Demand Data.UpstreamStorageReductionLookup" [2.00000000, 3.00000000] > $ "Demand Data.DemandReductionProbThreshold" [] )
      ELSEIF_CLAUSE
            $ "Demand Data.UpstreamReductionStatus" [] := 3.00000000;
      END_ELSEIF
      ELSEIF_COND ( $ "Demand Data.UpstreamStorageReductionLookup" [2.00000000, 2.00000000] > $ "Demand Data.DemandReductionProbThreshold" [] )
      ELSEIF_CLAUSE
            $ "Demand Data.UpstreamReductionStatus" [] := 2.00000000;
      END_ELSEIF;
      END_ELSEIF
      ELSEIF_COND ( $ "Other Data.PVandGWInflows" [] <= $ "Demand Data.UpstreamStorageReductionLookup" [3.00000000, 1.00000000] AND $ "Other Data.PVandGWInflows" [] > $ "Demand Data.UpstreamStorageReductionLookup" [2.00000000, 1.00000000] )
      ELSEIF_CLAUSE
            IF_STATEMENT ($ "Demand Data.UpstreamStorageReductionLookup" [3.00000000, 4.00000000] > $ "Demand Data.DemandReductionProbThreshold" []) THEN
            $ "Demand Data.UpstreamReductionStatus" [] := 4.00000000;

      ELSE
            $ "Demand Data.UpstreamReductionStatus" [] := 1.00000000;

      END_IF_STATEMENT
      ELSEIF_COND ( $ "Demand Data.UpstreamStorageReductionLookup" [3.00000000, 3.00000000] > $ "Demand Data.DemandReductionProbThreshold" [] )
      ELSEIF_CLAUSE
            $ "Demand Data.UpstreamReductionStatus" [] := 3.00000000;
      END_ELSEIF
      ELSEIF_COND ( $ "Demand Data.UpstreamStorageReductionLookup" [3.00000000, 2.00000000] > $ "Demand Data.DemandReductionProbThreshold" [] )
      ELSEIF_CLAUSE
            $ "Demand Data.UpstreamReductionStatus" [] := 2.00000000;
      END_ELSEIF;
      END_ELSEIF;

      ELSE
            $ "Demand Data.UpstreamReductionStatus" [] := 1.00000000;

      END_IF_STATEMENT
      ELSEIF_COND ( $ "Other Data.UpstreamStorage" [@"t - 1"] <= $ "Demand Data.UpstreamStorageReductionLookup" [4.00000000, 0.00000000] AND $ "Other Data.UpstreamStorage" [@"t - 1"] > $ "Demand Data.UpstreamStorageReductionLookup" [0.00000000, 0.00000000] )
      ELSEIF_CLAUSE
            IF_STATEMENT ($ "Other Data.PVandGWInflows" [] <= $ "Demand Data.UpstreamStorageReductionLookup" [4.00000000, 1.00000000]) THEN
            IF_STATEMENT ($ "Demand Data.UpstreamStorageReductionLookup" [4.00000000, 4.00000000] > $ "Demand Data.DemandReductionProbThreshold" []) THEN
            $ "Demand Data.UpstreamReductionStatus" [] := 4.00000000;

      ELSE
            $ "Demand Data.UpstreamReductionStatus" [] := 1.00000000;

      END_IF_STATEMENT
      ELSEIF_COND ( $ "Demand Data.UpstreamStorageReductionLookup" [4.00000000, 3.00000000] > $ "Demand Data.DemandReductionProbThreshold" [] )
      ELSEIF_CLAUSE
            $ "Demand Data.UpstreamReductionStatus" [] := 3.00000000;
      END_ELSEIF
      ELSEIF_COND ( $ "Demand Data.UpstreamStorageReductionLookup" [4.00000000, 2.00000000] > $ "Demand Data.DemandReductionProbThreshold" [] )
      ELSEIF_CLAUSE
            $ "Demand Data.UpstreamReductionStatus" [] := 2.00000000;
      END_ELSEIF;

      ELSE
            $ "Demand Data.UpstreamReductionStatus" [] := 1.00000000;

      END_IF_STATEMENT
      ELSEIF_COND ( $ "Other Data.PVandGWInflows" [] <= $ "Demand Data.UpstreamStorageReductionLookup" [5.00000000, 1.00000000] AND $ "Other Data.PVandGWInflows" [] > $ "Demand Data.UpstreamStorageReductionLookup" [4.00000000, 1.00000000] )
      ELSEIF_CLAUSE
            IF_STATEMENT ($ "Demand Data.UpstreamStorageReductionLookup" [5.00000000, 4.00000000] > $ "Demand Data.DemandReductionProbThreshold" []) THEN
            $ "Demand Data.UpstreamReductionStatus" [] := 4.00000000;

      ELSE
            $ "Demand Data.UpstreamReductionStatus" [] := 1.00000000;

      END_IF_STATEMENT
      ELSEIF_COND ( $ "Demand Data.UpstreamStorageReductionLookup" [5.00000000, 3.00000000] > $ "Demand Data.DemandReductionProbThreshold" [] )
      ELSEIF_CLAUSE
            $ "Demand Data.UpstreamReductionStatus" [] := 3.00000000;
      END_ELSEIF
      ELSEIF_COND ( $ "Demand Data.UpstreamStorageReductionLookup" [5.00000000, 2.00000000] > $ "Demand Data.DemandReductionProbThreshold" [] )
      ELSEIF_CLAUSE
            $ "Demand Data.UpstreamReductionStatus" [] := 2.00000000;
      END_ELSEIF;
      END_ELSEIF
      ELSEIF_COND ( $ "Other Data.PVandGWInflows" [] <= $ "Demand Data.UpstreamStorageReductionLookup" [6.00000000, 1.00000000] AND $ "Other Data.PVandGWInflows" [] > $ "Demand Data.UpstreamStorageReductionLookup" [5.00000000, 1.00000000] )
      ELSEIF_CLAUSE
            IF_STATEMENT ($ "Demand Data.UpstreamStorageReductionLookup" [6.00000000, 4.00000000] > $ "Demand Data.DemandReductionProbThreshold" []) THEN
            $ "Demand Data.UpstreamReductionStatus" [] := 4.00000000;

      ELSE
            $ "Demand Data.UpstreamReductionStatus" [] := 1.00000000;

      END_IF_STATEMENT
      ELSEIF_COND ( $ "Demand Data.UpstreamStorageReductionLookup" [6.00000000, 3.00000000] > $ "Demand Data.DemandReductionProbThreshold" [] )
      ELSEIF_CLAUSE
            $ "Demand Data.UpstreamReductionStatus" [] := 3.00000000;
      END_ELSEIF
      ELSEIF_COND ( $ "Demand Data.UpstreamStorageReductionLookup" [6.00000000, 2.00000000] > $ "Demand Data.DemandReductionProbThreshold" [] )
      ELSEIF_CLAUSE
            $ "Demand Data.UpstreamReductionStatus" [] := 2.00000000;
      END_ELSEIF;
      END_ELSEIF
      ELSEIF_COND ( $ "Other Data.PVandGWInflows" [] <= $ "Demand Data.UpstreamStorageReductionLookup" [7.00000000, 1.00000000] AND $ "Other Data.PVandGWInflows" [] > $ "Demand Data.UpstreamStorageReductionLookup" [6.00000000, 1.00000000] )
      ELSEIF_CLAUSE
            IF_STATEMENT ($ "Demand Data.UpstreamStorageReductionLookup" [7.00000000, 4.00000000] > $ "Demand Data.DemandReductionProbThreshold" []) THEN
            $ "Demand Data.UpstreamReductionStatus" [] := 4.00000000;

      ELSE
            $ "Demand Data.UpstreamReductionStatus" [] := 1.00000000;

      END_IF_STATEMENT
      ELSEIF_COND ( $ "Demand Data.UpstreamStorageReductionLookup" [7.00000000, 3.00000000] > $ "Demand Data.DemandReductionProbThreshold" [] )
      ELSEIF_CLAUSE
            $ "Demand Data.UpstreamReductionStatus" [] := 3.00000000;
      END_ELSEIF
      ELSEIF_COND ( $ "Demand Data.UpstreamStorageReductionLookup" [7.00000000, 2.00000000] > $ "Demand Data.DemandReductionProbThreshold" [] )
      ELSEIF_CLAUSE
            $ "Demand Data.UpstreamReductionStatus" [] := 2.00000000;
      END_ELSEIF;
      END_ELSEIF;
      END_ELSEIF
      ELSEIF_COND ( $ "Other Data.UpstreamStorage" [@"t - 1"] <= $ "Demand Data.UpstreamStorageReductionLookup" [8.00000000, 0.00000000] AND $ "Other Data.UpstreamStorage" [@"t - 1"] > $ "Demand Data.UpstreamStorageReductionLookup" [4.00000000, 0.00000000] )
      ELSEIF_CLAUSE
            IF_STATEMENT ($ "Other Data.PVandGWInflows" [] <= $ "Demand Data.UpstreamStorageReductionLookup" [8.00000000, 1.00000000]) THEN
            IF_STATEMENT ($ "Demand Data.UpstreamStorageReductionLookup" [8.00000000, 4.00000000] > $ "Demand Data.DemandReductionProbThreshold" []) THEN
            $ "Demand Data.UpstreamReductionStatus" [] := 4.00000000;

      ELSE
            $ "Demand Data.UpstreamReductionStatus" [] := 1.00000000;

      END_IF_STATEMENT
      ELSEIF_COND ( $ "Demand Data.UpstreamStorageReductionLookup" [8.00000000, 3.00000000] > $ "Demand Data.DemandReductionProbThreshold" [] )
      ELSEIF_CLAUSE
            $ "Demand Data.UpstreamReductionStatus" [] := 3.00000000;
      END_ELSEIF
      ELSEIF_COND ( $ "Demand Data.UpstreamStorageReductionLookup" [8.00000000, 2.00000000] > $ "Demand Data.DemandReductionProbThreshold" [] )
      ELSEIF_CLAUSE
            $ "Demand Data.UpstreamReductionStatus" [] := 2.00000000;
      END_ELSEIF;

      ELSE
            $ "Demand Data.UpstreamReductionStatus" [] := 1.00000000;

      END_IF_STATEMENT
      ELSEIF_COND ( $ "Other Data.PVandGWInflows" [] <= $ "Demand Data.UpstreamStorageReductionLookup" [9.00000000, 1.00000000] AND $ "Other Data.PVandGWInflows" [] > $ "Demand Data.UpstreamStorageReductionLookup" [8.00000000, 1.00000000] )
      ELSEIF_CLAUSE
            IF_STATEMENT ($ "Demand Data.UpstreamStorageReductionLookup" [9.00000000, 4.00000000] > $ "Demand Data.DemandReductionProbThreshold" []) THEN
            $ "Demand Data.UpstreamReductionStatus" [] := 4.00000000;

      ELSE
            $ "Demand Data.UpstreamReductionStatus" [] := 1.00000000;

      END_IF_STATEMENT
      ELSEIF_COND ( $ "Demand Data.UpstreamStorageReductionLookup" [9.00000000, 3.00000000] > $ "Demand Data.DemandReductionProbThreshold" [] )
      ELSEIF_CLAUSE
            $ "Demand Data.UpstreamReductionStatus" [] := 3.00000000;
      END_ELSEIF
      ELSEIF_COND ( $ "Demand Data.UpstreamStorageReductionLookup" [9.00000000, 2.00000000] > $ "Demand Data.DemandReductionProbThreshold" [] )
      ELSEIF_CLAUSE
            $ "Demand Data.UpstreamReductionStatus" [] := 2.00000000;
      END_ELSEIF;
      END_ELSEIF
      ELSEIF_COND ( $ "Other Data.PVandGWInflows" [] <= $ "Demand Data.UpstreamStorageReductionLookup" [10.00000000, 1.00000000] AND $ "Other Data.PVandGWInflows" [] > $ "Demand Data.UpstreamStorageReductionLookup" [9.00000000, 1.00000000] )
      ELSEIF_CLAUSE
            IF_STATEMENT ($ "Demand Data.UpstreamStorageReductionLookup" [10.00000000, 4.00000000] > $ "Demand Data.DemandReductionProbThreshold" []) THEN
            $ "Demand Data.UpstreamReductionStatus" [] := 4.00000000;

      ELSE
            $ "Demand Data.UpstreamReductionStatus" [] := 1.00000000;

      END_IF_STATEMENT
      ELSEIF_COND ( $ "Demand Data.UpstreamStorageReductionLookup" [10.00000000, 3.00000000] > $ "Demand Data.DemandReductionProbThreshold" [] )
      ELSEIF_CLAUSE
            $ "Demand Data.UpstreamReductionStatus" [] := 3.00000000;
      END_ELSEIF
      ELSEIF_COND ( $ "Demand Data.UpstreamStorageReductionLookup" [10.00000000, 2.00000000] > $ "Demand Data.DemandReductionProbThreshold" [] )
      ELSEIF_CLAUSE
            $ "Demand Data.UpstreamReductionStatus" [] := 2.00000000;
      END_ELSEIF;
      END_ELSEIF
      ELSEIF_COND ( $ "Other Data.PVandGWInflows" [] <= $ "Demand Data.UpstreamStorageReductionLookup" [11.00000000, 1.00000000] AND $ "Other Data.PVandGWInflows" [] > $ "Demand Data.UpstreamStorageReductionLookup" [10.00000000, 1.00000000] )
      ELSEIF_CLAUSE
            IF_STATEMENT ($ "Demand Data.UpstreamStorageReductionLookup" [11.00000000, 4.00000000] > $ "Demand Data.DemandReductionProbThreshold" []) THEN
            $ "Demand Data.UpstreamReductionStatus" [] := 4.00000000;

      ELSE
            $ "Demand Data.UpstreamReductionStatus" [] := 1.00000000;

      END_IF_STATEMENT
      ELSEIF_COND ( $ "Demand Data.UpstreamStorageReductionLookup" [11.00000000, 3.00000000] > $ "Demand Data.DemandReductionProbThreshold" [] )
      ELSEIF_CLAUSE
            $ "Demand Data.UpstreamReductionStatus" [] := 3.00000000;
      END_ELSEIF
      ELSEIF_COND ( $ "Demand Data.UpstreamStorageReductionLookup" [11.00000000, 2.00000000] > $ "Demand Data.DemandReductionProbThreshold" [] )
      ELSEIF_CLAUSE
            $ "Demand Data.UpstreamReductionStatus" [] := 2.00000000;
      END_ELSEIF;
      END_ELSEIF;
      END_ELSEIF
      ELSEIF_COND ( $ "Other Data.UpstreamStorage" [@"t - 1"] <= $ "Demand Data.UpstreamStorageReductionLookup" [12.00000000, 0.00000000] AND $ "Other Data.UpstreamStorage" [@"t - 1"] > $ "Demand Data.UpstreamStorageReductionLookup" [8.00000000, 0.00000000] )
      ELSEIF_CLAUSE
            IF_STATEMENT ($ "Other Data.PVandGWInflows" [] <= $ "Demand Data.UpstreamStorageReductionLookup" [12.00000000, 1.00000000]) THEN
            IF_STATEMENT ($ "Demand Data.UpstreamStorageReductionLookup" [12.00000000, 4.00000000] > $ "Demand Data.DemandReductionProbThreshold" []) THEN
            $ "Demand Data.UpstreamReductionStatus" [] := 4.00000000;

      ELSE
            $ "Demand Data.UpstreamReductionStatus" [] := 1.00000000;

      END_IF_STATEMENT
      ELSEIF_COND ( $ "Demand Data.UpstreamStorageReductionLookup" [12.00000000, 3.00000000] > $ "Demand Data.DemandReductionProbThreshold" [] )
      ELSEIF_CLAUSE
            $ "Demand Data.UpstreamReductionStatus" [] := 3.00000000;
      END_ELSEIF
      ELSEIF_COND ( $ "Demand Data.UpstreamStorageReductionLookup" [12.00000000, 2.00000000] > $ "Demand Data.DemandReductionProbThreshold" [] )
      ELSEIF_CLAUSE
            $ "Demand Data.UpstreamReductionStatus" [] := 2.00000000;
      END_ELSEIF;

      ELSE
            $ "Demand Data.UpstreamReductionStatus" [] := 1.00000000;

      END_IF_STATEMENT
      ELSEIF_COND ( $ "Other Data.PVandGWInflows" [] <= $ "Demand Data.UpstreamStorageReductionLookup" [13.00000000, 1.00000000] AND $ "Other Data.PVandGWInflows" [] > $ "Demand Data.UpstreamStorageReductionLookup" [12.00000000, 1.00000000] )
      ELSEIF_CLAUSE
            IF_STATEMENT ($ "Demand Data.UpstreamStorageReductionLookup" [13.00000000, 4.00000000] > $ "Demand Data.DemandReductionProbThreshold" []) THEN
            $ "Demand Data.UpstreamReductionStatus" [] := 4.00000000;

      ELSE
            $ "Demand Data.UpstreamReductionStatus" [] := 1.00000000;

      END_IF_STATEMENT
      ELSEIF_COND ( $ "Demand Data.UpstreamStorageReductionLookup" [13.00000000, 3.00000000] > $ "Demand Data.DemandReductionProbThreshold" [] )
      ELSEIF_CLAUSE
            $ "Demand Data.UpstreamReductionStatus" [] := 3.00000000;
      END_ELSEIF
      ELSEIF_COND ( $ "Demand Data.UpstreamStorageReductionLookup" [13.00000000, 2.00000000] > $ "Demand Data.DemandReductionProbThreshold" [] )
      ELSEIF_CLAUSE
            $ "Demand Data.UpstreamReductionStatus" [] := 2.00000000;
      END_ELSEIF;
      END_ELSEIF
      ELSEIF_COND ( $ "Other Data.PVandGWInflows" [] <= $ "Demand Data.UpstreamStorageReductionLookup" [14.00000000, 1.00000000] AND $ "Other Data.PVandGWInflows" [] > $ "Demand Data.UpstreamStorageReductionLookup" [13.00000000, 1.00000000] )
      ELSEIF_CLAUSE
            IF_STATEMENT ($ "Demand Data.UpstreamStorageReductionLookup" [14.00000000, 4.00000000] > $ "Demand Data.DemandReductionProbThreshold" []) THEN
            $ "Demand Data.UpstreamReductionStatus" [] := 4.00000000;

      ELSE
            $ "Demand Data.UpstreamReductionStatus" [] := 1.00000000;

      END_IF_STATEMENT
      ELSEIF_COND ( $ "Demand Data.UpstreamStorageReductionLookup" [14.00000000, 3.00000000] > $ "Demand Data.DemandReductionProbThreshold" [] )
      ELSEIF_CLAUSE
            $ "Demand Data.UpstreamReductionStatus" [] := 3.00000000;
      END_ELSEIF
      ELSEIF_COND ( $ "Demand Data.UpstreamStorageReductionLookup" [14.00000000, 2.00000000] > $ "Demand Data.DemandReductionProbThreshold" [] )
      ELSEIF_CLAUSE
            $ "Demand Data.UpstreamReductionStatus" [] := 2.00000000;
      END_ELSEIF;
      END_ELSEIF
      ELSEIF_COND ( $ "Other Data.PVandGWInflows" [] <= $ "Demand Data.UpstreamStorageReductionLookup" [15.00000000, 1.00000000] AND $ "Other Data.PVandGWInflows" [] > $ "Demand Data.UpstreamStorageReductionLookup" [14.00000000, 1.00000000] )
      ELSEIF_CLAUSE
            IF_STATEMENT ($ "Demand Data.UpstreamStorageReductionLookup" [15.00000000, 4.00000000] > $ "Demand Data.DemandReductionProbThreshold" []) THEN
            $ "Demand Data.UpstreamReductionStatus" [] := 4.00000000;

      ELSE
            $ "Demand Data.UpstreamReductionStatus" [] := 1.00000000;

      END_IF_STATEMENT
      ELSEIF_COND ( $ "Demand Data.UpstreamStorageReductionLookup" [15.00000000, 3.00000000] > $ "Demand Data.DemandReductionProbThreshold" [] )
      ELSEIF_CLAUSE
            $ "Demand Data.UpstreamReductionStatus" [] := 3.00000000;
      END_ELSEIF
      ELSEIF_COND ( $ "Demand Data.UpstreamStorageReductionLookup" [15.00000000, 2.00000000] > $ "Demand Data.DemandReductionProbThreshold" [] )
      ELSEIF_CLAUSE
            $ "Demand Data.UpstreamReductionStatus" [] := 2.00000000;
      END_ELSEIF;
      END_ELSEIF;
      END_ELSEIF;

      ELSE
            $ "Demand Data.UpstreamReductionStatus" [] := $ "Demand Data.UpstreamReductionStatus" [@"t - 1"];

      END_IF_STATEMENT;

    END
    UUID "{1d687dd9-61ad-4147-8d25-0b283329dfea}";;

  END
  UUID "{08c9c99c-066c-43c1-8ff6-7b0602d70726}";;

  UTILITY_GROUP "Utility Group";
  DESCRIPTION   "";
  ACTIVE        TRUE;
  NOTES          "";
  BEGIN

    FUNCTION       "MaxRelease" ( OBJECT Reservoir, NUMERIC MinStorage )
    RETURN_TYPE    NUMERIC;
    SCALE_UNITS    "";
    DESCRIPTION    "";
    ACTIVE         TRUE;
    PRE_EXEC_DIAG  FALSE;
    POST_EXEC_DIAG FALSE;
    NOTES          "";
    BEGIN

      "Max"( Reservoir & "Inflow" [] + Reservoir & "Storage" [@"t - 1"] / "GetTimestep"( @"t" ) - MinStorage / "GetTimestep"( @"t" ), 0.00000000 "cfs" );

    END
    UUID "{95299b2b-41e7-44e9-a915-cba96076cfbb}";;

    FUNCTION       "ShortageCall" ( LIST short, OBJECT res )
    RETURN_TYPE    NUMERIC;
    SCALE_UNITS    "";
    DESCRIPTION    "";
    ACTIVE         TRUE;
    PRE_EXEC_DIAG  FALSE;
    POST_EXEC_DIAG FALSE;
    MAX_CONSTRAINT "SolveOutflow"( res, res & "Inflow" [], $ "Reservoir Data.Min Storages" [STRINGIFY res, 0.00000000], res & "Storage" [@"t - 1"], @"t" );
    MIN_CONSTRAINT 0.00000000 "cfs";
    NOTES          "";
    BEGIN

      IF ( FOR ( OBJECT area IN short ) STAT_SUM
  area & "Diversion Shortage" []
 ENDFOR > 0.00000000 "acre-ft/month" )
 THEN
  FOR ( OBJECT area IN short ) STAT_SUM
   area & "Diversion Shortage" []
  ENDFOR + res & "Outflow" []
 ELSE
  res & "Outflow" []
 ENDIF;

    END
    UUID "{47e0bfe7-1619-432f-938a-4ac2a67dccc9}";;

    FUNCTION       "ShortageCallGW" ( LIST short, OBJECT gw )
    RETURN_TYPE    NUMERIC;
    SCALE_UNITS    "";
    DESCRIPTION    "";
    ACTIVE         TRUE;
    PRE_EXEC_DIAG  FALSE;
    POST_EXEC_DIAG FALSE;
    MIN_CONSTRAINT 0.00000000 "cfs";
    NOTES          "";
    BEGIN

      IF ( FOR ( OBJECT area IN short ) STAT_SUM
  area & "Diversion Shortage" []
 ENDFOR > 0.00000000 "acre-ft/month" )
 THEN
  "Min"( FOR ( OBJECT area IN short ) STAT_SUM
   area & "Diversion Shortage" []
  ENDFOR, ( $ "Other Data.ASRHalf" [] + $ "Other Data.ASRYr1" [] + $ "Other Data.ASRYr2" [] ) / "GetTimestep"( @"t" ) )
 ELSE
  gw & "Pumped Flow" []
 ENDIF;

    END
    UUID "{d4ced688-4a45-4284-9715-69d9d02d9bc5}";;

    FUNCTION       "ShortageCallPool" ( LIST short, OBJECT res, SLOT pool, NUMERIC factor )
    RETURN_TYPE    NUMERIC;
    SCALE_UNITS    "";
    DESCRIPTION    "";
    ACTIVE         TRUE;
    PRE_EXEC_DIAG  FALSE;
    POST_EXEC_DIAG FALSE;
    MAX_CONSTRAINT "SolveOutflow"( res, res & "Inflow" [], $ "Reservoir Data.Min Storages" [STRINGIFY res, 0.00000000], res & "Storage" [@"t - 1"], @"t" );
    MIN_CONSTRAINT 0.00000000 "cfs";
    NOTES          "";
    BEGIN

      IF ( FOR ( OBJECT area IN short ) STAT_SUM
  area & "Diversion Shortage" []
 ENDFOR > 0.00000000 "acre-ft/month" )
 THEN
  "Min"( FOR ( OBJECT area IN short ) STAT_SUM
   area & "Diversion Shortage" []
  ENDFOR, "VolumeToFlow"( pool [] * factor, @"t" ) ) + res & "Outflow" []
 ELSE
  res & "Outflow" []
 ENDIF;

    END
    UUID "{c7545aa1-e6b1-4b0e-888e-b9fb5ed48f60}";;

    FUNCTION       "ShortageCallPoolOld" ( OBJECT area, OBJECT res, SLOT pool, NUMERIC factor )
    RETURN_TYPE    NUMERIC;
    SCALE_UNITS    "";
    DESCRIPTION    "";
    ACTIVE         TRUE;
    PRE_EXEC_DIAG  FALSE;
    POST_EXEC_DIAG FALSE;
    MAX_CONSTRAINT "SolveOutflow"( res, res & "Inflow" [], $ "Reservoir Data.Min Storages" [STRINGIFY res, 0.00000000], res & "Storage" [@"t - 1"], @"t" );
    MIN_CONSTRAINT 0.00000000 "cfs";
    NOTES          "";
    BEGIN

      IF ( area & "Diversion Shortage" [] > 0.00000000 "acre-ft/month" )
 THEN
  "Min"( area & "Diversion Shortage" [], "VolumeToFlow"( pool [] * factor, @"t" ) ) + res & "Outflow" []
 ELSE
  res & "Outflow" []
 ENDIF;

    END
    UUID "{d0d65f24-8f4d-41b3-8782-1d5d996791d5}";;

    FUNCTION       "MinFlow" ( OBJECT Res, NUMERIC MinFlow )
    RETURN_TYPE    NUMERIC;
    SCALE_UNITS    "";
    DESCRIPTION    "";
    ACTIVE         TRUE;
    PRE_EXEC_DIAG  FALSE;
    POST_EXEC_DIAG FALSE;
    NOTES          "";
    BEGIN

      "Max"( "Min"( MinFlow, "SolveOutflow"( Res, Res & "Inflow" [], $ "Reservoir Data.Min Storages" [STRINGIFY Res, 0.00000000], Res & "Storage" [@"t - 1"], @"t" ) ), "Max"( "SolveOutflow"( Res, Res & "Inflow" [], $ "Reservoir Data.Max Storages" [STRINGIFY Res, 0.00000000], Res & "Storage" [@"t - 1"], @"t" ), 0.00000000 "acre-feet/month" ) );

    END
    UUID "{8d933fad-acfe-48ba-ab1d-38177c3f153e}";;

  END
  UUID "{8011a819-e9df-48c0-930c-7f7a1c093db3}";;

END
UUID "{aaaedf1d-92ae-4335-a3a8-1344ad03c21c}";
