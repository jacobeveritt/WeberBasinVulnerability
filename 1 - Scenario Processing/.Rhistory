TraceNum1 <- paste0("Trace",TNum)
TraceNum2<- paste0(",Trace",TTNum)
TraceDirectory <- paste0(TraceNum1,TraceNum2)
colnames(Tot_Shortages)[i] <-  TraceDirectory
i=i+1
if(TTNum > (TraceNumber-1)){
TNum = TNum +1
} else {
TNum = TNum
}
if(TTNum > (TraceNumber1-1)){
TTNum = 1
} else {
TTNum = TTNum + 1
}
}
#add Date column
Tot_Shortages$Date <- seq.Date(as.Date("0000/11/30"),by ="month",length=359)
## Annual Storage ### By Water Year November to October
Tot_Stor_Annual <-1:30
Tot_Stor_Annual <- data.frame(Tot_Stor_Annual)
k=1
while (k<=36) {
i=1
j=12
while (i<=30) {
Tot_Stor_Annual[i,k] <- sum(na.omit(Tot_Stor[(j-11):j,k]))
i=i+1
j=j+12
}
k=k+1
}
#rename columns
i=1
TTNum <- 1
TNum <- 1
while (i<=Tot_TraceNum) {
TraceNum1 <- paste0("Trace",TNum)
TraceNum2<- paste0(",Trace",TTNum)
TraceDirectory <- paste0(TraceNum1,TraceNum2)
colnames(Tot_Stor_Annual)[i] <-  TraceDirectory
i=i+1
if(TTNum > (TraceNumber-1)){
TNum = TNum +1
} else {
TNum = TNum
}
if(TTNum > (TraceNumber1-1)){
TTNum = 1
} else {
TTNum = TTNum + 1
}
}
## Average Annual Shortages
Tot_Shortage_Annual <-1:30
Tot_Shortage_Annual <- data.frame(Tot_Shortage_Annual)
k=1
while (k<=36) {
i=1
j=12
while (i<=30) {
Tot_Shortage_Annual[i,k] <- sum(na.omit(Tot_Shortage_Annual[(j-11):j,k]))
i=i+1
j=j+12
}
k=k+1
}
View(Tot_Shortage_Annual)
### Clear any existing data or functions.
rm(list=ls())
setwd("~/GitHub/WeberBasinVulnerability/WeberBasinVulnerability/2 - RiverWare Modeling/Scenario")
library(readr)
Total_Storage_NO_EVAP <- read_csv("Trace5,Trace3,RiverWare MRM,Weber Basin RiverWare Model,RiverWare Policy/Total Storage_NO EVAP.csv")
##################################Input data########################################################
TraceNumber <- 6
TraceNumber1 <-6
Tot_TraceNum <- TraceNumber*TraceNumber1
Tot_Stor <- read.csv("Trace1,Trace1,RiverWare MRM,Weber Basin RiverWare Model,RiverWare Policy/Total Storage_NO EVAP.csv")
Tot_Inflow <-read.csv("Trace1,Trace1,RiverWare MRM,Weber Basin RiverWare Model,RiverWare Policy/Total Inflows.csv")
Tot_Shortages <-read.csv("Trace1,Trace1,RiverWare MRM,Weber Basin RiverWare Model,RiverWare Policy/Total Shortages.csv")
View(Tot_Shortages)
### Total Storage
i=1
for(TTNum in 1:TraceNumber){
for(TNum in 1:TraceNumber1){
TraceDirectory <- paste0(",Trace",TTNum)
TraceDirectory <-paste0 (TraceDirectory,",RiverWare MRM,Weber Basin RiverWare Model,RiverWare Policy/Total Storage_NO EVAP.csv")
TraceNum1<- paste0("Trace",TNum)
TraceDirectory <- paste0(TraceNum1,TraceDirectory)
Location <- TraceDirectory
Temp_Storage <- read_csv(Location)
Tot_Stor[,i] <- Temp_Storage[,5]
i=i+1
}
}
Tot_Stor <- data.frame(Tot_Stor)
### Total Inflows
i=1
for(TTNum in 1:TraceNumber){
for(TNum in 1:TraceNumber1){
TraceDirectory <- paste0(",Trace",TTNum)
TraceDirectory <-paste0 (TraceDirectory,",RiverWare MRM,Weber Basin RiverWare Model,RiverWare Policy/Total Inflows.csv")
TraceNum1<- paste0("Trace",TNum)
TraceDirectory <- paste0(TraceNum1,TraceDirectory)
Location <- TraceDirectory
Temp_Storage <- read_csv(Location)
Tot_Inflow[,i] <- Temp_Storage[,5]
i=i+1
}
}
Tot_Inflow <- data.frame(Tot_Inflow)
### Total Shortages
i=1
for(TTNum in 1:TraceNumber){
for(TNum in 1:TraceNumber1){
TraceDirectory <- paste0(",Trace",TTNum)
TraceDirectory <-paste0 (TraceDirectory,",RiverWare MRM,Weber Basin RiverWare Model,RiverWare Policy/Total Shortages.csv")
TraceNum1<- paste0("Trace",TNum)
TraceDirectory <- paste0(TraceNum1,TraceDirectory)
Location <- TraceDirectory
Temp_Storage <- read_csv(Location)
Tot_Shortages[,i] <- Temp_Storage[,5]
i=i+1
}
}
Tot_Shortages <- data.frame(Tot_Shortages)
View(Tot_Shortages)
### Total Storage ###
i=1
TTNum <- 1
TNum <- 1
while (i<=Tot_TraceNum) {
TraceNum1 <- paste0("Trace",TNum)
TraceNum2<- paste0(",Trace",TTNum)
TraceDirectory <- paste0(TraceNum1,TraceNum2)
colnames(Tot_Stor)[i] <-  TraceDirectory
i=i+1
if(TTNum > (TraceNumber-1)){
TNum = TNum +1
} else {
TNum = TNum
}
if(TTNum > (TraceNumber1-1)){
TTNum = 1
} else {
TTNum = TTNum + 1
}
}
#add Date column
Tot_Stor$Date <- seq.Date(as.Date("0000/11/30"),by ="month",length=359)
### Total Inflows ###
i=1
TTNum <- 1
TNum <- 1
Tot_TraceNum =36
while (i<=Tot_TraceNum) {
TraceNum1 <- paste0("Trace",TNum)
TraceNum2<- paste0(",Trace",TTNum)
TraceDirectory <- paste0(TraceNum1,TraceNum2)
colnames(Tot_Inflow)[i] <-  TraceDirectory
i=i+1
if(TTNum > (TraceNumber-1)){
TNum = TNum +1
} else {
TNum = TNum
}
if(TTNum > (TraceNumber1-1)){
TTNum = 1
} else {
TTNum = TTNum + 1
}
}
#add Date column
Tot_Inflow$Date <- seq.Date(as.Date("0000/11/30"),by ="month",length=359)
### Total Shortages ###
i=1
TTNum <- 1
TNum <- 1
Tot_TraceNum =36
while (i<=Tot_TraceNum) {
TraceNum1 <- paste0("Trace",TNum)
TraceNum2<- paste0(",Trace",TTNum)
TraceDirectory <- paste0(TraceNum1,TraceNum2)
colnames(Tot_Shortages)[i] <-  TraceDirectory
i=i+1
if(TTNum > (TraceNumber-1)){
TNum = TNum +1
} else {
TNum = TNum
}
if(TTNum > (TraceNumber1-1)){
TTNum = 1
} else {
TTNum = TTNum + 1
}
}
#add Date column
Tot_Shortages$Date <- seq.Date(as.Date("0000/11/30"),by ="month",length=359)
View(Tot_Shortages)
## Annual Storage ### By Water Year November to October
Tot_Stor_Annual <-1:30
Tot_Stor_Annual <- data.frame(Tot_Stor_Annual)
k=1
while (k<=36) {
i=1
j=12
while (i<=30) {
Tot_Stor_Annual[i,k] <- sum(na.omit(Tot_Stor[(j-11):j,k]))
i=i+1
j=j+12
}
k=k+1
}
#rename columns
i=1
TTNum <- 1
TNum <- 1
while (i<=Tot_TraceNum) {
TraceNum1 <- paste0("Trace",TNum)
TraceNum2<- paste0(",Trace",TTNum)
TraceDirectory <- paste0(TraceNum1,TraceNum2)
colnames(Tot_Stor_Annual)[i] <-  TraceDirectory
i=i+1
if(TTNum > (TraceNumber-1)){
TNum = TNum +1
} else {
TNum = TNum
}
if(TTNum > (TraceNumber1-1)){
TTNum = 1
} else {
TTNum = TTNum + 1
}
}
View(Tot_Stor_Annual)
## Average Annual Shortages
Tot_Shortage_Annual <-1:30
Tot_Shortage_Annual <- data.frame(Tot_Shortage_Annual)
View(Tot_Shortage_Annual)
k=1
while (k<=36) {
i=1
j=12
while (i<=30) {
Tot_Shortage_Annual[i,k] <- sum(na.omit(Tot_Shortage_Annual[(j-11):j,k]))
i=i+1
j=j+12
}
k=k+1
}
View(Tot_Shortage_Annual)
## Average Annual Shortages
Tot_Shortage_Annual <-1:30
Tot_Shortage_Annual <- data.frame(Tot_Shortage_Annual)
k=1
while (k<=36) {
i=1
j=12
while (i<=30) {
Tot_Shortage_Annual[i,k] <- sum((Tot_Shortage_Annual[(j-11):j,k]))
i=i+1
j=j+12
}
k=k+1
}
View(Tot_Shortage_Annual)
Tot_Shortage_Annual[i,k] <- sum(na.omit(Tot_Shortage_Annual[(j-11):j,k]))
Ts<-sum(na.omit(Tot_Shortage_Annual[1:12,1]))
Ts
sum(na.omit(Tot_Shortage_Annual[13:24,1]))
sum(na.omit(Tot_Shortage_Annual[249:263,1]))
sum(na.omit(Tot_Shortage_Annual[249:270,1]))
sum(na.omit(Tot_Shortage_Annual[249:270,]))
sum(na.omit(Tot_Shortage_Annual[249:270,1]))
sum(na.omit(Tot_Shortage_Annual[1:359,1]))
sum(Tot_Shortage_Annual[1:359,1])
sum(Tot_Shortage_Annual[1:359,1]) Tot_Shortage_Annual
Tot_Shortage_Annual[1,]
## Average Annual Shortages
Tot_Shortage_Annual <-1:30
Tot_Shortage_Annual <- data.frame(Tot_Shortage_Annual)
k=1
while (k<=36) {
i=1
j=12
while (i<=30) {
Tot_Shortage_Annual[i,k] <- sum(na.omit(Tot_Shortages[(j-11):j,k]))
i=i+1
j=j+12
}
k=k+1
}
#rename columns
i=1
TTNum <- 1
TNum <- 1
Tot_TraceNum =36
while (i<=Tot_TraceNum) {
TraceNum1 <- paste0("Trace",TNum)
TraceNum2<- paste0(",Trace",TTNum)
TraceDirectory <- paste0(TraceNum1,TraceNum2)
colnames(Tot_Shortage_Annual)[i] <-  TraceDirectory
i=i+1
if(TTNum > (TraceNumber-1)){
TNum = TNum +1
} else {
TNum = TNum
}
if(TTNum > (TraceNumber1-1)){
TTNum = 1
} else {
TTNum = TTNum + 1
}
}
View(Tot_Shortage_Annual)
## Average Annual INFLOWS ### By Water Year November to October
Tot_Inflow_Annual <-1:30
Tot_Inflow_Annual <- data.frame(Tot_Inflow_Annual)
k=1
while (k<=36) {
i=1
j=12
while (i<=30) {
Tot_Inflow_Annual[i,k] <- sum(na.omit(Tot_Inflow[(j-11):j,k]))
i=i+1
j=j+12
}
k=k+1
}
#rename columns
i=1
TTNum <- 1
TNum <- 1
Tot_TraceNum =36
while (i<=Tot_TraceNum) {
TraceNum1 <- paste0("Trace",TNum)
TraceNum2<- paste0(",Trace",TTNum)
TraceDirectory <- paste0(TraceNum1,TraceNum2)
colnames(Tot_Inflow_Annual)[i] <-  TraceDirectory
i=i+1
if(TTNum > (TraceNumber-1)){
TNum = TNum +1
} else {
TNum = TNum
}
if(TTNum > (TraceNumber1-1)){
TTNum = 1
} else {
TTNum = TTNum + 1
}
}
setwd("~/GitHub/WeberBasinVulnerability/WeberBasinVulnerability/3 - Post Processing")
library(readr)
SumMIandAG <- read_csv("SumMIandAG.csv")
SumMIandAG <- data.frame(SumMIandAG$SummedMIandAG)
Tot_Demand_Annual <- c(rep(SumMIandAG$SumMIandAG.SummedMIandAG,6))
Tot_Demand_Annual <- data.frame(Tot_Demand_Annual)
Tot_Demand_Annual_Step1 <- data.frame(rep(Tot_Demand_Annual,30))
#Transpose
Stacked_Demand_Annualstep1 <- data.frame(t(Tot_Demand_Annual_Step1))
Stacked_Demand_Annual<- stack(Stacked_Demand_Annualstep1)
#Rename columns
names(Stacked_Demand_Annual)[2] <- paste("Year")
names(Stacked_Demand_Annual)[1] <- paste("Demand")
# Change Date column
Stacked_Demand_Annual$Year <- rep(c(1:30))
Stacked_Demand_Annual$ID <- c(1:1080)
Stacked_Stor_Annual <- stack(Tot_Stor_Annual)
Stacked_Inflow_Annual <- stack(Tot_Inflow_Annual)
Stacked_Shortage_Annual <- stack(Tot_Shortage_Annual)
#Rename Columns
names(Stacked_Stor_Annual)[2] <- paste("Traces")
names(Stacked_Stor_Annual)[1] <- paste("Storage")
names(Stacked_Inflow_Annual)[2] <- paste("Traces")
names(Stacked_Inflow_Annual)[1] <- paste("Inflows")
names(Stacked_Shortage_Annual)[2] <- paste("Traces")
names(Stacked_Shortage_Annual)[1] <- paste("Shortages")
#Create ID number Column
Stacked_Inflow_Annual$ID <-c(1:1080)
Stacked_Stor_Annual$ID <-c(1:1080)
tempfile <- merge(Stacked_Demand_Annual,Stacked_Inflow_Annual,by ="ID")
tempfile <- merge(Stacked_Demand_Annual,Stacked_Inflow_Annual,by ="ID")
tempfile <- merge(tempfile,Stacked_Shortage_Annual,by = "ID")
#Create ID number Column
Stacked_Inflow_Annual$ID <-c(1:1080)
Stacked_Stor_Annual$ID <-c(1:1080)
Stacked_Shortage_Annual$ID<-c(1:1080)
tempfile <- merge(Stacked_Demand_Annual,Stacked_Inflow_Annual,by ="ID")
tempfile <- merge(tempfile,Stacked_Shortage_Annual,by = "ID")
#View(tempfile)
AllDataDF <- merge(tempfile,Stacked_Stor_Annual,by ="ID")
#View(Data)
names(Data)[1] <- paste("Demand")
names(Data)[2] <- paste("Inflows")
names(Data)[3] <- paste("Shortages")
#Get rid of nonessential columns
Data <- data.frame(AllDataDF$Demand,AllDataDF$Inflows,AllDataDF$Storage,AllDataDF$Shortages,AllDataDF$Year)
#View(Data)
names(Data)[1] <- paste("Demand")
names(Data)[2] <- paste("Inflows")
names(Data)[3] <- paste("Shortages")
names(Data)[4] <- paste("Storage")
##################################################################################################
##PLOTS
##################################################################################################
library(plotly)
### Plot AllData Dataframe ##########
p <- plot_ly(Data,x =Data$Demand,y=Data$Inflows,color = Data$Storage)
for(trace in colnames(Data)){
p <- p %>% plotly::add_trace(y = as.formula(paste0("~`",trace,"`")),name = trace)
}
p
#X = Demand, Y= Inflows
p <- plot_ly(Data,x =Data$Demand,y=Data$Inflows ,color = Data$Shortages)
p
#X = Storage, Y= Shortage
p <- plot_ly(Data,x =Data$Storage,y=Data$Shortages ,color = Data$Demand)
p
#X = Shortage, Y= Storage
p <- plot_ly(Data,x =Data$Shortage,y=Data$Storage ,color = Data$Demand)
p
#X = Shortage, Y= Storage
p <- plot_ly(Data,x =Data$Shortage,y=Data$Storage ,color = Data$Inflows)
p
#X = Shortage, Y= Storage
p <- plot_ly(Data,x =Data$Shortage,y=Data$Storage ,color = Data$Inflows)%>%   # look at removing 0 values of Shortages in plots
layout(title = "Monthly Storage",
xaxis = list(title ="Shortage"),
yaxis = list(title = "Storage (Acre-Feet)"))
p
#X = Shortage, Y= Storage
p <- plot_ly(Data,x =Data$Shortage,y=Data$Storage ,color = Data$Inflows)%>%   # look at removing 0 values of Shortages in plots
layout(title = "Title",
xaxis = list(title ="Storage (Acre-Feet)"),
yaxis = list(title = "Shortage (Acre-Feet)"))
p
#X = Demand, Y= Inflows
p <- plot_ly(Data,x =Data$Demand,y=Data$Inflows ,color = Data$Shortages)%>%
layout(title = "Demand Facor to Inflow Factor",
xaxis = list(title ="Demand"),
yaxis = list(title = "Inflows"))
p
### Plot AllData Dataframe ##########
p <- plot_ly(Data,x =Data$Demand,y=Data$Inflows,color = Data$Storage)
for(trace in colnames(Data)){
p <- p %>% plotly::add_trace(y = as.formula(paste0("~`",trace,"`")),name = trace)
}
p
p <- plot_ly(Data,x =Data$Inflows,color = Data$Storage)
for(trace in colnames(Data)){
p <- plot_ly(Data,x =Data$Inflows,color = Data$Storage)
for(trace in colnames(Data)){
} %>%
xaxis = list(title ="Inflows"),
p
p <- plot_ly(Data,x =Data$Inflows,color = Data$Storage) %>%
layout(title = "Title",
xaxis = list(title ="Inflows"),
yaxis = list(title = "Demand (Acre-Feet)          Storage (Acre-Feet)"))
for(trace in colnames(Data)){
p <- p %>% plotly::add_trace(y = as.formula(paste0("~`",trace,"`")),name = trace)
}
p
p <- plot_ly(Data,x =Data$Demand,color = Data$Storage)
for(trace in colnames(Data)){
p <- p %>% plotly::add_trace(y = as.formula(paste0("~`",trace,"`")),name = trace)
}
p
#X = Demand, Y= Inflows
p <- plot_ly(Data,x =Data$Demand,y=Data$Inflows ,color = Data$Storage)%>%
layout(title = "TITLE",
xaxis = list(title ="Demand"),
yaxis = list(title = "Inflows"))
p
#X = Demand, Y= Inflows
p <- plot_ly(Data,x =Data$Demand,y=Data$Inflows ,color = Data$Storage)%>%
layout(title = "TITLE",
xaxis = list(title ="Demand"),
yaxis = list(title = "Inflows"))
p
### Clear any existing data or functions.
rm(list=ls())
#Input Existing Model Evaporation Coeffs
library(readxl)
Existing_Model_Evap_Coeffs <- read_excel("~/GitHub/WeberBasinVulnerability/WeberBasinVulnerability/2 - RiverWare Modeling/Hydrology/Existing Model Evap Coeffs.xlsx")
Existing_Model_Evap_Coeffs <- data.frame(Existing_Model_Evap_Coeffs)
#View(Existing_Model_Evap_Coeffs)
setwd("~/GitHub/WeberBasinVulnerability/WeberBasinVulnerability/1 - Scenario Processing/Evaporation")
#Input New Evaporation Coeffs -- Adjusted Evap and Precip from University study of Willard Bay
library(readr)
hist_adjusted <- read_csv("hist_adjusted.csv")
#View(hist_adjusted)
late_adjusted <- read_csv("late_adjusted.csv")
#View(late_adjusted)
mid_adjusted <- read_csv("mid_adjusted.csv")
#View(mid_adjusted)
#Dataframes
hist_adjusted <- data.frame(hist_adjusted)
late_adjusted <- data.frame(late_adjusted)
mid_adjusted <- data.frame(mid_adjusted)
#Convert Adjusted data from UofU from mm to ft
hist_adjusted[,2:3]<- hist_adjusted[,2:3]*0.00328084
late_adjusted[,2:3]<- late_adjusted[,2:3]*0.00328084
mid_adjusted[,2:3]<- mid_adjusted[,2:3]*0.00328084
#rename columns
names(hist_adjusted)[2]<-paste("precipitation (ft)")
names(hist_adjusted)[3]<-paste("evaporation (ft)")
names(late_adjusted)[2]<-paste("precipitation (ft)")
names(late_adjusted)[3]<-paste("evaporation (ft)")
names(mid_adjusted)[2]<-paste("precipitation (ft)")
names(mid_adjusted)[3]<-paste("evaporation (ft)")
View(hist_adjusted)
