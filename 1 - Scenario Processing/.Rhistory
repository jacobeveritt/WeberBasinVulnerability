}
### Total Storage ###
i=1
TTTNum <- 1
TTNum <- 1
TNum <- 1
while (i<=Tot_TraceNum) {
TraceNum1 <- paste0("Trace",TNum)
TraceNum2<- paste0(",Trace",TTNum)
TraceNum3<- paste0(",Trace",TTTNum)
TraceDirectory <- paste0(TraceNum1,TraceNum2)
TraceDirectory <- paste0(TraceDirectory,TraceNum3)
colnames(Tot_Stor)[i] <-  TraceDirectory
i=i+1
if(TNum > (TraceNumber-1)){
TNum = TNum +1
} else {
TNum = TNum
}
if(TTNum > (TraceNumber1-1)){
TTNum = 1
} else {
TTNum = TTNum + 1
}
if(TTTNum > (TraceNumber2-1)){
TTTNum = 1
} else {
TTTNum = TTTNum + 1
}
}
while (i<=Tot_TraceNum) {
TraceNum1 <- paste0("Trace",TNum)
TraceNum2<- paste0(",Trace",TTNum)
TraceNum3<- paste0(",Trace",TTTNum)
TraceDirectory <- paste0(TraceNum1,TraceNum2)
TraceDirectory <- paste0(TraceDirectory,TraceNum3)
colnames(Tot_Stor)[i] <-  TraceDirectory
i=i+1
if(TNum > (TraceNumber-1)){
TNum = TNum +1
} else {
TNum = TNum
}
if(TTNum > (TraceNumber1-1)){
TTNum = TTNum +1
} else {
TTNum = TTNum
}
if(TTTNum > (TraceNumber2-1)){
TTTNum = 1
} else {
TTTNum = TTTNum + 1
}
}
### Total Storage ###
i=1
TTTNum <- 1
TTNum <- 1
TNum <- 1
while (i<=Tot_TraceNum) {
TraceNum1 <- paste0("Trace",TNum)
TraceNum2<- paste0(",Trace",TTNum)
TraceNum3<- paste0(",Trace",TTTNum)
TraceDirectory <- paste0(TraceNum1,TraceNum2)
TraceDirectory <- paste0(TraceDirectory,TraceNum3)
colnames(Tot_Stor)[i] <-  TraceDirectory
i=i+1
if(TNum > (TraceNumber-1)){
TNum = TNum +1
} else {
TNum = TNum
}
if(TTNum > (TraceNumber1-1)){
TTNum = TTNum +1
} else {
TTNum = TTNum
}
if(TTTNum > (TraceNumber2-1)){
TTTNum = 1
} else {
TTTNum = TTTNum + 1
}
}
### Total Storage ###
i=1
TTTNum <- 1
TTNum <- 1
TNum <- 1
while (i<=Tot_TraceNum) {
TraceNum1 <- paste0("Trace",TNum)
TraceNum2<- paste0(",Trace",TTNum)
TraceNum3<- paste0(",Trace",TTTNum)
TraceDirectory <- paste0(TraceNum1,TraceNum2)
TraceDirectory <- paste0(TraceDirectory,TraceNum3)
colnames(Tot_Stor)[i] <-  TraceDirectory
i=i+1
if(TTNum > (TraceNumber-1)){
TNum = TNum +1
} else {
TNum = TNum
}
if(TTTNum > (TraceNumber1-1)){
TTNum = TTNum +1
} else {
TTNum = TTNum
}
if(TTTNum > (TraceNumber2-1)){
TTTNum = 1
} else {
TTTNum = TTTNum + 1
}
}
### Total Storage ###
i=1
TTTNum <- 1
TTNum <- 1
TNum <- 1
while (i<=Tot_TraceNum) {
TraceNum1 <- paste0("Trace",TNum)
TraceNum2<- paste0(",Trace",TTNum)
TraceNum3<- paste0(",Trace",TTTNum)
TraceDirectory <- paste0(TraceNum1,TraceNum2)
TraceDirectory <- paste0(TraceDirectory,TraceNum3)
colnames(Tot_Stor)[i] <-  TraceDirectory
i=i+1
if(TTNum > (TraceNumber-1)){
TNum = TNum +1
} else {
TNum = TNum
}
if(TTTNum > (TraceNumber2-1)){
TTNum = TTNum +1
} else {
TTNum = TTNum
}
if(TTTNum > (TraceNumber2-1)){
TTTNum = 1
} else {
TTTNum = TTTNum + 1
}
}
## June1 Storage ### By Water Year November to October
Tot_Stor_June1 <-1:30
Tot_Stor_June1 <- data.frame(Tot_Stor_June1)
k=1
while (k<=36) {
i=1
j=8
while (i<=30) {
Tot_Stor_June1[i,k] <- (na.omit(Tot_Stor[j,k]))
i=i+1
j=j+12
}
k=k+1
}
#rename columns
i=1
TTNum <- 1
TNum <- 1
while (i<=Tot_TraceNum) {
TraceNum1 <- paste0("Trace",TNum)
TraceNum2<- paste0(",Trace",TTNum)
TraceDirectory <- paste0(TraceNum1,TraceNum2)
colnames(Tot_Stor_June1)[i] <-  TraceDirectory
i=i+1
if(TTNum > (TraceNumber-1)){
TNum = TNum +1
} else {
TNum = TNum
}
if(TTNum > (TraceNumber1-1)){
TTNum = 1
} else {
TTNum = TTNum + 1
}
}
p <- plot_ly(
x = Data$Demand,
y = Data$Inflows,
#z = matrix(c(rep(1),2), nrow = 9720, ncol = 9720),
type = "contour"
)
### Clear any existing data or functions.
rm(list=ls())
setwd("~/GitHub/WeberBasinVulnerability/WeberBasinVulnerability/2 - RiverWare Modeling/Scenario")
library(readr)
Total_Storage_NO_EVAP <- read_csv("Trace5,Trace3,Trace1/Total Storage_NO EVAP.csv")
##################################Input data########################################################
TraceNumber <- 6
TraceNumber1 <-6
TraceNumber2 <-3
Tot_TraceNum <- TraceNumber*TraceNumber1*TraceNumber2
Tot_Stor <- read.csv("Trace1,Trace1,Trace1/Total Storage_NO EVAP.csv")
Tot_Inflow <-read.csv("Trace1,Trace1,Trace1/Total Inflows.csv")
Tot_Shortages <-read.csv("Trace1,Trace1,Trace1/Total Shortages.csv")
### Total Storage
i=1
for(TTTNum in 1:TraceNumber){
for(TTNum in 1:TraceNumber1){
for(TNum in 1:TraceNumber2){
TraceDirectory <- paste0(",Trace",TNum)
TraceDirectory <-paste0 (TraceDirectory,"/Total Storage_NO EVAP.csv")
TraceNum1<- paste0(",Trace",TTNum)
TraceDirectory <- paste0(TraceNum1,TraceDirectory)
TraceNum2 <- paste0("Trace",TTTNum)
TraceDirectory <- paste0(TraceNum2,TraceDirectory)
Location <- TraceDirectory
Temp_Storage <- read_csv(Location)
Tot_Stor[,i] <- Temp_Storage[,5]
i=i+1
}
}
}
Tot_Stor <- data.frame(Tot_Stor)
### Total Inflows
i=1
for(TTTNum in 1:TraceNumber){
for(TTNum in 1:TraceNumber1){
for(TNum in 1:TraceNumber2){
TraceDirectory <- paste0(",Trace",TNum)
TraceDirectory <-paste0 (TraceDirectory,"/Total Inflows.csv")
TraceNum1<- paste0(",Trace",TTNum)
TraceDirectory <- paste0(TraceNum1,TraceDirectory)
TraceNum2 <- paste0("Trace",TTTNum)
TraceDirectory <- paste0(TraceNum2,TraceDirectory)
Location <- TraceDirectory
Temp_Storage <- read_csv(Location)
Tot_Inflow[,i] <- Temp_Storage[,5]
i=i+1
}
}
}
Tot_Inflow <- data.frame(Tot_Inflow)
### Total Shortages
i=1
for(TTTNum in 1:TraceNumber){
for(TTNum in 1:TraceNumber1){
for(TNum in 1:TraceNumber2){
TraceDirectory <- paste0(",Trace",TNum)
TraceDirectory <-paste0 (TraceDirectory,"/Total Shortages.csv")
TraceNum1<- paste0(",Trace",TTNum)
TraceDirectory <- paste0(TraceNum1,TraceDirectory)
TraceNum2 <- paste0("Trace",TTTNum)
TraceDirectory <- paste0(TraceNum2,TraceDirectory)
Location <- TraceDirectory
Temp_Storage <- read_csv(Location)
Tot_Shortages[,i] <- Temp_Storage[,5]
i=i+1
}
}
}
Tot_Shortages <- data.frame(Tot_Shortages)
# implement into renaming structure
### Total Storage ###
i=1
for(TTTNum in 1:TraceNumber){
for(TTNum in 1:TraceNumber1){
for(TNum in 1:TraceNumber2){
TraceDirectory <- paste0(",Trace",TNum)
TraceNum1<- paste0(",Trace",TTNum)
TraceDirectory <- paste0(TraceNum1,TraceDirectory)
TraceNum2 <- paste0("Trace",TTTNum)
TraceDirectory <- paste0(TraceNum2,TraceDirectory)
colnames(Tot_Stor)[i] <-  TraceDirectory
i=i+1
}
}
}
#add Date column
Tot_Stor$Date <- seq.Date(as.Date("0000/11/30"),by ="month",length=359)
### Total Inflows ###
i=1
for(TTTNum in 1:TraceNumber){
for(TTNum in 1:TraceNumber1){
for(TNum in 1:TraceNumber2){
TraceDirectory <- paste0(",Trace",TNum)
TraceNum1<- paste0(",Trace",TTNum)
TraceDirectory <- paste0(TraceNum1,TraceDirectory)
TraceNum2 <- paste0("Trace",TTTNum)
TraceDirectory <- paste0(TraceNum2,TraceDirectory)
colnames(Tot_Inflow)[i] <-  TraceDirectory
i=i+1
}
}
}
#add Date column
Tot_Inflow$Date <- seq.Date(as.Date("0000/11/30"),by ="month",length=359)
### Total Shortages ###
i=1
for(TTTNum in 1:TraceNumber){
for(TTNum in 1:TraceNumber1){
for(TNum in 1:TraceNumber2){
TraceDirectory <- paste0(",Trace",TNum)
TraceNum1<- paste0(",Trace",TTNum)
TraceDirectory <- paste0(TraceNum1,TraceDirectory)
TraceNum2 <- paste0("Trace",TTTNum)
TraceDirectory <- paste0(TraceNum2,TraceDirectory)
colnames(Tot_Shortages)[i] <-  TraceDirectory
i=i+1
}
}
}
#add Date column
Tot_Shortages$Date <- seq.Date(as.Date("0000/11/30"),by ="month",length=359)
## June1 Storage ### By Water Year November to October
Tot_Stor_June1 <-1:30
Tot_Stor_June1 <- data.frame(Tot_Stor_June1)
k=1
while (k<=Tot_TraceNum+1) {
i=1
j=8
while (i<=30) {
Tot_Stor_June1[i,k] <- (na.omit(Tot_Stor[j,k]))
i=i+1
j=j+12
}
k=k+1
}
#rename columns
i=1
for(TTTNum in 1:TraceNumber){
for(TTNum in 1:TraceNumber1){
for(TNum in 1:TraceNumber2){
TraceDirectory <- paste0(",Trace",TNum)
TraceNum1<- paste0(",Trace",TTNum)
TraceDirectory <- paste0(TraceNum1,TraceDirectory)
TraceNum2 <- paste0("Trace",TTTNum)
TraceDirectory <- paste0(TraceNum2,TraceDirectory)
colnames(Tot_Stor_June1)[i] <-  TraceDirectory
i=i+1
}
}
}
## Average June1 Shortages
Tot_Shortage_June1 <-1:30
Tot_Shortage_June1 <- data.frame(Tot_Shortage_June1)
k=1
while (k<=36) {
i=1
j=8
while (i<=30) {
Tot_Shortage_June1[i,k] <- na.omit(Tot_Shortages[j,k])
i=i+1
j=j+12
}
k=k+1
}
#rename columns
i=1
for(TTTNum in 1:TraceNumber){
for(TTNum in 1:TraceNumber1){
for(TNum in 1:TraceNumber2){
TraceDirectory <- paste0(",Trace",TNum)
TraceNum1<- paste0(",Trace",TTNum)
TraceDirectory <- paste0(TraceNum1,TraceDirectory)
TraceNum2 <- paste0("Trace",TTTNum)
TraceDirectory <- paste0(TraceNum2,TraceDirectory)
colnames(Tot_Shortages)[i] <-  TraceDirectory
i=i+1
}
}
}
## Average June1 INFLOWS ### By Water Year November to October
Tot_Inflow_June1 <-1:30
Tot_Inflow_June1 <- data.frame(Tot_Inflow_June1)
k=1
while (k<=Tot_TraceNum) {
i=1
j=5
while (i<=30) {
Tot_Inflow_June1[i,k] <- na.omit(Tot_Inflow[j,k])
i=i+1
j=j+12
}
k=k+1
}
#rename columns
i=1
for(TTTNum in 1:TraceNumber){
for(TTNum in 1:TraceNumber1){
for(TNum in 1:TraceNumber2){
TraceDirectory <- paste0(",Trace",TNum)
TraceNum1<- paste0(",Trace",TTNum)
TraceDirectory <- paste0(TraceNum1,TraceDirectory)
TraceNum2 <- paste0("Trace",TTTNum)
TraceDirectory <- paste0(TraceNum2,TraceDirectory)
colnames(Tot_Inflow_June1)[i] <-  TraceDirectory
i=i+1
}
}
}
setwd("~/GitHub/WeberBasinVulnerability/WeberBasinVulnerability/3 - Post Processing")
library(readr)
SumMIandAG <- read_csv("SumMIandAG.csv")
SumMIandAG <- data.frame(SumMIandAG$SummedMIandAG)
Tot_Demand_June1 <- c(rep(SumMIandAG$SumMIandAG.SummedMIandAG,6))
Tot_Demand_June1 <- data.frame(Tot_Demand_June1)
Tot_Demand_June1_Step1 <- data.frame(rep(Tot_Demand_June1,30))
#Transpose
Stacked_Demand_June1step1 <- data.frame(t(Tot_Demand_June1_Step1))
Stacked_Demand_June1<- stack(Stacked_Demand_June1step1)
#Rename columns
names(Stacked_Demand_June1)[2] <- paste("Month")
names(Stacked_Demand_June1)[1] <- paste("Demand")
# Change Date column
Stacked_Demand_June1$Year <- rep(c(1:30))
#Create ID number Column
Stacked_Demand_June1$ID <- c(1:1080)
Stacked_Stor_June1 <- stack(Tot_Stor_June1)
Stacked_Inflow_June1 <- stack(Tot_Inflow_June1)
Stacked_Shortage_June1 <- stack(Tot_Shortage_June1)
#Rename Columns
names(Stacked_Stor_June1)[2] <- paste("Traces")
names(Stacked_Stor_June1)[1] <- paste("Storage")
names(Stacked_Inflow_June1)[2] <- paste("Traces")
names(Stacked_Inflow_June1)[1] <- paste("Inflows")
names(Stacked_Shortage_June1)[2] <- paste("Traces")
names(Stacked_Shortage_June1)[1] <- paste("Shortages")
#Create ID number Column
Stacked_Inflow_June1$ID <-c(1:1080)
Stacked_Stor_June1$ID <-c(1:1080)
Stacked_Shortage_June1$ID<-c(1:1080)
tempfile <- merge(Stacked_Demand_June1,Stacked_Inflow_June1,by ="ID")
tempfile <- merge(tempfile,Stacked_Shortage_June1,by = "ID")
#View(tempfile)
AllDataDF <- merge(tempfile,Stacked_Stor_June1,by ="ID")
#Get rid of nonessential columns
Data <- data.frame(AllDataDF$Demand,AllDataDF$Inflows,AllDataDF$Storage,AllDataDF$Shortages,AllDataDF$Year)
#View(Data)
names(Data)[1] <- paste("Demand")
names(Data)[2] <- paste("Inflows")
names(Data)[3] <- paste("Storage")
names(Data)[4] <- paste("Shortages")
##################################################################################################
##PLOTS
##################################################################################################
library(plotly)
if (!require("processx")) install.packages("processx")
setwd("~/GitHub/WeberBasinVulnerability/WeberBasinVulnerability/3 - Post Processing/Output")
### Individual plots
#X = Demand, Y= Inflows
p <- plot_ly(Data,x =Data$Demand,y=Data$Inflows ,color = Data$Storage)%>%
layout(title = "Storage by Color",
xaxis = list(title ="Demand"),
yaxis = list(title = "Inflows"))
p
#X = Demand, Y= Inflows Z = Shortages
p <- plot_ly(Data,x =Data$Demand,y=Data$Inflows ,color = Data$Shortages)%>%   #How to ignore 0 values
layout(title = "Shortages by Color",
xaxis = list(title ="Demand"),
yaxis = list(title = "Inflows"))
p
#X = Shortage, Y= Storage Z= Demands
p <- plot_ly(Data,x =Data$Shortage,y=Data$Storage ,color = Data$Demand) %>%
layout(title = "Demand by Color",
xaxis = list(title ="Shortage (Acre-Feet)"),
yaxis = list(title = "Storage (Acre-Feet)"))                        # look at removing 0 values of Shortages in plots
p
#X = Shortage, Y= Storage Z= Inflows
p <- plot_ly(Data,x =Data$Shortage,y=Data$Storage ,color = Data$Inflows)%>%
layout(title = "Inflows by Color",
xaxis = list(title ="Shortage (Acre-Feet)"),
yaxis = list(title = "Storage (Acre-Feet)"))
p
View(Tot_Demand_June1_Step1)
p <- plot_ly(
x = Data$Demand,
y = Data$Inflows,
z = Data$Shortages, nrow = 9720, ncol = 9720,
type = "contour")
p
p <- plot_ly(
x = Data$Demand,
y = Data$Inflows,
z = Data$Storage, nrow = 9720, ncol = 9720,
type = "contour")
p
p <- plot_ly(
x = Data$Demand,
y = Data$Inflows,
z = Data$Storage, nrow = 9720, ncol = 9720,title("Demand, Inflows by Storage"),
type = "contour")
p <- plot_ly(
x = Data$Demand,
y = Data$Inflows,
z = Data$Storage, nrow = 9720, ncol = 9720,list(title("Demand, Inflows by Storage")),
type = "contour")
p
p <- plot_ly(
x = Data$Demand,
y = Data$Inflows,
z = Data$Storage, nrow = 9720, ncol = 9720, type = "contour")%>%
layout(title = "Storage by Color",
xaxis = list(title ="Demand"),
yaxis = list(title = "Inflows"))
p
p <- plot_ly(
x = Data$Demand,
y = Data$Inflows,
z = Data$Shortages, nrow = 9720, ncol = 9720,type = "contour")%>%
layout(title = "Storage by Shortages",
xaxis = list(title ="Demand"),
yaxis = list(title = "Inflows"))
p
p <- plot_ly(
x = Data$Demand,
y = Data$Inflows,
z = Data$Shortages, nrow = 9720, ncol = 9720,type = "contour")%>%
layout(title = "Shortages by Color",
xaxis = list(title ="Demand"),
yaxis = list(title = "Inflows"))
p
