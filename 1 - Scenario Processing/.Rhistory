p
#X = Demand, Y= Inflows
p <- plot_ly(Data,x =Data$Demand,y=Data$Inflows ,color = Data$Shortages)%>%
layout(title = "Demand Facor to Inflow Factor",
xaxis = list(title ="Demand"),
yaxis = list(title = "Inflows"))
p
### Plot AllData Dataframe ##########
p <- plot_ly(Data,x =Data$Demand,y=Data$Inflows,color = Data$Storage)
for(trace in colnames(Data)){
p <- p %>% plotly::add_trace(y = as.formula(paste0("~`",trace,"`")),name = trace)
}
p
p <- plot_ly(Data,x =Data$Inflows,color = Data$Storage)
for(trace in colnames(Data)){
p <- plot_ly(Data,x =Data$Inflows,color = Data$Storage)
for(trace in colnames(Data)){
} %>%
xaxis = list(title ="Inflows"),
p
p <- plot_ly(Data,x =Data$Inflows,color = Data$Storage) %>%
layout(title = "Title",
xaxis = list(title ="Inflows"),
yaxis = list(title = "Demand (Acre-Feet)          Storage (Acre-Feet)"))
for(trace in colnames(Data)){
p <- p %>% plotly::add_trace(y = as.formula(paste0("~`",trace,"`")),name = trace)
}
p
p <- plot_ly(Data,x =Data$Demand,color = Data$Storage)
for(trace in colnames(Data)){
p <- p %>% plotly::add_trace(y = as.formula(paste0("~`",trace,"`")),name = trace)
}
p
#X = Demand, Y= Inflows
p <- plot_ly(Data,x =Data$Demand,y=Data$Inflows ,color = Data$Storage)%>%
layout(title = "TITLE",
xaxis = list(title ="Demand"),
yaxis = list(title = "Inflows"))
p
#X = Demand, Y= Inflows
p <- plot_ly(Data,x =Data$Demand,y=Data$Inflows ,color = Data$Storage)%>%
layout(title = "TITLE",
xaxis = list(title ="Demand"),
yaxis = list(title = "Inflows"))
p
### Clear any existing data or functions.
rm(list=ls())
#Input Existing Model Evaporation Coeffs
library(readxl)
Existing_Model_Evap_Coeffs <- read_excel("~/GitHub/WeberBasinVulnerability/WeberBasinVulnerability/2 - RiverWare Modeling/Hydrology/Existing Model Evap Coeffs.xlsx")
Existing_Model_Evap_Coeffs <- data.frame(Existing_Model_Evap_Coeffs)
#View(Existing_Model_Evap_Coeffs)
setwd("~/GitHub/WeberBasinVulnerability/WeberBasinVulnerability/1 - Scenario Processing/Evaporation")
#Input New Evaporation Coeffs -- Adjusted Evap and Precip from University study of Willard Bay
library(readr)
hist_adjusted <- read_csv("hist_adjusted.csv")
#View(hist_adjusted)
late_adjusted <- read_csv("late_adjusted.csv")
#View(late_adjusted)
mid_adjusted <- read_csv("mid_adjusted.csv")
#View(mid_adjusted)
#Dataframes
hist_adjusted <- data.frame(hist_adjusted)
late_adjusted <- data.frame(late_adjusted)
mid_adjusted <- data.frame(mid_adjusted)
#Convert Adjusted data from UofU from mm to ft
hist_adjusted[,2:3]<- hist_adjusted[,2:3]*0.00328084
late_adjusted[,2:3]<- late_adjusted[,2:3]*0.00328084
mid_adjusted[,2:3]<- mid_adjusted[,2:3]*0.00328084
#rename columns
names(hist_adjusted)[2]<-paste("precipitation (ft)")
names(hist_adjusted)[3]<-paste("evaporation (ft)")
names(late_adjusted)[2]<-paste("precipitation (ft)")
names(late_adjusted)[3]<-paste("evaporation (ft)")
names(mid_adjusted)[2]<-paste("precipitation (ft)")
names(mid_adjusted)[3]<-paste("evaporation (ft)")
View(hist_adjusted)
diff_adjusted<-(hist_adjusted$`precipitation (ft)`-hist_adjusted$`evaporation (ft)`)
summary(diff_adjusted)
diff_adjusted<-(late_adjusted$`precipitation (ft)`-late_adjusted$`evaporation (ft)`)
summary(diff_adjusted)
mid_adjusted<-(late_adjusted$`precipitation (ft)`-mid_adjusted$`evaporation (ft)`)
summary(diff_adjusted)
diff_adjusted<-(mid_adjusted$`precipitation (ft)`-mid_adjusted$`evaporation (ft)`)
mid_adjusted <- read_csv("mid_adjusted.csv")
mid_adjusted <- data.frame(mid_adjusted)
#Input Existing Model Evaporation Coeffs
library(readxl)
#Input Existing Model Evaporation Coeffs
library(readxl)
Existing_Model_Evap_Coeffs <- read_excel("~/GitHub/WeberBasinVulnerability/WeberBasinVulnerability/2 - RiverWare Modeling/Hydrology/Existing Model Evap Coeffs.xlsx")
Existing_Model_Evap_Coeffs <- data.frame(Existing_Model_Evap_Coeffs)
#View(Existing_Model_Evap_Coeffs)
setwd("~/GitHub/WeberBasinVulnerability/WeberBasinVulnerability/1 - Scenario Processing/Evaporation")
#Input New Evaporation Coeffs -- Adjusted Evap and Precip from University study of Willard Bay
library(readr)
hist_adjusted <- read_csv("hist_adjusted.csv")
#View(hist_adjusted)
late_adjusted <- read_csv("late_adjusted.csv")
#View(late_adjusted)
mid_adjusted <- read_csv("mid_adjusted.csv")
#View(mid_adjusted)
#Dataframes
hist_adjusted <- data.frame(hist_adjusted)
late_adjusted <- data.frame(late_adjusted)
mid_adjusted <- data.frame(mid_adjusted)
#Convert Adjusted data from UofU from mm to ft
hist_adjusted[,2:3]<- hist_adjusted[,2:3]*0.00328084
late_adjusted[,2:3]<- late_adjusted[,2:3]*0.00328084
mid_adjusted[,2:3]<- mid_adjusted[,2:3]*0.00328084
#rename columns
names(hist_adjusted)[2]<-paste("precipitation (ft)")
names(hist_adjusted)[3]<-paste("evaporation (ft)")
names(late_adjusted)[2]<-paste("precipitation (ft)")
names(late_adjusted)[3]<-paste("evaporation (ft)")
names(mid_adjusted)[2]<-paste("precipitation (ft)")
names(mid_adjusted)[3]<-paste("evaporation (ft)")
View(hist_adjusted)
diff_adjusted<-(mid_adjusted$`precipitation (ft)`-mid_adjusted$`evaporation (ft)`)
summary(diff_adjusted)
# *------------------------------------------------------------------
# | PROGRAM NAME: Service Area Divided Annual Demands
#Copy intro page back in when done
#Set Working Directory
setwd("~/GitHub/WeberBasinVulnerability/WeberBasinVulnerability/1 - Scenario Processing/Annual Service Area Demand Scenarios/Input_Data")
### Clear any existing data or functions.
rm(list=ls())
##Possible package installation necessary
#install.packages("RColorBrewer")
#install.packages("plotly")
#install.packages("readxl")
#install.packages("openxlsx")
library(readxl)
library(plotly)
library(RColorBrewer)
library(openxlsx)
#----------------------------### Inputs ### ------------------------------------------------------------------------------------------------------------------------------------------
#1 & #2 Inputs By County and Year (Population and Per Capita Usage)
D2015<-read.csv("2015Data.csv")
D2070<-read.csv("2070Data.csv")
D2150<-read.csv("2150Data.csv")
#3 Evapotranspiration
#Evapotranspiration Scenarios
# a. No Change (No Calculation Necessary) (+0% Secondary Usage)
# b. Increased Usage due to Evapotranspiration (+ 15% Secondary Usage)
# c. Decreased Usage due to Increased Evapotranspiration therefore greater Precipitation (-15% Secondary Usage)
ET_IncreaseFactor = 1.15
#b.
D2015$IncET_Secondary.Use <- D2015$Secondary.Use*ET_IncreaseFactor
ET_DecreaseFactor = 0.85
D2070$IncET_Secondary.Use <- D2070$Secondary.Use*ET_IncreaseFactor
D2150$IncET_Secondary.Use <- D2150$Secondary.Use*ET_IncreaseFactor
#c.
D2015$DecET_Secondary.Use <- D2015$Secondary.Use*ET_DecreaseFactor
D2070$DecET_Secondary.Use <- D2070$Secondary.Use*ET_DecreaseFactor
D2150$DecET_Secondary.Use <- D2150$Secondary.Use*ET_DecreaseFactor
#4 Scenarios Input (0%, 25% and 40% reduction)
ScenarioSA_PCntChanges <- read_excel("PercentChanges.xlsx")
#5 Misc Data
#Division of Water Resources Service Area Table
DWRSA_Table <- read_excel("DWRSA_Table.xlsx")
'_________________________________________________________________________________________________________________________________'
#Calculate Demand by County For 2015, 2070 and 2150
#Conversion Factor Gallons per day to Acre-feet per year
GALtoAF <- 0.0000030688832459704*365
#2015
D2015$MI_County <- ((D2015$Population*D2015$Potable.Use) + (D2015$Population*D2015$Secondary.Use))*GALtoAF
#2070
D2070$MI_County <- ((D2070$Population*D2070$Potable.Use) + (D2070$Population*D2070$Secondary.Use))*GALtoAF
#2150
D2150$MI_County <- ((D2150$Population*D2150$Potable.Use) + (D2150$Population*D2150$Secondary.Use))*GALtoAF
#2015
D2015$MI_SA <- D2015$MI_County*(DWRSA_Table$AVG/DWRSA_Table$`SUMS by County`)
#2070
D2070$MI_SA <- D2070$MI_County*(DWRSA_Table$AVG/DWRSA_Table$`SUMS by County`)
#2150
D2150$MI_SA <- D2150$MI_County*(DWRSA_Table$AVG/DWRSA_Table$`SUMS by County`)
DecPotable <- 0.90
#2015
D2015$DecPotable.Use <- D2015$Potable.Use * DecPotable
#2070
D2070$DecPotable.Use <- D2070$Potable.Use * DecPotable
#2150
D2150$DecPotable.Use <- D2150$Potable.Use * DecPotable
DecSecondary <- (1 - 0.34)
#2015
D2015$DecSecondary.Use <- D2015$Secondary.Use * DecSecondary
#2070
D2070$DecSecondary.Use <- D2070$Secondary.Use * DecSecondary
#2150
D2150$DecSecondary.Use <- D2150$Secondary.Use * DecSecondary
#Calculate Demand by County For 2015, 2070 and 2150
#2015
D2015$MI_County_PCDec <- ((D2015$Population*D2015$DecPotable.Use) + (D2015$Population*D2015$DecSecondary.Use))*GALtoAF
#2070
D2070$MI_County_PCDec <- ((D2070$Population*D2070$DecPotable.Use) + (D2070$Population*D2070$DecSecondary.Use))*GALtoAF
#2150
D2150$MI_County_PCDec <- ((D2150$Population*D2150$DecPotable.Use) + (D2150$Population*D2150$DecSecondary.Use))*GALtoAF
#2015
D2015$MI_SA_PCDec <- D2015$MI_County_PCDec*(DWRSA_Table$AVG/DWRSA_Table$`SUMS by County`)
#2070
D2070$MI_SA_PCDec <- D2070$MI_County_PCDec*(DWRSA_Table$AVG/DWRSA_Table$`SUMS by County`)
#2150
D2150$MI_SA_PCDec <- D2150$MI_County_PCDec*(DWRSA_Table$AVG/DWRSA_Table$`SUMS by County`)
DDPotable <- 0.80
#2015
D2015$DDPotable.Use <- D2015$Potable.Use * DDPotable
#2070
D2070$DDPotable.Use <- D2070$Potable.Use * DDPotable
#2150
D2150$DDPotable.Use <- D2150$Potable.Use * DDPotable
DDSecondary <- (1 - 0.44)
#2015
D2015$DDSecondary.Use <- D2015$Secondary.Use * DDSecondary
#2070
D2070$DDSecondary.Use <- D2070$Secondary.Use * DDSecondary
#2150
D2150$DDSecondary.Use <- D2150$Secondary.Use * DDSecondary
#Calculate Demand by County For 2015, 2070 and 2150
#2015
D2015$MI_County_PCDD <- ((D2015$Population*D2015$DDPotable.Use) + (D2015$Population*D2015$DDSecondary.Use))*GALtoAF
#2070
D2070$MI_County_PCDD <- ((D2070$Population*D2070$DDPotable.Use) + (D2070$Population*D2070$DDSecondary.Use))*GALtoAF
#2150
D2150$MI_County_PCDD <- ((D2150$Population*D2150$DDPotable.Use) + (D2150$Population*D2150$DDSecondary.Use))*GALtoAF
#2015
D2015$MI_SA_PCDD <- D2015$MI_County_PCDD*(DWRSA_Table$AVG/DWRSA_Table$`SUMS by County`)
#2070
D2070$MI_SA_PCDD <- D2070$MI_County_PCDD*(DWRSA_Table$AVG/DWRSA_Table$`SUMS by County`)
#2150
D2150$MI_SA_PCDD <- D2150$MI_County_PCDD*(DWRSA_Table$AVG/DWRSA_Table$`SUMS by County`)
#2015
D2015$MI_County_ETInc <- ((D2015$Population*D2015$Potable.Use) + (D2015$Population*D2015$IncET_Secondary.Use ))*GALtoAF
#2070
D2070$MI_County_ETInc <- ((D2070$Population*D2070$Potable.Use) + (D2070$Population*D2070$IncET_Secondary.Use))*GALtoAF
#2150
D2150$MI_County_ETInc <- ((D2150$Population*D2150$Potable.Use) + (D2150$Population*D2150$IncET_Secondary.Use))*GALtoAF
#2015
D2015$MI_SA_ETInc <- D2015$MI_County_ETInc*(DWRSA_Table$AVG/DWRSA_Table$`SUMS by County`)
#2070
D2070$MI_SA_ETInc <- D2070$MI_County_ETInc*(DWRSA_Table$AVG/DWRSA_Table$`SUMS by County`)
#2150
D2150$MI_SA_ETInc <- D2150$MI_County_ETInc*(DWRSA_Table$AVG/DWRSA_Table$`SUMS by County`)
DecSecondary <- (1 - 0.34)
#2015
D2015$DecSecondary.Use_ETInc <- D2015$IncET_Secondary.Use * DecSecondary
#2070
D2070$DecSecondary.Use_ETInc <- D2070$IncET_Secondary.Use * DecSecondary
#2150
D2150$DecSecondary.Use_ETInc <- D2150$IncET_Secondary.Use * DecSecondary
#Calculate Demand by County For 2015, 2070 and 2150
#2015
D2015$MI_County_PCDec_ETInc <- ((D2015$Population*D2015$DecPotable.Use) + (D2015$Population*D2015$DecSecondary.Use_ETInc))*GALtoAF
#2070
D2070$MI_County_PCDec_ETInc <- ((D2070$Population*D2070$DecPotable.Use) + (D2070$Population*D2070$DecSecondary.Use_ETInc))*GALtoAF
#2150
D2150$MI_County_PCDec_ETInc <- ((D2150$Population*D2150$DecPotable.Use) + (D2150$Population*D2150$DecSecondary.Use_ETInc))*GALtoAF
#2015
D2015$MI_SA_PCDec_ETInc <- D2015$MI_County_PCDec_ETInc*(DWRSA_Table$AVG/DWRSA_Table$`SUMS by County`)
#2070
D2070$MI_SA_PCDec_ETInc <- D2070$MI_County_PCDec_ETInc*(DWRSA_Table$AVG/DWRSA_Table$`SUMS by County`)
#2150
D2150$MI_SA_PCDec_ETInc <- D2150$MI_County_PCDec_ETInc*(DWRSA_Table$AVG/DWRSA_Table$`SUMS by County`)
DDSecondary <- (1 - 0.44)
#2015
D2015$DDSecondary.Use_ETInc <- D2015$IncET_Secondary.Use * DDSecondary
#2070
D2070$DDSecondary.Use_ETInc <- D2070$IncET_Secondary.Use * DDSecondary
#2150
D2150$DDSecondary.Use_ETInc <- D2150$IncET_Secondary.Use * DDSecondary
#Calculate Demand by County For 2015, 2070 and 2150
#2015
D2015$MI_County_PCDD_ETInc <- ((D2015$Population*D2015$DDPotable.Use) + (D2015$Population*D2015$DDSecondary.Use_ETInc))*GALtoAF
#2070
D2070$MI_County_PCDD_ETInc <- ((D2070$Population*D2070$DDPotable.Use) + (D2070$Population*D2070$DDSecondary.Use_ETInc))*GALtoAF
#2150
D2150$MI_County_PCDD_ETInc <- ((D2150$Population*D2150$DDPotable.Use) + (D2150$Population*D2150$DDSecondary.Use_ETInc))*GALtoAF
###Allocating Demand from County Demand to Service Area Proportionally From DWRSA_Table
#2015
D2015$MI_SA_PCDD_ETInc <- D2015$MI_County_PCDD_ETInc*(DWRSA_Table$AVG/DWRSA_Table$`SUMS by County`)
#2070
D2070$MI_SA_PCDD_ETInc <- D2070$MI_County_PCDD_ETInc*(DWRSA_Table$AVG/DWRSA_Table$`SUMS by County`)
#2150
D2150$MI_SA_PCDD_ETInc <- D2150$MI_County_PCDD_ETInc*(DWRSA_Table$AVG/DWRSA_Table$`SUMS by County`)
#Calculate Demand by County For 2015, 2070 and 2150
#Conversion Factor Gallons per day to Acre-feet per year
GALtoAF <- 0.0000030688832459704*365
#2015
D2015$MI_County_ETDec <- ((D2015$Population*D2015$Potable.Use) + (D2015$Population*D2015$DecET_Secondary.Use))*GALtoAF
#2070
D2070$MI_County_ETDec <- ((D2070$Population*D2070$Potable.Use) + (D2070$Population*D2070$DecET_Secondary.Use))*GALtoAF
#2150
D2150$MI_County_ETDec <- ((D2150$Population*D2150$Potable.Use) + (D2150$Population*D2150$DecET_Secondary.Use))*GALtoAF
##Allocating Demand from County Demand to Service Area Proportionally From DWRSA_Table
#2015
D2015$MI_SA_ETDec <- D2015$MI_County_ETDec*(DWRSA_Table$AVG/DWRSA_Table$`SUMS by County`)
#2070
D2070$MI_SA_ETDec <- D2070$MI_County_ETDec*(DWRSA_Table$AVG/DWRSA_Table$`SUMS by County`)
#2150
D2150$MI_SA_ETDec <- D2150$MI_County_ETDec*(DWRSA_Table$AVG/DWRSA_Table$`SUMS by County`)
DecSecondary <- (1 - 0.34)
#2015
D2015$DecSecondary.Use_ETDec <- D2015$DecET_Secondary.Use * DecSecondary
#2070
D2070$DecSecondary.Use_ETDec <- D2070$DecET_Secondary.Use * DecSecondary
#2150
D2150$DecSecondary.Use_ETDec <- D2150$DecET_Secondary.Use * DecSecondary
#Calculate Demand by County For 2015, 2070 and 2150
#2015
D2015$MI_County_PCDec_ETDec <- ((D2015$Population*D2015$DecPotable.Use) + (D2015$Population*D2015$DecSecondary.Use_ETDec))*GALtoAF
#2070
D2070$MI_County_PCDec_ETDec <- ((D2070$Population*D2070$DecPotable.Use) + (D2070$Population*D2070$DecSecondary.Use_ETDec))*GALtoAF
#2150
D2150$MI_County_PCDec_ETDec <- ((D2150$Population*D2150$DecPotable.Use) + (D2150$Population*D2150$DecSecondary.Use_ETDec))*GALtoAF
#2015
D2015$MI_SA_PCDec_ETDec <- D2015$MI_County_PCDec_ETDec*(DWRSA_Table$AVG/DWRSA_Table$`SUMS by County`)
#2070
D2070$MI_SA_PCDec_ETDec <- D2070$MI_County_PCDec_ETDec*(DWRSA_Table$AVG/DWRSA_Table$`SUMS by County`)
#2150
D2150$MI_SA_PCDec_ETDec <- D2150$MI_County_PCDec_ETDec*(DWRSA_Table$AVG/DWRSA_Table$`SUMS by County`)
DDSecondary <- (1 - 0.44)
#2015
D2015$DDSecondary.Use_ETDec <- D2015$DecET_Secondary.Use * DDSecondary
#2070
D2070$DDSecondary.Use_ETDec <- D2070$DecET_Secondary.Use * DDSecondary
#2150
D2150$DDSecondary.Use_ETDec <- D2150$DecET_Secondary.Use * DDSecondary
#Calculate Demand by County For 2015, 2070 and 2150
#2015
D2015$MI_County_PCDD_ETDec <- ((D2015$Population*D2015$DDPotable.Use) + (D2015$Population*D2015$DDSecondary.Use_ETDec))*GALtoAF
#2070
D2070$MI_County_PCDD_ETDec <- ((D2070$Population*D2070$DDPotable.Use) + (D2070$Population*D2070$DDSecondary.Use_ETDec))*GALtoAF
#2150
D2150$MI_County_PCDD_ETDec <- ((D2150$Population*D2150$DDPotable.Use) + (D2150$Population*D2150$DDSecondary.Use_ETDec))*GALtoAF
###Allocating Demand from County Demand to Service Area Proportionally From DWRSA_Table
#2015
D2015$MI_SA_PCDD_ETDec <- D2015$MI_County_PCDD_ETDec*(DWRSA_Table$AVG/DWRSA_Table$`SUMS by County`)
#2070
D2070$MI_SA_PCDD_ETDec <- D2070$MI_County_PCDD_ETDec*(DWRSA_Table$AVG/DWRSA_Table$`SUMS by County`)
#2150
D2150$MI_SA_PCDD_ETDec <- D2150$MI_County_PCDD_ETDec*(DWRSA_Table$AVG/DWRSA_Table$`SUMS by County`)
###     Outputs    ################################################################################################################
setwd("~/GitHub/WeberBasinVulnerability/WeberBasinVulnerability/1 - Scenario Processing/Annual Service Area Demand Scenarios/Output")
MI_2015 <- D2015[,c(9,13,17,19,22,25,27,30,33)]
MI_2070 <- D2070[,c(9,13,17,19,22,25,27,30,33)]
MI_2150 <- D2150[,c(9,13,17,19,22,25,27,30,33)]
#add Utah County SA1 Data 35500 to top row
MI_2015[1,]<-35500
MI_2070[1,]<-35500
MI_2150[1,]<-35500
#add SA20 to be 0
MI_2015[20,]<-0
MI_2070[20,]<-0
MI_2150[20,]<-0
colnames(MI_2015) <- paste(colnames(MI_2015),"2015",sep="_")
colnames(MI_2070) <- paste(colnames(MI_2070),"2070",sep="_")
colnames(MI_2150) <- paste(colnames(MI_2150),"2150",sep="_")
MI<- data.frame(c(MI_2015,MI_2070,MI_2150))
View(MI)
DecSecondary <- (1 - 0.34)
D2015
#----------------------------### Inputs ### ------------------------------------------------------------------------------------------------------------------------------------------
#1 & #2 Inputs By County and Year (Population and Per Capita Usage)
D2015<-read.csv("2015Data.csv")
D2070<-read.csv("2070Data.csv")
# *------------------------------------------------------------------
# | PROGRAM NAME: Service Area Divided Annual Demands
#Copy intro page back in when done
#Set Working Directory
setwd("~/GitHub/WeberBasinVulnerability/WeberBasinVulnerability/1 - Scenario Processing/Annual Service Area Demand Scenarios/Input_Data")
### Clear any existing data or functions.
rm(list=ls())
##Possible package installation necessary
#install.packages("RColorBrewer")
#install.packages("plotly")
#install.packages("readxl")
#install.packages("openxlsx")
library(readxl)
library(plotly)
library(RColorBrewer)
library(openxlsx)
#----------------------------### Inputs ### ------------------------------------------------------------------------------------------------------------------------------------------
#1 & #2 Inputs By County and Year (Population and Per Capita Usage)
D2015<-read.csv("2015Data.csv")
D2070<-read.csv("2070Data.csv")
D2150<-read.csv("2150Data.csv")
D2015
### Clear any existing data or functions.
rm(list=ls())
## Set up Working Directory######################################################################################################
setwd("~/GitHub/WeberBasinVulnerability/WeberBasinVulnerability/1 - Scenario Processing/Annual Average Streamflow Scenario Selection")
#Input Librarys###############################################
library("viridisLite")
library(readr)
library(tidyverse)
library(readxl)
#install.packages("measurements")
library(measurements)
#Data######################################
weber2014 <- read_csv("weber2014_ac-ft.csv")  #Annual Data from Paleo Flows and Observed Flows
plot(weber2014$year,weber2014$recon_m3s,main = "Reconstructed Paleo Flows")
ClimateFlowsWeberRiver <- read_excel("ClimateFlowsWeberRiver.xlsx")  # Monthly Data from Western Water A. Climate Scenarios
ClimateFlowsWeberRiver <- ClimateFlowsWeberRiver[4:351,1:6]  #Get rid of first 3 months to start data on 1981-01-01
data <- as_tibble(ClimateFlowsWeberRiver)   ## Used for Plots at bottom of code.
SumsofClimate <- c(1:29)  ##bottom plots
df1 <- data.frame(ClimateFlowsWeberRiver) # Convert to dataframe
i=1981
j=1
YEARS <- c(1:348)
while (i<=2009) {
YEARS[(j:(j+11))] <- rep(i,12)          #Create Year Column 1981 to 2009
j=j+12
i=i+1
}
df1$year <- YEARS
#View(df1)
#Convert Monthly Data to Yearly data
#rename columns
names(df1)[1]<-paste("Date")
names(df1)[2]<-paste("StreamflowHistorical")
names(df1)[3]<-paste("StreamflowWW")
names(df1)[4]<-paste("StreamflowWD")
names(df1)[5]<-paste("StreamflowHW")
names(df1)[6]<-paste("StreamflowHD")
names(df1)[7]<-paste("Year")
library(dplyr)
#WWA Annual Climate Change Streamflows
Historical <-  data.frame(df1 %>% group_by(df1$Year) %>% summarise(StreamflowHistorical = sum(StreamflowHistorical)))
WarmWet  <-  data.frame(df1 %>% group_by(df1$Year) %>% summarise(StreamflowWW = sum(StreamflowWW)))
WarmDry <- data.frame(df1 %>% group_by(df1$Year) %>% summarise(StreamflowWD = sum(StreamflowWD)))
HotWet <-  data.frame(df1 %>% group_by(df1$Year) %>% summarise(StreamflowHW = sum(StreamflowHW)))
HotDry <-  data.frame(df1 %>% group_by(df1$Year) %>% summarise(StreamflowHD = sum(StreamflowHD)))
ACF0 <-merge(Historical,WarmWet, by = "df1.Year")     #Combine Climate Change Streamflows
ACF1 <-merge(ACF0,WarmDry,by = "df1.Year")
ACF2 <-merge(ACF1,HotWet,by = "df1.Year")
Annual_Flows <-merge(ACF2,HotDry,by = "df1.Year")
#quick plots
x= c(1905:2019)
y=na.omit(weber2014$obs_m3s)  # X and Y data for observed data from Gage -- Paleo Data
par(mfrow=c(2,3))
plot(x,y,main = "Observed",xlab ="Year",ylab="Streamflows (Acre-Feet/Year)" )
plot(Annual_Flows$df1.Year,Annual_Flows$StreamflowHistorical,main="Historical",xlab = "Year",ylab = "Streamflows (Acre-Feet/Year)")
plot(Annual_Flows$df1.Year,Annual_Flows$StreamflowWW,main="WarmWet",xlab = "Year",ylab = "Streamflows (Acre-Feet/Year)")
plot(Annual_Flows$df1.Year,Annual_Flows$StreamflowWD,main="WarmDry",xlab = "Year",ylab = "Streamflows (Acre-Feet/Year)")
plot(Annual_Flows$df1.Year,Annual_Flows$StreamflowHD,main="HotDry",xlab = "Year",ylab = "Streamflows (Acre-Feet/Year)")
plot(Annual_Flows$df1.Year,Annual_Flows$StreamflowHW,main="HotWet",xlab = "Year",ylab = "Streamflows (Acre-Feet/Year)")
i=1
j=1
k=j+28
while (i<=20) {
Annual_Flows[,paste("PaleoFlows",i,sep=" ")] =weber2014[j:k,8]
i=i+1
j=j+29
k=j+28
}
i=1
j=477
k=j+28
while (i<=4) {
Annual_Flows[,paste("ObservedFlows",i,sep=" ")] =weber2014[j:k,7]
i=i+1
j=j+29
k=j+28
}
#Rename PaleoFlows and ObservedFlows Columns
names(Annual_Flows)[1]<-paste("Date")
names(Annual_Flows)[7]<-paste("Paleo 1429-1457")
names(Annual_Flows)[8]<-paste("Paleo 1458-1486")
names(Annual_Flows)[9]<-paste("Paleo 1487-1515")
names(Annual_Flows)[10]<-paste("Paleo 1516-1544")
names(Annual_Flows)[11]<-paste("Paleo 1545-1573")
names(Annual_Flows)[12]<-paste("Paleo 1574-1602")
names(Annual_Flows)[13]<-paste("Paleo 1603-1631")
names(Annual_Flows)[14]<-paste("Paleo 1632-1660")
names(Annual_Flows)[15]<-paste("Paleo 1661-1689")
names(Annual_Flows)[16]<-paste("Paleo 1690-1718")
names(Annual_Flows)[17]<-paste("Paleo 1719-1747")
names(Annual_Flows)[18]<-paste("Paleo 1748-1776")
names(Annual_Flows)[19]<-paste("Paleo 1777-1805")
names(Annual_Flows)[20]<-paste("Paleo 1806-1834")
names(Annual_Flows)[21]<-paste("Paleo 1835-1863")
names(Annual_Flows)[22]<-paste("Paleo 1864-1892")
names(Annual_Flows)[23]<-paste("Paleo 1893-1921")
names(Annual_Flows)[24]<-paste("Paleo 1922-1950")
names(Annual_Flows)[25]<-paste("Paleo 1951-1979")
names(Annual_Flows)[26]<-paste("Paleo 1980-2004")
names(Annual_Flows)[27]<-paste("Observed 1905-1933")
names(Annual_Flows)[28]<-paste("Observed 1934-1962")
names(Annual_Flows)[29]<-paste("Observed 1963-1991")
names(Annual_Flows)[30]<-paste("Observed 1992-2019")
View(Annual_Flows)
#points xy
#for(i in c(2:30)){
#plot(Annual_Flows[,1],Annual_Flows[,i],main=colnames(Annual_Flows)[i],xlab = "Year",ylab = "Streamflows (Acre-Feet/Year)")
#}
#line xy
for(i in c(2:30)){
plot(Annual_Flows[,1],Annual_Flows[,i],type = "o",main=colnames(Annual_Flows)[i],xlab = "Year",ylab = "Streamflows (Acre-Feet/Year)")
}
#Plot all plots on one Graph
library(plotly)
p<- plot_ly(Annual_Flows, x = Annual_Flows$Date, name = 'Year', type = 'scatter', mode = 'lines',
line = list(color = colors(distinct = F), width = 2)) %>%
layout(#title = "Title",
xaxis = list(title ="Time"),
yaxis = list(title = "Streamflow (Acre-Ft/Yr)"))
for(trace in colnames(Annual_Flows)){
p <- p %>% plotly::add_trace(y = as.formula(paste0("~`",trace,"`")),name = trace)
}
p
SummaryAnnualFlows <- summary(na.omit(Annual_Flows))
View(SummaryAnnualFlows)
