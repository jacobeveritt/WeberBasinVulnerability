mid_adjusted <- data.frame(mid_adjusted)
#Convert Adjusted data from UofU from mm to ft
hist_adjusted[,2:3]<- hist_adjusted[,2:3]*0.00328084
late_adjusted[,2:3]<- late_adjusted[,2:3]*0.00328084
mid_adjusted[,2:3]<- mid_adjusted[,2:3]*0.00328084
#rename columns
names(hist_adjusted)[2]<-paste("precipitation (ft)")
names(hist_adjusted)[3]<-paste("evaporation (ft)")
names(late_adjusted)[2]<-paste("precipitation (ft)")
names(late_adjusted)[3]<-paste("evaporation (ft)")
names(mid_adjusted)[2]<-paste("precipitation (ft)")
names(mid_adjusted)[3]<-paste("evaporation (ft)")
#View(hist_adjusted)
### Calculate Coeffs
# Old * (new willard/old willard) or Existing * (Adjusted/Existing)
##Hist_Adjusted
hist_adjusted_model_evap_coeffs <- Existing_Model_Evap_Coeffs
i=2
while (i<=18) {
hist_adjusted_model_evap_coeffs[,i] <- as.numeric(Existing_Model_Evap_Coeffs[,i]) * (hist_adjusted[,3]/as.numeric(Existing_Model_Evap_Coeffs[,18]))
i=i+2
}
#View(hist_adjusted_model_evap_coeffs)
#Change NAN values to 0
j=2
while (j<=18) {
i=1
while (i<=13) {
hist_adjusted_model_evap_coeffs[i,j] <- ifelse(hist_adjusted_model_evap_coeffs[i,j]== "NaN",0,hist_adjusted_model_evap_coeffs[i,j])
i=i+1
}
j=j+2
}
#View(hist_adjusted_model_evap_coeffs)
##Late_adjusted
late_adjusted_model_evap_coeffs <- Existing_Model_Evap_Coeffs
i=2
while (i<=18) {
late_adjusted_model_evap_coeffs[,i] <- as.numeric(Existing_Model_Evap_Coeffs[,i]) * (late_adjusted[,3]/as.numeric(Existing_Model_Evap_Coeffs[,18]))
i=i+2
}
#Change NAN values to 0
j=2
while (j<=18) {
i=1
while (i<=13) {
late_adjusted_model_evap_coeffs[i,j] <- ifelse(late_adjusted_model_evap_coeffs[i,j]== "NaN",0,late_adjusted_model_evap_coeffs[i,j])
i=i+1
}
j=j+2
}
#View(late_adjusted_model_evap_coeffs)
##Mid_adjusted
mid_adjusted_model_evap_coeffs <- Existing_Model_Evap_Coeffs
i=2
while (i<=18) {
mid_adjusted_model_evap_coeffs[,i] <- as.numeric(Existing_Model_Evap_Coeffs[,i]) * (mid_adjusted[,3]/as.numeric(Existing_Model_Evap_Coeffs[,18]))
i=i+2
}
#Change NAN values to 0
j=2
while (j<=18) {
i=1
while (i<=13) {
mid_adjusted_model_evap_coeffs[i,j] <- ifelse(mid_adjusted_model_evap_coeffs[i,j]== "NaN",0,mid_adjusted_model_evap_coeffs[i,j])
i=i+1
}
j=j+2
}
#View(mid_adjusted_model_evap_coeffs)
#Output Evap Files to RiverWare/RiverSmart
setwd("~/GitHub/WeberBasinVulnerability/WeberBasinVulnerability/2 - RiverWare Modeling/Hydrology")
library(openxlsx)
write.xlsx(hist_adjusted_model_evap_coeffs, 'Evap_Hist.xlsx', sheetName="Run0",
col.names=TRUE, row.names=TRUE, append=FALSE, showNA=TRUE, password=NULL)
write.xlsx(late_adjusted_model_evap_coeffs, 'Evap_Late.xlsx', sheetName="Run0",
col.names=TRUE, row.names=TRUE, append=FALSE, showNA=TRUE, password=NULL)
write.xlsx(mid_adjusted_model_evap_coeffs, 'Evap_Mid.xlsx', sheetName="Run0",
col.names=TRUE, row.names=TRUE, append=FALSE, showNA=TRUE, password=NULL)
##### End of Code ############
#Evaporation Coeffs
### Clear any existing data or functions.
rm(list=ls())
#Input Existing Evaporation Coeffs
library(readxl)
Existing_Model_Evap_Coeffs <- read_excel("~/GitHub/WeberBasinVulnerability/WeberBasinVulnerability/2 - RiverWare Modeling/Hydrology/Existing Model Evap Coeffs.xlsx")
Existing_Model_Evap_Coeffs <- data.frame(Existing_Model_Evap_Coeffs)
#View(Existing_Model_Evap_Coeffs)
#Input New Evaporation Coeffs -- Adjusted Evap and Precip from University study of Willard Bay
library(readr)
hist_adjusted <- read_csv("Evaporation/hist_adjusted.csv")
#View(hist_adjusted)
late_adjusted <- read_csv("Evaporation/late_adjusted.csv")
#View(late_adjusted)
mid_adjusted <- read_csv("Evaporation/mid_adjusted.csv")
#View(mid_adjusted)
#Dataframes
hist_adjusted <- data.frame(hist_adjusted)
late_adjusted <- data.frame(late_adjusted)
mid_adjusted <- data.frame(mid_adjusted)
#Convert Adjusted data from UofU from mm to ft
hist_adjusted[,2:3]<- hist_adjusted[,2:3]*0.00328084
late_adjusted[,2:3]<- late_adjusted[,2:3]*0.00328084
mid_adjusted[,2:3]<- mid_adjusted[,2:3]*0.00328084
#rename columns
names(hist_adjusted)[2]<-paste("precipitation (ft)")
names(hist_adjusted)[3]<-paste("evaporation (ft)")
names(late_adjusted)[2]<-paste("precipitation (ft)")
names(late_adjusted)[3]<-paste("evaporation (ft)")
names(mid_adjusted)[2]<-paste("precipitation (ft)")
names(mid_adjusted)[3]<-paste("evaporation (ft)")
#View(hist_adjusted)
### Calculate Coeffs
# Old * (new willard/old willard) or Existing * (Adjusted/Existing)
##Hist_Adjusted
hist_adjusted_model_evap_coeffs <- Existing_Model_Evap_Coeffs
i=2
while (i<=18) {
hist_adjusted_model_evap_coeffs[,i] <- as.numeric(Existing_Model_Evap_Coeffs[,i]) * (hist_adjusted[,3]/as.numeric(Existing_Model_Evap_Coeffs[,18]))
i=i+2
}
#View(hist_adjusted_model_evap_coeffs)
#Change NAN values to 0
j=2
while (j<=18) {
i=1
while (i<=13) {
hist_adjusted_model_evap_coeffs[i,j] <- ifelse(hist_adjusted_model_evap_coeffs[i,j]== "NaN",0,hist_adjusted_model_evap_coeffs[i,j])
i=i+1
}
j=j+2
}
#View(hist_adjusted_model_evap_coeffs)
##Late_adjusted
late_adjusted_model_evap_coeffs <- Existing_Model_Evap_Coeffs
i=2
while (i<=18) {
late_adjusted_model_evap_coeffs[,i] <- as.numeric(Existing_Model_Evap_Coeffs[,i]) * (late_adjusted[,3]/as.numeric(Existing_Model_Evap_Coeffs[,18]))
i=i+2
}
#Change NAN values to 0
j=2
while (j<=18) {
i=1
while (i<=13) {
late_adjusted_model_evap_coeffs[i,j] <- ifelse(late_adjusted_model_evap_coeffs[i,j]== "NaN",0,late_adjusted_model_evap_coeffs[i,j])
i=i+1
}
j=j+2
}
#View(late_adjusted_model_evap_coeffs)
##Mid_adjusted
mid_adjusted_model_evap_coeffs <- Existing_Model_Evap_Coeffs
i=2
while (i<=18) {
mid_adjusted_model_evap_coeffs[,i] <- as.numeric(Existing_Model_Evap_Coeffs[,i]) * (mid_adjusted[,3]/as.numeric(Existing_Model_Evap_Coeffs[,18]))
i=i+2
}
#Change NAN values to 0
j=2
while (j<=18) {
i=1
while (i<=13) {
mid_adjusted_model_evap_coeffs[i,j] <- ifelse(mid_adjusted_model_evap_coeffs[i,j]== "NaN",0,mid_adjusted_model_evap_coeffs[i,j])
i=i+1
}
j=j+2
}
#View(mid_adjusted_model_evap_coeffs)
#Output Evap Files to RiverWare/RiverSmart
setwd("~/GitHub/WeberBasinVulnerability/WeberBasinVulnerability/2 - RiverWare Modeling/Hydrology")
library(openxlsx)
write.xlsx(hist_adjusted_model_evap_coeffs, 'Evap_Hist.xlsx', sheetName="Run0",
col.names=TRUE, row.names=TRUE, append=FALSE, showNA=TRUE, password=NULL)
write.xlsx(late_adjusted_model_evap_coeffs, 'Evap_Late.xlsx', sheetName="Run0",
col.names=TRUE, row.names=TRUE, append=FALSE, showNA=TRUE, password=NULL)
write.xlsx(mid_adjusted_model_evap_coeffs, 'Evap_Mid.xlsx', sheetName="Run0",
col.names=TRUE, row.names=TRUE, append=FALSE, showNA=TRUE, password=NULL)
##### End of Code ############
### Clear any existing data or functions.
rm(list=ls())
#Input Existing Evaporation Coeffs
library(readxl)
Existing_Model_Evap_Coeffs <- read_excel("~/GitHub/WeberBasinVulnerability/WeberBasinVulnerability/2 - RiverWare Modeling/Hydrology/Existing Model Evap Coeffs.xlsx")
Existing_Model_Evap_Coeffs <- data.frame(Existing_Model_Evap_Coeffs)
#Input New Evaporation Coeffs -- Adjusted Evap and Precip from University study of Willard Bay
library(readr)
hist_adjusted <- read_csv("Evaporation/hist_adjusted.csv")
setwd("~/GitHub/WeberBasinVulnerability/WeberBasinVulnerability/1 - Scenario Processing/Evaporation")
### Clear any existing data or functions.
rm(list=ls())
#Input Existing Evaporation Coeffs
library(readxl)
Existing_Model_Evap_Coeffs <- read_excel("~/GitHub/WeberBasinVulnerability/WeberBasinVulnerability/2 - RiverWare Modeling/Hydrology/Existing Model Evap Coeffs.xlsx")
Existing_Model_Evap_Coeffs <- data.frame(Existing_Model_Evap_Coeffs)
#View(Existing_Model_Evap_Coeffs)
setwd("~/GitHub/WeberBasinVulnerability/WeberBasinVulnerability/1 - Scenario Processing/Evaporation")
#Input New Evaporation Coeffs -- Adjusted Evap and Precip from University study of Willard Bay
library(readr)
hist_adjusted <- read_csv("Evaporation/hist_adjusted.csv")
### Clear any existing data or functions.
rm(list=ls())
#Input Existing Evaporation Coeffs
library(readxl)
Existing_Model_Evap_Coeffs <- read_excel("~/GitHub/WeberBasinVulnerability/WeberBasinVulnerability/2 - RiverWare Modeling/Hydrology/Existing Model Evap Coeffs.xlsx")
Existing_Model_Evap_Coeffs <- data.frame(Existing_Model_Evap_Coeffs)
#View(Existing_Model_Evap_Coeffs)
setwd("~/GitHub/WeberBasinVulnerability/WeberBasinVulnerability/1 - Scenario Processing/Evaporation")
#Input New Evaporation Coeffs -- Adjusted Evap and Precip from University study of Willard Bay
library(readr)
hist_adjusted <- read_csv("hist_adjusted.csv")
#View(hist_adjusted)
late_adjusted <- read_csv("late_adjusted.csv")
#View(late_adjusted)
mid_adjusted <- read_csv("mid_adjusted.csv")
#View(mid_adjusted)
#Dataframes
hist_adjusted <- data.frame(hist_adjusted)
late_adjusted <- data.frame(late_adjusted)
mid_adjusted <- data.frame(mid_adjusted)
#Convert Adjusted data from UofU from mm to ft
hist_adjusted[,2:3]<- hist_adjusted[,2:3]*0.00328084
late_adjusted[,2:3]<- late_adjusted[,2:3]*0.00328084
mid_adjusted[,2:3]<- mid_adjusted[,2:3]*0.00328084
#rename columns
names(hist_adjusted)[2]<-paste("precipitation (ft)")
names(hist_adjusted)[3]<-paste("evaporation (ft)")
names(late_adjusted)[2]<-paste("precipitation (ft)")
names(late_adjusted)[3]<-paste("evaporation (ft)")
names(mid_adjusted)[2]<-paste("precipitation (ft)")
names(mid_adjusted)[3]<-paste("evaporation (ft)")
##Hist_Adjusted
hist_adjusted_model_evap_coeffs <- Existing_Model_Evap_Coeffs
i=2
while (i<=18) {
hist_adjusted_model_evap_coeffs[,i] <- as.numeric(Existing_Model_Evap_Coeffs[,i]) * (hist_adjusted[,3]/as.numeric(Existing_Model_Evap_Coeffs[,18]))
i=i+2
}
#View(hist_adjusted_model_evap_coeffs)
#Change NAN values to 0
j=2
while (j<=18) {
i=1
while (i<=13) {
hist_adjusted_model_evap_coeffs[i,j] <- ifelse(hist_adjusted_model_evap_coeffs[i,j]== "NaN",0,hist_adjusted_model_evap_coeffs[i,j])
i=i+1
}
j=j+2
}
##Late_adjusted
late_adjusted_model_evap_coeffs <- Existing_Model_Evap_Coeffs
i=2
while (i<=18) {
late_adjusted_model_evap_coeffs[,i] <- as.numeric(Existing_Model_Evap_Coeffs[,i]) * (late_adjusted[,3]/as.numeric(Existing_Model_Evap_Coeffs[,18]))
i=i+2
}
#Change NAN values to 0
j=2
while (j<=18) {
i=1
while (i<=13) {
late_adjusted_model_evap_coeffs[i,j] <- ifelse(late_adjusted_model_evap_coeffs[i,j]== "NaN",0,late_adjusted_model_evap_coeffs[i,j])
i=i+1
}
j=j+2
}
##Mid_adjusted
mid_adjusted_model_evap_coeffs <- Existing_Model_Evap_Coeffs
i=2
while (i<=18) {
mid_adjusted_model_evap_coeffs[,i] <- as.numeric(Existing_Model_Evap_Coeffs[,i]) * (mid_adjusted[,3]/as.numeric(Existing_Model_Evap_Coeffs[,18]))
i=i+2
}
#Change NAN values to 0
j=2
while (j<=18) {
i=1
while (i<=13) {
mid_adjusted_model_evap_coeffs[i,j] <- ifelse(mid_adjusted_model_evap_coeffs[i,j]== "NaN",0,mid_adjusted_model_evap_coeffs[i,j])
i=i+1
}
j=j+2
}
#Output Evap Files to RiverWare/RiverSmart
setwd("~/GitHub/WeberBasinVulnerability/WeberBasinVulnerability/2 - RiverWare Modeling/Hydrology")
library(openxlsx)
write.xlsx(hist_adjusted_model_evap_coeffs, 'Evap_Hist.xlsx', sheetName="Run0",
col.names=TRUE, row.names=TRUE, append=FALSE, showNA=TRUE, password=NULL)
write.xlsx(late_adjusted_model_evap_coeffs, 'Evap_Late.xlsx', sheetName="Run0",
col.names=TRUE, row.names=TRUE, append=FALSE, showNA=TRUE, password=NULL)
write.xlsx(mid_adjusted_model_evap_coeffs, 'Evap_Mid.xlsx', sheetName="Run0",
col.names=TRUE, row.names=TRUE, append=FALSE, showNA=TRUE, password=NULL)
write.xlsx(mid_adjusted_model_evap_coeffs, 'Evap_Mid2.xlsx', sheetName="Run0",
col.names=TRUE, row.names=TRUE, append=FALSE, showNA=TRUE, password=NULL)
### Clear any existing data or functions.
rm(list=ls())
setwd("~/GitHub/WeberBasinVulnerability/WeberBasinVulnerability/2 - RiverWare Modeling/Scenario")
library(readr)
Total_Storage_NO_EVAP <- read_csv("Trace5,Trace3,RiverWare MRM,Weber Basin RiverWare Model,RiverWare Policy/Total Storage_NO EVAP.csv")
#Create a loop
#input data
TraceNumber <- 6
TraceNumber1 <-6
Tot_TraceNum <- TraceNumber*TraceNumber1
Tot_Stor <- read.csv("Trace1,Trace1,RiverWare MRM,Weber Basin RiverWare Model,RiverWare Policy/Total Storage_NO EVAP.csv")
#Create TraceFolder Naming lookup for Values with No Evap.
i=1
for(TTNum in 1:TraceNumber){
for(TNum in 1:TraceNumber1){
TraceDirectory <- paste0(",Trace",TTNum)
TraceDirectory <-paste0 (TraceDirectory,",RiverWare MRM,Weber Basin RiverWare Model,RiverWare Policy/Total Storage_NO EVAP.csv")
TraceNum1<- paste0("Trace",TNum)
TraceDirectory <- paste0(TraceNum1,TraceDirectory)
Location <- TraceDirectory
Temp_Storage <- read_csv(Location)
Tot_Stor[,i] <- Temp_Storage[,5]
i=i+1
}
}
Tot_Stor <- data.frame(Tot_Stor)
#rename columns
i=1
TTNum <- 1
TNum <- 1
while (i<=Tot_TraceNum) {
TraceNum1 <- paste0("Trace",TNum)
TraceNum2<- paste0(",Trace",TTNum)
TraceDirectory <- paste0(TraceNum1,TraceNum2)
colnames(Tot_Stor)[i] <-  TraceDirectory
#Tot_Stor[,i] <- setNames(Tot_Stor[,i], TraceDirectory)
i=i+1
if(TTNum > (TraceNumber-1)){
TNum = TNum +1
} else {
TNum = TNum
}
if(TTNum > (TraceNumber1-1)){
TTNum = 1
} else {
TTNum = TTNum + 1
}
}
#add Date column
Tot_Stor$Date <- seq.Date(as.Date("0000/11/30"),by ="month",length=359)
#Line plots
#Loop                   #Get rid of Alpha line
#different Colors
p<- plot_ly(Tot_Stor, x = Tot_Stor$Date, name = 'alpha', type = 'scatter', mode = 'lines',
line = list(color = colors(distinct = F), width = 2)) %>%
layout(#title = "Title",
xaxis = list(title ="Time"),
yaxis = list(title = "Percentage"))
for(trace in colnames(Tot_Stor)){
p <- p %>% plotly::add_trace(y = as.formula(paste0("~`",trace,"`")),name = trace)
}
p
#Line plots
#Loop                   #Get rid of Alpha line
#different Colors
library(plotly)
p<- plot_ly(Tot_Stor, x = Tot_Stor$Date, name = 'alpha', type = 'scatter', mode = 'lines',
line = list(color = colors(distinct = F), width = 2)) %>%
layout(#title = "Title",
xaxis = list(title ="Time"),
yaxis = list(title = "Percentage"))
for(trace in colnames(Tot_Stor)){
p <- p %>% plotly::add_trace(y = as.formula(paste0("~`",trace,"`")),name = trace)
}
p
View(Tot_Stor)
Tot_Stor$Year <- seq.Date(as.Date("0000"),by="month",length=359)
TraceDirectory
Temp_Storage
Tot_Stor$Year <- seq.Date(as.Date("0000"),by="year",length=359)
Tot_Stor$Year <- seq.Date(as.Date("0000/11/30"),by="year",length=359)
Tot_Stor_Avg_Annual[,1:36] <- mean(Tot_Stor[1:2,1:36])
Tot_Stor_Avg_Annual[,1] <- mean(Tot_Stor[1:2,1])
359/12
## Average Annual Storage ### By Water Year November to October
Tot_Stor_Avg_Annual <- c(1:30,1:36)
Tot_Stor_Avg_Annual <- data.frame(Tot_Stor_Avg_Annual)
View(Tot_Stor_Avg_Annual)
## Average Annual Storage ### By Water Year November to October
Tot_Stor_Avg_Annual <-1:30 , 1:36
## Average Annual Storage ### By Water Year November to October
Tot_Stor_Avg_Annual <-1:30
View(Tot_Stor_Avg_Annual)
Tot_Stor_Avg_Annual <- data.frame(rep("Trace1,Trace1" = 1:30,36))
Tot_Stor_Avg_Annual <- data.frame(rep("Trace1,Trace1" = 1:30))
Tot_Stor_Avg_Annual[,1] <- mean(Tot_Stor[1:12,1])
View(Tot_Stor_Avg_Annual)
## Average Annual Storage ### By Water Year November to October
Tot_Stor_Avg_Annual <-1:30
## Average Annual Storage ### By Water Year November to October
Tot_Stor_Avg_Annual <-1:30
Tot_Stor_Avg_Annual <- data.frame(Tot_Stor_Avg_Annual)
Tot_Stor_Avg_Annual[,1] <- mean(Tot_Stor[1:12,1])
View(Tot_Stor_Avg_Annual)
## Average Annual Storage ### By Water Year November to October
Tot_Stor_Avg_Annual <-1:30
Tot_Stor_Avg_Annual <- data.frame(Tot_Stor_Avg_Annual)
Tot_Stor_Avg_Annual[1,1] <- mean(Tot_Stor[1:12,1])
i=1
j=12
while (i<=30) {
Tot_Stor_Avg_Annual[i,1] <- mean(Tot_Stor[(j-11):j,1])
i=i+1
j=j+12
}
View(Tot_Stor_Avg_Annual)
i=1
j=12
while (i<=30) {
Tot_Stor_Avg_Annual[i,1] <- mean(na.omit(Tot_Stor[(j-11):j,1]))
i=i+1
j=j+12
}
View(Tot_Stor_Avg_Annual)
k=1
while (k<=36) {
i=1
j=12
while (i<=30) {
Tot_Stor_Avg_Annual[i,k] <- mean(na.omit(Tot_Stor[(j-11):j,k]))
i=i+1
j=j+12
}
k=k+1
}
View(Tot_Stor_Avg_Annual)
#rename columns
while (i<=Tot_TraceNum) {
TraceNum1 <- paste0("Trace",TNum)
TraceNum2<- paste0(",Trace",TTNum)
TraceDirectory <- paste0(TraceNum1,TraceNum2)
colnames(Tot_Stor_Avg_Annual)[i] <-  TraceDirectory
i=i+1
if(TTNum > (TraceNumber-1)){
TNum = TNum +1
} else {
TNum = TNum
}
if(TTNum > (TraceNumber1-1)){
TTNum = 1
} else {
TTNum = TTNum + 1
}
}
#rename columns
i=1
TTNum <- 1
TNum <- 1
while (i<=Tot_TraceNum) {
TraceNum1 <- paste0("Trace",TNum)
TraceNum2<- paste0(",Trace",TTNum)
TraceDirectory <- paste0(TraceNum1,TraceNum2)
colnames(Tot_Stor_Avg_Annual)[i] <-  TraceDirectory
i=i+1
if(TTNum > (TraceNumber-1)){
TNum = TNum +1
} else {
TNum = TNum
}
if(TTNum > (TraceNumber1-1)){
TTNum = 1
} else {
TTNum = TTNum + 1
}
}
#add Year Columns
Tot_Stor_Avg_Annual$Year <- c(0001:0030)
#Line plot
#Loop                   #Get rid of Base line??
#different Colors
library(plotly)
p<- plot_ly(Tot_Stor_Avg_Annual, x = Tot_Stor_Avg_Annual$Year, name = 'Base', type = 'scatter', mode = 'lines',
line = list(color = colors(distinct = F), width = 2)) %>%
layout(title = "Average Annual Storage",
xaxis = list(title ="Time"),
yaxis = list(title = "Storage (Acre-Feet)"))
for(trace in colnames(Tot_Stor)){
p <- p %>% plotly::add_trace(y = as.formula(paste0("~`",trace,"`")),name = trace)
}
p
#add Date column
Tot_Stor$Year <- seq.Date(as.Date("11/30"),by ="year",length=30)
#add Date column
Tot_Stor$Year <- seq.Date(as.Date("0000/11/30"),by ="year",length=30)
#add Date column
Tot_Stor_Avg_Annual$Year <- seq.Date(as.Date("0000/11/30"),by ="year",length=30)
#Line plot
#Loop                   #Get rid of Base line??
#different Colors
library(plotly)
p<- plot_ly(Tot_Stor_Avg_Annual, x = Tot_Stor_Avg_Annual$Year, name = 'Base', type = 'scatter', mode = 'lines',
line = list(color = colors(distinct = F), width = 2)) %>%
layout(title = "Average Annual Storage",
xaxis = list(title ="Time"),
yaxis = list(title = "Storage (Acre-Feet)"))
for(trace in colnames(Tot_Stor)){
p <- p %>% plotly::add_trace(y = as.formula(paste0("~`",trace,"`")),name = trace)
}
p
p<- plot_ly(Tot_Stor_Avg_Annual, x = Tot_Stor_Avg_Annual$Year, name = 'Base', type = 'scatter', mode = 'lines',
line = list(color = colors(distinct = F), width = 2)) %>%
layout(title = "Average Annual Storage",
xaxis = list(title ="Time"),
yaxis = list(title = "Storage (Acre-Feet)"))
for(trace in colnames(Tot_Stor_Avg_Annual)){
p <- p %>% plotly::add_trace(y = as.formula(paste0("~`",trace,"`")),name = trace)
}
p
